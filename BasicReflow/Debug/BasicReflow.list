
BasicReflow.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c22c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bfc  0800c340  0800c340  0001c340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf3c  0800cf3c  0002044c  2**0
                  CONTENTS
  4 .ARM          00000000  0800cf3c  0800cf3c  0002044c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cf3c  0800cf3c  0002044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf3c  0800cf3c  0001cf3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf40  0800cf40  0001cf40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000044c  20000000  0800cf44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013ec  2000044c  0800d390  0002044c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001838  0800d390  00021838  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002044c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020475  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001101d  00000000  00000000  000204b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fa5  00000000  00000000  000314d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001048  00000000  00000000  00035480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bc4  00000000  00000000  000364c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c1ba  00000000  00000000  0003708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000174ec  00000000  00000000  00053246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000896da  00000000  00000000  0006a732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e84  00000000  00000000  000f3e0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000f8c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000044c 	.word	0x2000044c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c324 	.word	0x0800c324

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000450 	.word	0x20000450
 800014c:	0800c324 	.word	0x0800c324

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9c:	4b54      	ldr	r3, [pc, #336]	; (8000bf0 <MX_GPIO_Init+0x168>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a53      	ldr	r2, [pc, #332]	; (8000bf0 <MX_GPIO_Init+0x168>)
 8000aa2:	f043 0310 	orr.w	r3, r3, #16
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b51      	ldr	r3, [pc, #324]	; (8000bf0 <MX_GPIO_Init+0x168>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0310 	and.w	r3, r3, #16
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab4:	4b4e      	ldr	r3, [pc, #312]	; (8000bf0 <MX_GPIO_Init+0x168>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a4d      	ldr	r2, [pc, #308]	; (8000bf0 <MX_GPIO_Init+0x168>)
 8000aba:	f043 0320 	orr.w	r3, r3, #32
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b4b      	ldr	r3, [pc, #300]	; (8000bf0 <MX_GPIO_Init+0x168>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0320 	and.w	r3, r3, #32
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000acc:	4b48      	ldr	r3, [pc, #288]	; (8000bf0 <MX_GPIO_Init+0x168>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a47      	ldr	r2, [pc, #284]	; (8000bf0 <MX_GPIO_Init+0x168>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b45      	ldr	r3, [pc, #276]	; (8000bf0 <MX_GPIO_Init+0x168>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae4:	4b42      	ldr	r3, [pc, #264]	; (8000bf0 <MX_GPIO_Init+0x168>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a41      	ldr	r2, [pc, #260]	; (8000bf0 <MX_GPIO_Init+0x168>)
 8000aea:	f043 0308 	orr.w	r3, r3, #8
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b3f      	ldr	r3, [pc, #252]	; (8000bf0 <MX_GPIO_Init+0x168>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0308 	and.w	r3, r3, #8
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PC13_GPIO_Port, PC13_Pin, GPIO_PIN_SET);
 8000afc:	2201      	movs	r2, #1
 8000afe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b02:	483c      	ldr	r0, [pc, #240]	; (8000bf4 <MX_GPIO_Init+0x16c>)
 8000b04:	f001 fdb5 	bl	8002672 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2108      	movs	r1, #8
 8000b0c:	483a      	ldr	r0, [pc, #232]	; (8000bf8 <MX_GPIO_Init+0x170>)
 8000b0e:	f001 fdb0 	bl	8002672 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2110      	movs	r1, #16
 8000b16:	4838      	ldr	r0, [pc, #224]	; (8000bf8 <MX_GPIO_Init+0x170>)
 8000b18:	f001 fdab 	bl	8002672 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LCD_CS_Pin|TC1_CS_Pin|TC2_CS_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2163      	movs	r1, #99	; 0x63
 8000b20:	4836      	ldr	r0, [pc, #216]	; (8000bfc <MX_GPIO_Init+0x174>)
 8000b22:	f001 fda6 	bl	8002672 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(REL_CTRL_GPIO_Port, REL_CTRL_Pin, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b2c:	4833      	ldr	r0, [pc, #204]	; (8000bfc <MX_GPIO_Init+0x174>)
 8000b2e:	f001 fda0 	bl	8002672 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PC13_Pin;
 8000b32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b38:	2311      	movs	r3, #17
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2302      	movs	r3, #2
 8000b42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PC13_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	4619      	mov	r1, r3
 8000b4a:	482a      	ldr	r0, [pc, #168]	; (8000bf4 <MX_GPIO_Init+0x16c>)
 8000b4c:	f001 fbf6 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|LCD_RST_Pin;
 8000b50:	2318      	movs	r3, #24
 8000b52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	f107 0310 	add.w	r3, r7, #16
 8000b64:	4619      	mov	r1, r3
 8000b66:	4824      	ldr	r0, [pc, #144]	; (8000bf8 <MX_GPIO_Init+0x170>)
 8000b68:	f001 fbe8 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin|TC1_CS_Pin|TC2_CS_Pin;
 8000b6c:	2363      	movs	r3, #99	; 0x63
 8000b6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	4619      	mov	r1, r3
 8000b82:	481e      	ldr	r0, [pc, #120]	; (8000bfc <MX_GPIO_Init+0x174>)
 8000b84:	f001 fbda 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = REL_CTRL_Pin;
 8000b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b8e:	2311      	movs	r3, #17
 8000b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2302      	movs	r3, #2
 8000b98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(REL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 0310 	add.w	r3, r7, #16
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4816      	ldr	r0, [pc, #88]	; (8000bfc <MX_GPIO_Init+0x174>)
 8000ba2:	f001 fbcb 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN_SW_Pin;
 8000ba6:	2380      	movs	r3, #128	; 0x80
 8000ba8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <MX_GPIO_Init+0x178>)
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EN_SW_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 0310 	add.w	r3, r7, #16
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4810      	ldr	r0, [pc, #64]	; (8000bfc <MX_GPIO_Init+0x174>)
 8000bba:	f001 fbbf 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = EN_DT_Pin|EN_CLK_Pin;
 8000bbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480a      	ldr	r0, [pc, #40]	; (8000bfc <MX_GPIO_Init+0x174>)
 8000bd4:	f001 fbb2 	bl	800233c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2017      	movs	r0, #23
 8000bde:	f001 fb76 	bl	80022ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000be2:	2017      	movs	r0, #23
 8000be4:	f001 fb8f 	bl	8002306 <HAL_NVIC_EnableIRQ>

}
 8000be8:	bf00      	nop
 8000bea:	3720      	adds	r7, #32
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40011000 	.word	0x40011000
 8000bf8:	40010800 	.word	0x40010800
 8000bfc:	40010c00 	.word	0x40010c00
 8000c00:	10110000 	.word	0x10110000

08000c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c08:	f001 fa04 	bl	8002014 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c0c:	f000 f818 	bl	8000c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c10:	f7ff ff3a 	bl	8000a88 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c14:	f000 f886 	bl	8000d24 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000c18:	f008 f8aa 	bl	8008d70 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  Controller_Init(&controller, &model, &view, &input_device);
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <main+0x2c>)
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <main+0x30>)
 8000c20:	4905      	ldr	r1, [pc, #20]	; (8000c38 <main+0x34>)
 8000c22:	4806      	ldr	r0, [pc, #24]	; (8000c3c <main+0x38>)
 8000c24:	f000 fd34 	bl	8001690 <Controller_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    
    Controller_Main(&controller);
 8000c28:	4804      	ldr	r0, [pc, #16]	; (8000c3c <main+0x38>)
 8000c2a:	f000 fd6b 	bl	8001704 <Controller_Main>
 8000c2e:	e7fb      	b.n	8000c28 <main+0x24>
 8000c30:	20000468 	.word	0x20000468
 8000c34:	20000478 	.word	0x20000478
 8000c38:	20000480 	.word	0x20000480
 8000c3c:	200004a0 	.word	0x200004a0

08000c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b094      	sub	sp, #80	; 0x50
 8000c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c4a:	2228      	movs	r2, #40	; 0x28
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f009 fb31 	bl	800a2b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c70:	2301      	movs	r3, #1
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000c7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c80:	2301      	movs	r3, #1
 8000c82:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c84:	2302      	movs	r3, #2
 8000c86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c8c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c8e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f003 fa89 	bl	80041b0 <HAL_RCC_OscConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000ca4:	f000 f838 	bl	8000d18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca8:	230f      	movs	r3, #15
 8000caa:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cac:	2302      	movs	r3, #2
 8000cae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	2102      	movs	r1, #2
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f003 fcf5 	bl	80046b4 <HAL_RCC_ClockConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cd0:	f000 f822 	bl	8000d18 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000cd4:	2310      	movs	r3, #16
 8000cd6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f003 fe46 	bl	8004970 <HAL_RCCEx_PeriphCLKConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000cea:	f000 f815 	bl	8000d18 <Error_Handler>
  }
}
 8000cee:	bf00      	nop
 8000cf0:	3750      	adds	r7, #80	; 0x50
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	80fb      	strh	r3, [r7, #6]
  Controller_ISRHandler(&controller, GPIO_PIN);
 8000d02:	88fb      	ldrh	r3, [r7, #6]
 8000d04:	4619      	mov	r1, r3
 8000d06:	4803      	ldr	r0, [pc, #12]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000d08:	f000 fd44 	bl	8001794 <Controller_ISRHandler>
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200004a0 	.word	0x200004a0

08000d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1c:	b672      	cpsid	i
}
 8000d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <Error_Handler+0x8>
	...

08000d24 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d28:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <MX_SPI1_Init+0x64>)
 8000d2a:	4a18      	ldr	r2, [pc, #96]	; (8000d8c <MX_SPI1_Init+0x68>)
 8000d2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d2e:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <MX_SPI1_Init+0x64>)
 8000d30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d36:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <MX_SPI1_Init+0x64>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <MX_SPI1_Init+0x64>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <MX_SPI1_Init+0x64>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <MX_SPI1_Init+0x64>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <MX_SPI1_Init+0x64>)
 8000d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <MX_SPI1_Init+0x64>)
 8000d58:	2210      	movs	r2, #16
 8000d5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <MX_SPI1_Init+0x64>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <MX_SPI1_Init+0x64>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d68:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <MX_SPI1_Init+0x64>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <MX_SPI1_Init+0x64>)
 8000d70:	220a      	movs	r2, #10
 8000d72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d74:	4804      	ldr	r0, [pc, #16]	; (8000d88 <MX_SPI1_Init+0x64>)
 8000d76:	f003 feb1 	bl	8004adc <HAL_SPI_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d80:	f7ff ffca 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	200004b4 	.word	0x200004b4
 8000d8c:	40013000 	.word	0x40013000

08000d90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a1b      	ldr	r2, [pc, #108]	; (8000e18 <HAL_SPI_MspInit+0x88>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d12f      	bne.n	8000e10 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000db0:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <HAL_SPI_MspInit+0x8c>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	4a19      	ldr	r2, [pc, #100]	; (8000e1c <HAL_SPI_MspInit+0x8c>)
 8000db6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dba:	6193      	str	r3, [r2, #24]
 8000dbc:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <HAL_SPI_MspInit+0x8c>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <HAL_SPI_MspInit+0x8c>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	4a13      	ldr	r2, [pc, #76]	; (8000e1c <HAL_SPI_MspInit+0x8c>)
 8000dce:	f043 0304 	orr.w	r3, r3, #4
 8000dd2:	6193      	str	r3, [r2, #24]
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <HAL_SPI_MspInit+0x8c>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000de0:	23a0      	movs	r3, #160	; 0xa0
 8000de2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	4619      	mov	r1, r3
 8000df2:	480b      	ldr	r0, [pc, #44]	; (8000e20 <HAL_SPI_MspInit+0x90>)
 8000df4:	f001 faa2 	bl	800233c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000df8:	2340      	movs	r3, #64	; 0x40
 8000dfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <HAL_SPI_MspInit+0x90>)
 8000e0c:	f001 fa96 	bl	800233c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e10:	bf00      	nop
 8000e12:	3720      	adds	r7, #32
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40013000 	.word	0x40013000
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40010800 	.word	0x40010800

08000e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <HAL_MspInit+0x5c>)
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	4a14      	ldr	r2, [pc, #80]	; (8000e80 <HAL_MspInit+0x5c>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6193      	str	r3, [r2, #24]
 8000e36:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_MspInit+0x5c>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e42:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <HAL_MspInit+0x5c>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	4a0e      	ldr	r2, [pc, #56]	; (8000e80 <HAL_MspInit+0x5c>)
 8000e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e4c:	61d3      	str	r3, [r2, #28]
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <HAL_MspInit+0x5c>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_MspInit+0x60>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <HAL_MspInit+0x60>)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e76:	bf00      	nop
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40010000 	.word	0x40010000

08000e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <NMI_Handler+0x4>

08000e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <HardFault_Handler+0x4>

08000e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <MemManage_Handler+0x4>

08000e9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <BusFault_Handler+0x4>

08000ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <UsageFault_Handler+0x4>

08000ea6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr

08000eb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr

08000ebe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr

08000eca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ece:	f001 f8e7 	bl	80020a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ede:	f001 fd1e 	bl	800291e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200011dc 	.word	0x200011dc

08000eec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EN_SW_Pin);
 8000ef0:	2080      	movs	r0, #128	; 0x80
 8000ef2:	f001 fbd7 	bl	80026a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  return 1;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <_kill>:

int _kill(int pid, int sig)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f12:	f009 fa33 	bl	800a37c <__errno>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2216      	movs	r2, #22
 8000f1a:	601a      	str	r2, [r3, #0]
  return -1;
 8000f1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <_exit>:

void _exit (int status)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f30:	f04f 31ff 	mov.w	r1, #4294967295
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ffe7 	bl	8000f08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f3a:	e7fe      	b.n	8000f3a <_exit+0x12>

08000f3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	e00a      	b.n	8000f64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f4e:	f3af 8000 	nop.w
 8000f52:	4601      	mov	r1, r0
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	1c5a      	adds	r2, r3, #1
 8000f58:	60ba      	str	r2, [r7, #8]
 8000f5a:	b2ca      	uxtb	r2, r1
 8000f5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	3301      	adds	r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	dbf0      	blt.n	8000f4e <_read+0x12>
  }

  return len;
 8000f6c:	687b      	ldr	r3, [r7, #4]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	60f8      	str	r0, [r7, #12]
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	e009      	b.n	8000f9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	60ba      	str	r2, [r7, #8]
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	dbf1      	blt.n	8000f88 <_write+0x12>
  }
  return len;
 8000fa4:	687b      	ldr	r3, [r7, #4]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <_close>:

int _close(int file)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr

08000fc4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fd4:	605a      	str	r2, [r3, #4]
  return 0;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr

08000fe2 <_isatty>:

int _isatty(int file)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fea:	2301      	movs	r3, #1
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr

08000ff6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b085      	sub	sp, #20
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	60f8      	str	r0, [r7, #12]
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001002:	2300      	movs	r3, #0
}
 8001004:	4618      	mov	r0, r3
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr
	...

08001010 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001018:	4a14      	ldr	r2, [pc, #80]	; (800106c <_sbrk+0x5c>)
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <_sbrk+0x60>)
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d102      	bne.n	8001032 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <_sbrk+0x64>)
 800102e:	4a12      	ldr	r2, [pc, #72]	; (8001078 <_sbrk+0x68>)
 8001030:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <_sbrk+0x64>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	429a      	cmp	r2, r3
 800103e:	d207      	bcs.n	8001050 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001040:	f009 f99c 	bl	800a37c <__errno>
 8001044:	4603      	mov	r3, r0
 8001046:	220c      	movs	r2, #12
 8001048:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	e009      	b.n	8001064 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <_sbrk+0x64>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001056:	4b07      	ldr	r3, [pc, #28]	; (8001074 <_sbrk+0x64>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <_sbrk+0x64>)
 8001060:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001062:	68fb      	ldr	r3, [r7, #12]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20005000 	.word	0x20005000
 8001070:	00000400 	.word	0x00000400
 8001074:	2000050c 	.word	0x2000050c
 8001078:	20001838 	.word	0x20001838

0800107c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001088:	f7ff fff8 	bl	800107c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800108c:	480b      	ldr	r0, [pc, #44]	; (80010bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800108e:	490c      	ldr	r1, [pc, #48]	; (80010c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001090:	4a0c      	ldr	r2, [pc, #48]	; (80010c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001094:	e002      	b.n	800109c <LoopCopyDataInit>

08001096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109a:	3304      	adds	r3, #4

0800109c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800109c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a0:	d3f9      	bcc.n	8001096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a2:	4a09      	ldr	r2, [pc, #36]	; (80010c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010a4:	4c09      	ldr	r4, [pc, #36]	; (80010cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a8:	e001      	b.n	80010ae <LoopFillZerobss>

080010aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ac:	3204      	adds	r2, #4

080010ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b0:	d3fb      	bcc.n	80010aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010b2:	f009 f969 	bl	800a388 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010b6:	f7ff fda5 	bl	8000c04 <main>
  bx lr
 80010ba:	4770      	bx	lr
  ldr r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c0:	2000044c 	.word	0x2000044c
  ldr r2, =_sidata
 80010c4:	0800cf44 	.word	0x0800cf44
  ldr r2, =_sbss
 80010c8:	2000044c 	.word	0x2000044c
  ldr r4, =_ebss
 80010cc:	20001838 	.word	0x20001838

080010d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC1_2_IRQHandler>

080010d2 <Encoder_Init>:

// Grey code - provides a low noise method of decoding state transitions
// of encoder brushes, much lower noise than manually comparing state w debounce.
static int grey_code[] = { 0, 1, -1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, 1, 0 };

void Encoder_Init(Encoder *this) {
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
    // Do nothing for now... Should be initialized to 0s by default which is ok
    this->debounce_timer = 0;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
    this->clicked = 0;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	605a      	str	r2, [r3, #4]
    this->psns = 0;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
    this->store = 0;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <Encoder_Update>:

int Encoder_Update(Encoder *this, int clk, int dt) {
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
    this->psns <<= 2;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	009a      	lsls	r2, r3, #2
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	609a      	str	r2, [r3, #8]
    if (clk) this->psns |= 0x02;
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d005      	beq.n	8001124 <Encoder_Update+0x28>
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f043 0202 	orr.w	r2, r3, #2
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	609a      	str	r2, [r3, #8]
    if (dt) this->psns |= 0x01;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d005      	beq.n	8001136 <Encoder_Update+0x3a>
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f043 0201 	orr.w	r2, r3, #1
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	609a      	str	r2, [r3, #8]
    this->psns &= 0x0f;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 020f 	and.w	r2, r3, #15
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	609a      	str	r2, [r3, #8]
    if (grey_code[this->psns]) {
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	4a13      	ldr	r2, [pc, #76]	; (8001194 <Encoder_Update+0x98>)
 8001148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d01a      	beq.n	8001186 <Encoder_Update+0x8a>
        this->store <<= 4;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	011a      	lsls	r2, r3, #4
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	60da      	str	r2, [r3, #12]
        this->store |= this->psns;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	68da      	ldr	r2, [r3, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	431a      	orrs	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	60da      	str	r2, [r3, #12]
        if ((this->store & 0xff) == 0x2b) return -1;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b2b      	cmp	r3, #43	; 0x2b
 8001170:	d102      	bne.n	8001178 <Encoder_Update+0x7c>
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	e007      	b.n	8001188 <Encoder_Update+0x8c>
        if ((this->store & 0xff) == 0x17) return 1;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b17      	cmp	r3, #23
 8001180:	d101      	bne.n	8001186 <Encoder_Update+0x8a>
 8001182:	2301      	movs	r3, #1
 8001184:	e000      	b.n	8001188 <Encoder_Update+0x8c>
    }
    return 0;
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000004 	.word	0x20000004

08001198 <Encoder_Clear>:

void Encoder_Clear(Encoder *this) {
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
    this->clicked = 0;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	605a      	str	r2, [r3, #4]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <Encoder_SwitchISR>:

void Encoder_Reset(Encoder *this) {
    Encoder_Init(this);
}

void Encoder_SwitchISR(Encoder *this) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
    // Call this bad boy in the ISR
    if ((HAL_GetTick() - this->debounce_timer) > 10) {
 80011b8:	f000 ff84 	bl	80020c4 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b0a      	cmp	r3, #10
 80011c6:	d908      	bls.n	80011da <Encoder_SwitchISR+0x2a>
        this->debounce_timer = HAL_GetTick(); 
 80011c8:	f000 ff7c 	bl	80020c4 <HAL_GetTick>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	601a      	str	r2, [r3, #0]
        this->clicked = 1;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	605a      	str	r2, [r3, #4]
    }
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <About_onShow>:

#include "../Views/page.h"

void About_onShow(View *view) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af04      	add	r7, sp, #16
 80011ea:	6078      	str	r0, [r7, #4]
    Display_ClearInner();
 80011ec:	f000 fb13 	bl	8001816 <Display_ClearInner>
    ST7735_WriteString(MENU_INSET, MENU_Y_INSET, "Back", FF, THEME_BG, THEME);
 80011f0:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <About_onShow+0x84>)
 80011f2:	f24d 1240 	movw	r2, #53568	; 0xd140
 80011f6:	9202      	str	r2, [sp, #8]
 80011f8:	2200      	movs	r2, #0
 80011fa:	9201      	str	r2, [sp, #4]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	9200      	str	r2, [sp, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a1a      	ldr	r2, [pc, #104]	; (800126c <About_onShow+0x88>)
 8001204:	2120      	movs	r1, #32
 8001206:	2008      	movs	r0, #8
 8001208:	f000 fd2d 	bl	8001c66 <ST7735_WriteString>
    ST7735_WriteString(MENU_INSET, MENU_Y_INSET + LINE_HEIGHT, "V0.1.0", FF, THEME, THEME_BG);
 800120c:	4b16      	ldr	r3, [pc, #88]	; (8001268 <About_onShow+0x84>)
 800120e:	2200      	movs	r2, #0
 8001210:	9202      	str	r2, [sp, #8]
 8001212:	f24d 1240 	movw	r2, #53568	; 0xd140
 8001216:	9201      	str	r2, [sp, #4]
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	9200      	str	r2, [sp, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a14      	ldr	r2, [pc, #80]	; (8001270 <About_onShow+0x8c>)
 8001220:	212e      	movs	r1, #46	; 0x2e
 8001222:	2008      	movs	r0, #8
 8001224:	f000 fd1f 	bl	8001c66 <ST7735_WriteString>
    ST7735_WriteString(MENU_INSET, MENU_Y_INSET + 2 * LINE_HEIGHT, "(C) M Vredevoogd", FF, THEME, THEME_BG);
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <About_onShow+0x84>)
 800122a:	2200      	movs	r2, #0
 800122c:	9202      	str	r2, [sp, #8]
 800122e:	f24d 1240 	movw	r2, #53568	; 0xd140
 8001232:	9201      	str	r2, [sp, #4]
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	9200      	str	r2, [sp, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <About_onShow+0x90>)
 800123c:	213c      	movs	r1, #60	; 0x3c
 800123e:	2008      	movs	r0, #8
 8001240:	f000 fd11 	bl	8001c66 <ST7735_WriteString>
    ST7735_WriteString(MENU_INSET, MENU_Y_INSET + 3 * LINE_HEIGHT, "2023", FF, THEME, THEME_BG);
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <About_onShow+0x84>)
 8001246:	2200      	movs	r2, #0
 8001248:	9202      	str	r2, [sp, #8]
 800124a:	f24d 1240 	movw	r2, #53568	; 0xd140
 800124e:	9201      	str	r2, [sp, #4]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	9200      	str	r2, [sp, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a08      	ldr	r2, [pc, #32]	; (8001278 <About_onShow+0x94>)
 8001258:	214a      	movs	r1, #74	; 0x4a
 800125a:	2008      	movs	r0, #8
 800125c:	f000 fd03 	bl	8001c66 <ST7735_WriteString>
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000104 	.word	0x20000104
 800126c:	0800c340 	.word	0x0800c340
 8001270:	0800c348 	.word	0x0800c348
 8001274:	0800c350 	.word	0x0800c350
 8001278:	0800c364 	.word	0x0800c364

0800127c <About_onHide>:

void About_onHide(View *view) {
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
    //pass
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr

0800128e <About_onUpdate>:

void About_onUpdate(View *view) {
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
    //pass
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr

080012a0 <About_onClick>:

void About_onClick(View *view) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
    View_ShowPage(view, &Page_MainMenu);
 80012a8:	4903      	ldr	r1, [pc, #12]	; (80012b8 <About_onClick+0x18>)
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 fb28 	bl	8001900 <View_ShowPage>
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000098 	.word	0x20000098

080012bc <About_onScroll>:

void About_onScroll(View *view, int increment) {
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
    //pass
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <Draw_MainMenu>:
        "Gains",
        "About"
    }
};

void Draw_MainMenu() {
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b087      	sub	sp, #28
 80012d4:	af04      	add	r7, sp, #16
    for (int i = 0; i < N_OPTIONS; i++) {
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	e030      	b.n	800133e <Draw_MainMenu+0x6e>
        ST7735_WriteString(
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	b29b      	uxth	r3, r3
 80012e0:	461a      	mov	r2, r3
 80012e2:	00d2      	lsls	r2, r2, #3
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	3320      	adds	r3, #32
 80012ec:	b298      	uxth	r0, r3
            MENU_INSET, 
            MENU_Y_INSET + i * LINE_HEIGHT, 
            mainmenu.options[i],
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	4613      	mov	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	4413      	add	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4a15      	ldr	r2, [pc, #84]	; (8001350 <Draw_MainMenu+0x80>)
 80012fa:	4413      	add	r3, r2
 80012fc:	1d1c      	adds	r4, r3, #4
            FF,
            (i == mainmenu.selected) ? THEME_BG : THEME,
 80012fe:	4b14      	ldr	r3, [pc, #80]	; (8001350 <Draw_MainMenu+0x80>)
 8001300:	681b      	ldr	r3, [r3, #0]
        ST7735_WriteString(
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	429a      	cmp	r2, r3
 8001306:	d101      	bne.n	800130c <Draw_MainMenu+0x3c>
 8001308:	2200      	movs	r2, #0
 800130a:	e001      	b.n	8001310 <Draw_MainMenu+0x40>
 800130c:	f24d 1240 	movw	r2, #53568	; 0xd140
            (i == mainmenu.selected) ? THEME : THEME_BG
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <Draw_MainMenu+0x80>)
 8001312:	681b      	ldr	r3, [r3, #0]
        ST7735_WriteString(
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	4299      	cmp	r1, r3
 8001318:	d102      	bne.n	8001320 <Draw_MainMenu+0x50>
 800131a:	f24d 1140 	movw	r1, #53568	; 0xd140
 800131e:	e000      	b.n	8001322 <Draw_MainMenu+0x52>
 8001320:	2100      	movs	r1, #0
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <Draw_MainMenu+0x84>)
 8001324:	9102      	str	r1, [sp, #8]
 8001326:	9201      	str	r2, [sp, #4]
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	9200      	str	r2, [sp, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4622      	mov	r2, r4
 8001330:	4601      	mov	r1, r0
 8001332:	2008      	movs	r0, #8
 8001334:	f000 fc97 	bl	8001c66 <ST7735_WriteString>
    for (int i = 0; i < N_OPTIONS; i++) {
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3301      	adds	r3, #1
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b04      	cmp	r3, #4
 8001342:	ddcb      	ble.n	80012dc <Draw_MainMenu+0xc>
        );
    };
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	bd90      	pop	{r4, r7, pc}
 800134e:	bf00      	nop
 8001350:	20000058 	.word	0x20000058
 8001354:	20000104 	.word	0x20000104

08001358 <MainMenu_onShow>:

void MainMenu_onShow(View *view) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
    Display_ClearInner();
 8001360:	f000 fa59 	bl	8001816 <Display_ClearInner>
    Draw_MainMenu();
 8001364:	f7ff ffb4 	bl	80012d0 <Draw_MainMenu>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <MainMenu_onHide>:

void MainMenu_onHide(View *view) {
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]

} 
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr

08001382 <MainMenu_onUpdate>:

void MainMenu_onUpdate(View *view) {
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]

}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <MainMenu_onClick>:

void MainMenu_onClick(View *view) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
    switch (mainmenu.selected) {
 800139c:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <MainMenu_onClick+0x4c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b04      	cmp	r3, #4
 80013a2:	d817      	bhi.n	80013d4 <MainMenu_onClick+0x40>
 80013a4:	a201      	add	r2, pc, #4	; (adr r2, 80013ac <MainMenu_onClick+0x18>)
 80013a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013aa:	bf00      	nop
 80013ac:	080013d5 	.word	0x080013d5
 80013b0:	080013d5 	.word	0x080013d5
 80013b4:	080013d5 	.word	0x080013d5
 80013b8:	080013c1 	.word	0x080013c1
 80013bc:	080013cb 	.word	0x080013cb
            break;
        case OPT_CALIBRATE:
            // View_ShowPage(view, &Page_Settings);
            break;
        case OPT_GAINS:
            View_ShowPage(view, &Page_Settings);
 80013c0:	4908      	ldr	r1, [pc, #32]	; (80013e4 <MainMenu_onClick+0x50>)
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 fa9c 	bl	8001900 <View_ShowPage>
            break;
 80013c8:	e005      	b.n	80013d6 <MainMenu_onClick+0x42>
        case OPT_ABOUT:
            View_ShowPage(view, &Page_About);
 80013ca:	4907      	ldr	r1, [pc, #28]	; (80013e8 <MainMenu_onClick+0x54>)
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 fa97 	bl	8001900 <View_ShowPage>
            break;
 80013d2:	e000      	b.n	80013d6 <MainMenu_onClick+0x42>
        default:
            // Do nothin
            break;
 80013d4:	bf00      	nop
    }
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000058 	.word	0x20000058
 80013e4:	200000f0 	.word	0x200000f0
 80013e8:	20000044 	.word	0x20000044

080013ec <MainMenu_onScroll>:

void MainMenu_onScroll(View *view, int increment) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
    int next = Util_clamp_int(mainmenu.selected - increment, 0, N_OPTIONS - 1);
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <MainMenu_onScroll+0x3c>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2204      	movs	r2, #4
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f000 fa3e 	bl	8001884 <Util_clamp_int>
 8001408:	60f8      	str	r0, [r7, #12]
    if (next != mainmenu.selected) {
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <MainMenu_onScroll+0x3c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	429a      	cmp	r2, r3
 8001412:	d004      	beq.n	800141e <MainMenu_onScroll+0x32>
        mainmenu.selected = next;
 8001414:	4a04      	ldr	r2, [pc, #16]	; (8001428 <MainMenu_onScroll+0x3c>)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6013      	str	r3, [r2, #0]
        Draw_MainMenu();
 800141a:	f7ff ff59 	bl	80012d0 <Draw_MainMenu>
    }
}
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000058 	.word	0x20000058

0800142c <Draw_PID_Gain>:
        "I Gain",
        "D Gain"
    }
};

void Draw_PID_Gain(int ypos, int gain, int highlight) {
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b08b      	sub	sp, #44	; 0x2c
 8001430:	af04      	add	r7, sp, #16
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]

    char display_string[6];
    sprintf(display_string, "%3d", gain);
 8001438:	f107 0310 	add.w	r3, r7, #16
 800143c:	68ba      	ldr	r2, [r7, #8]
 800143e:	4912      	ldr	r1, [pc, #72]	; (8001488 <Draw_PID_Gain+0x5c>)
 8001440:	4618      	mov	r0, r3
 8001442:	f008 fed5 	bl	800a1f0 <siprintf>

    ST7735_WriteString(
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	b298      	uxth	r0, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <Draw_PID_Gain+0x28>
 8001450:	2200      	movs	r2, #0
 8001452:	e001      	b.n	8001458 <Draw_PID_Gain+0x2c>
 8001454:	f24d 1240 	movw	r2, #53568	; 0xd140
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d002      	beq.n	8001464 <Draw_PID_Gain+0x38>
 800145e:	f24d 1140 	movw	r1, #53568	; 0xd140
 8001462:	e000      	b.n	8001466 <Draw_PID_Gain+0x3a>
 8001464:	2100      	movs	r1, #0
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <Draw_PID_Gain+0x60>)
 8001468:	f107 0410 	add.w	r4, r7, #16
 800146c:	9102      	str	r1, [sp, #8]
 800146e:	9201      	str	r2, [sp, #4]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	9200      	str	r2, [sp, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4622      	mov	r2, r4
 8001478:	4601      	mov	r1, r0
 800147a:	207d      	movs	r0, #125	; 0x7d
 800147c:	f000 fbf3 	bl	8001c66 <ST7735_WriteString>
        display_string,
        FF,
        (highlight) ? THEME_BG : THEME,
        (highlight) ? THEME : THEME_BG
    );
}
 8001480:	bf00      	nop
 8001482:	371c      	adds	r7, #28
 8001484:	46bd      	mov	sp, r7
 8001486:	bd90      	pop	{r4, r7, pc}
 8001488:	0800c36c 	.word	0x0800c36c
 800148c:	20000104 	.word	0x20000104

08001490 <Draw_Settings>:

void Draw_Settings() {
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b087      	sub	sp, #28
 8001494:	af04      	add	r7, sp, #16
    for (int i = 0; i < N_OPTIONS; i++) {
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	e058      	b.n	800154e <Draw_Settings+0xbe>
        // IF i == 0: write back button.
        ST7735_WriteString(
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	461a      	mov	r2, r3
 80014a2:	00d2      	lsls	r2, r2, #3
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	3320      	adds	r3, #32
 80014ac:	b298      	uxth	r0, r3
            MENU_INSET,
            MENU_Y_INSET + i * LINE_HEIGHT,
            settings.options[i],
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	3310      	adds	r3, #16
 80014ba:	4a29      	ldr	r2, [pc, #164]	; (8001560 <Draw_Settings+0xd0>)
 80014bc:	4413      	add	r3, r2
 80014be:	1d1c      	adds	r4, r3, #4
            FF,
            ((i == settings.selected) && (!settings.editing)) ? THEME_BG : THEME,
 80014c0:	4b27      	ldr	r3, [pc, #156]	; (8001560 <Draw_Settings+0xd0>)
 80014c2:	681b      	ldr	r3, [r3, #0]
        ST7735_WriteString(
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d105      	bne.n	80014d6 <Draw_Settings+0x46>
            ((i == settings.selected) && (!settings.editing)) ? THEME_BG : THEME,
 80014ca:	4b25      	ldr	r3, [pc, #148]	; (8001560 <Draw_Settings+0xd0>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <Draw_Settings+0x46>
        ST7735_WriteString(
 80014d2:	2200      	movs	r2, #0
 80014d4:	e001      	b.n	80014da <Draw_Settings+0x4a>
 80014d6:	f24d 1240 	movw	r2, #53568	; 0xd140
            ((i == settings.selected) && (!settings.editing)) ? THEME : THEME_BG
 80014da:	4b21      	ldr	r3, [pc, #132]	; (8001560 <Draw_Settings+0xd0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
        ST7735_WriteString(
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	4299      	cmp	r1, r3
 80014e2:	d106      	bne.n	80014f2 <Draw_Settings+0x62>
            ((i == settings.selected) && (!settings.editing)) ? THEME : THEME_BG
 80014e4:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <Draw_Settings+0xd0>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d102      	bne.n	80014f2 <Draw_Settings+0x62>
        ST7735_WriteString(
 80014ec:	f24d 1140 	movw	r1, #53568	; 0xd140
 80014f0:	e000      	b.n	80014f4 <Draw_Settings+0x64>
 80014f2:	2100      	movs	r1, #0
 80014f4:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <Draw_Settings+0xd4>)
 80014f6:	9102      	str	r1, [sp, #8]
 80014f8:	9201      	str	r2, [sp, #4]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	9200      	str	r2, [sp, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4622      	mov	r2, r4
 8001502:	4601      	mov	r1, r0
 8001504:	2008      	movs	r0, #8
 8001506:	f000 fbae 	bl	8001c66 <ST7735_WriteString>
        );
        if (i > 0) Draw_PID_Gain(MENU_Y_INSET + i * LINE_HEIGHT, settings.gains[i - 1], (i == settings.selected) && (settings.editing));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	dd1b      	ble.n	8001548 <Draw_Settings+0xb8>
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	1a9b      	subs	r3, r3, r2
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	f103 0020 	add.w	r0, r3, #32
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3b01      	subs	r3, #1
 8001522:	4a0f      	ldr	r2, [pc, #60]	; (8001560 <Draw_Settings+0xd0>)
 8001524:	3302      	adds	r3, #2
 8001526:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800152a:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <Draw_Settings+0xd0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	429a      	cmp	r2, r3
 8001532:	d105      	bne.n	8001540 <Draw_Settings+0xb0>
 8001534:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <Draw_Settings+0xd0>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <Draw_Settings+0xb0>
 800153c:	2301      	movs	r3, #1
 800153e:	e000      	b.n	8001542 <Draw_Settings+0xb2>
 8001540:	2300      	movs	r3, #0
 8001542:	461a      	mov	r2, r3
 8001544:	f7ff ff72 	bl	800142c <Draw_PID_Gain>
    for (int i = 0; i < N_OPTIONS; i++) {
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3301      	adds	r3, #1
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b03      	cmp	r3, #3
 8001552:	dda3      	ble.n	800149c <Draw_Settings+0xc>
    }
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	bd90      	pop	{r4, r7, pc}
 800155e:	bf00      	nop
 8001560:	200000ac 	.word	0x200000ac
 8001564:	20000104 	.word	0x20000104

08001568 <Settings_onShow>:

void Settings_onShow(View *view) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
    Display_ClearInner();
 8001570:	f000 f951 	bl	8001816 <Display_ClearInner>
    Draw_Settings();
 8001574:	f7ff ff8c 	bl	8001490 <Draw_Settings>
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <Settings_onHide>:

void Settings_onHide(View *view) {
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr

08001592 <Settings_onUpdate>:

void Settings_onUpdate(View *view) {
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]

}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <Settings_onClick>:

void Settings_onClick(View *view) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
    if (settings.selected == 0) View_ShowPage(view, &Page_MainMenu);
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <Settings_onClick+0x4c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d104      	bne.n	80015be <Settings_onClick+0x1a>
 80015b4:	490f      	ldr	r1, [pc, #60]	; (80015f4 <Settings_onClick+0x50>)
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 f9a2 	bl	8001900 <View_ShowPage>
    else if ((settings.selected > 0) && (settings.selected < N_OPTIONS)) {
        settings.editing = (settings.editing) ? 0 : 1;
        Draw_Settings();
    }
}
 80015bc:	e013      	b.n	80015e6 <Settings_onClick+0x42>
    else if ((settings.selected > 0) && (settings.selected < N_OPTIONS)) {
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <Settings_onClick+0x4c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	dd0f      	ble.n	80015e6 <Settings_onClick+0x42>
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <Settings_onClick+0x4c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b03      	cmp	r3, #3
 80015cc:	dc0b      	bgt.n	80015e6 <Settings_onClick+0x42>
        settings.editing = (settings.editing) ? 0 : 1;
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <Settings_onClick+0x4c>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	bf0c      	ite	eq
 80015d6:	2301      	moveq	r3, #1
 80015d8:	2300      	movne	r3, #0
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	461a      	mov	r2, r3
 80015de:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <Settings_onClick+0x4c>)
 80015e0:	605a      	str	r2, [r3, #4]
        Draw_Settings();
 80015e2:	f7ff ff55 	bl	8001490 <Draw_Settings>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	200000ac 	.word	0x200000ac
 80015f4:	20000098 	.word	0x20000098

080015f8 <Settings_onScroll>:

void Settings_onScroll(View *view, int increment) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
    if (settings.editing) {
 8001602:	4b22      	ldr	r3, [pc, #136]	; (800168c <Settings_onScroll+0x94>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d027      	beq.n	800165a <Settings_onScroll+0x62>
        if (settings.selected > 0) {
 800160a:	4b20      	ldr	r3, [pc, #128]	; (800168c <Settings_onScroll+0x94>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	dd37      	ble.n	8001682 <Settings_onScroll+0x8a>
            settings.gains[settings.selected - 1] += increment;
 8001612:	4b1e      	ldr	r3, [pc, #120]	; (800168c <Settings_onScroll+0x94>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	3b01      	subs	r3, #1
 8001618:	4a1c      	ldr	r2, [pc, #112]	; (800168c <Settings_onScroll+0x94>)
 800161a:	3302      	adds	r3, #2
 800161c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001620:	4b1a      	ldr	r3, [pc, #104]	; (800168c <Settings_onScroll+0x94>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	3b01      	subs	r3, #1
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	440a      	add	r2, r1
 800162a:	4918      	ldr	r1, [pc, #96]	; (800168c <Settings_onScroll+0x94>)
 800162c:	3302      	adds	r3, #2
 800162e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            Draw_PID_Gain(
                MENU_Y_INSET + settings.selected * LINE_HEIGHT, 
 8001632:	4b16      	ldr	r3, [pc, #88]	; (800168c <Settings_onScroll+0x94>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4613      	mov	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	1a9b      	subs	r3, r3, r2
 800163c:	005b      	lsls	r3, r3, #1
            Draw_PID_Gain(
 800163e:	f103 0020 	add.w	r0, r3, #32
                settings.gains[settings.selected - 1],
 8001642:	4b12      	ldr	r3, [pc, #72]	; (800168c <Settings_onScroll+0x94>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	3b01      	subs	r3, #1
            Draw_PID_Gain(
 8001648:	4a10      	ldr	r2, [pc, #64]	; (800168c <Settings_onScroll+0x94>)
 800164a:	3302      	adds	r3, #2
 800164c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001650:	2201      	movs	r2, #1
 8001652:	4619      	mov	r1, r3
 8001654:	f7ff feea 	bl	800142c <Draw_PID_Gain>
        if (next != settings.selected) {
            settings.selected = next;
            Draw_Settings();
        }
    }
}
 8001658:	e013      	b.n	8001682 <Settings_onScroll+0x8a>
        int next = Util_clamp_int(settings.selected - increment, 0, N_OPTIONS - 1);
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <Settings_onScroll+0x94>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2203      	movs	r2, #3
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f000 f90c 	bl	8001884 <Util_clamp_int>
 800166c:	60f8      	str	r0, [r7, #12]
        if (next != settings.selected) {
 800166e:	4b07      	ldr	r3, [pc, #28]	; (800168c <Settings_onScroll+0x94>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	429a      	cmp	r2, r3
 8001676:	d004      	beq.n	8001682 <Settings_onScroll+0x8a>
            settings.selected = next;
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <Settings_onScroll+0x94>)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6013      	str	r3, [r2, #0]
            Draw_Settings();
 800167e:	f7ff ff07 	bl	8001490 <Draw_Settings>
}
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200000ac 	.word	0x200000ac

08001690 <Controller_Init>:

#define LED_ON HAL_GPIO_WritePin(PC13_GPIO_Port, PC13_Pin, GPIO_PIN_RESET)
#define LED_OFF HAL_GPIO_WritePin(PC13_GPIO_Port, PC13_Pin, GPIO_PIN_SET)


void Controller_Init(Controller* this, Model *model, View *view, Encoder *input_device) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	603b      	str	r3, [r7, #0]

    // Set base update rate to 50 Hz. This must be greater than the desired display frame rate
    this->update_rate = 50;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2232      	movs	r2, #50	; 0x32
 80016a2:	60da      	str	r2, [r3, #12]
    this->input = input_device;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	609a      	str	r2, [r3, #8]
    this->model = model;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	68ba      	ldr	r2, [r7, #8]
 80016ae:	605a      	str	r2, [r3, #4]
    this->view = view;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	601a      	str	r2, [r3, #0]

    /*Setup*/
    Encoder_Init(this->input);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fd09 	bl	80010d2 <Encoder_Init>
    Model_Init(this->model);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f000 f8b4 	bl	8001832 <Model_Init>
    View_Init(this->view, this, this->model);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6818      	ldr	r0, [r3, #0]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	461a      	mov	r2, r3
 80016d4:	68f9      	ldr	r1, [r7, #12]
 80016d6:	f000 f8ef 	bl	80018b8 <View_Init>
    
    RELAY_OFF;
 80016da:	2201      	movs	r2, #1
 80016dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016e0:	4806      	ldr	r0, [pc, #24]	; (80016fc <Controller_Init+0x6c>)
 80016e2:	f000 ffc6 	bl	8002672 <HAL_GPIO_WritePin>
    LED_OFF;
 80016e6:	2201      	movs	r2, #1
 80016e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ec:	4804      	ldr	r0, [pc, #16]	; (8001700 <Controller_Init+0x70>)
 80016ee:	f000 ffc0 	bl	8002672 <HAL_GPIO_WritePin>
}
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40010c00 	.word	0x40010c00
 8001700:	40011000 	.word	0x40011000

08001704 <Controller_Main>:

void Controller_Main(Controller *this) {
 8001704:	b5b0      	push	{r4, r5, r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
    /*Primary Loop Method*/

    /* tick the model over */
    Model_Tick(this->model, HAL_GetTick());
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685c      	ldr	r4, [r3, #4]
 8001710:	f000 fcd8 	bl	80020c4 <HAL_GetTick>
 8001714:	4603      	mov	r3, r0
 8001716:	4619      	mov	r1, r3
 8001718:	4620      	mov	r0, r4
 800171a:	f000 f8a2 	bl	8001862 <Model_Tick>
        Check for input events
        ----------------------
    */ 

    // Encoder (scroll event)  
    int scroll = Encoder_Update(
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689c      	ldr	r4, [r3, #8]
        this->input,
        HAL_GPIO_ReadPin(GPIOB, EN_CLK_Pin),
 8001722:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001726:	481a      	ldr	r0, [pc, #104]	; (8001790 <Controller_Main+0x8c>)
 8001728:	f000 ff8c 	bl	8002644 <HAL_GPIO_ReadPin>
 800172c:	4603      	mov	r3, r0
    int scroll = Encoder_Update(
 800172e:	461d      	mov	r5, r3
        HAL_GPIO_ReadPin(GPIOB, EN_DT_Pin)
 8001730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001734:	4816      	ldr	r0, [pc, #88]	; (8001790 <Controller_Main+0x8c>)
 8001736:	f000 ff85 	bl	8002644 <HAL_GPIO_ReadPin>
 800173a:	4603      	mov	r3, r0
    int scroll = Encoder_Update(
 800173c:	461a      	mov	r2, r3
 800173e:	4629      	mov	r1, r5
 8001740:	4620      	mov	r0, r4
 8001742:	f7ff fcdb 	bl	80010fc <Encoder_Update>
 8001746:	60f8      	str	r0, [r7, #12]
    );
    if (scroll) View_onScroll(this->view, scroll);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d005      	beq.n	800175a <Controller_Main+0x56>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68f9      	ldr	r1, [r7, #12]
 8001754:	4618      	mov	r0, r3
 8001756:	f000 f8ff 	bl	8001958 <View_onScroll>

    // Button (click event fires on button release)
    if (this->input->clicked) {
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d009      	beq.n	8001778 <Controller_Main+0x74>
        // Pass the onClick event to the view
        View_onClick(this->view);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f000 f8e8 	bl	800193e <View_onClick>
        // Clear encoder button flag
        Encoder_Clear(this->input);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fd10 	bl	8001198 <Encoder_Clear>
    }

    View_Update(this->view, this->model);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	4619      	mov	r1, r3
 8001782:	4610      	mov	r0, r2
 8001784:	f000 f8cd 	bl	8001922 <View_Update>
    //     // this->t2 = MAX6675_Read(GPIOB, TC2_CS_Pin, 1.0, 0.0);
    //     this->sensor_tick = HAL_GetTick();
    // }


}
 8001788:	bf00      	nop
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bdb0      	pop	{r4, r5, r7, pc}
 8001790:	40010c00 	.word	0x40010c00

08001794 <Controller_ISRHandler>:

void Controller_ISRHandler(Controller *this, uint16_t pin) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]
    // Interrupt called on encoder switch rising edge
    if (pin == EN_SW_Pin) Encoder_SwitchISR(this->input);
 80017a0:	887b      	ldrh	r3, [r7, #2]
 80017a2:	2b80      	cmp	r3, #128	; 0x80
 80017a4:	d104      	bne.n	80017b0 <Controller_ISRHandler+0x1c>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fd00 	bl	80011b0 <Encoder_SwitchISR>
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <Display_DrawFrame>:

#include "display.h"

void Display_DrawFrame(void) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af04      	add	r7, sp, #16
    // Inset border
    ST7735_LineRect(
 80017be:	f24d 1340 	movw	r3, #53568	; 0xd140
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	237c      	movs	r3, #124	; 0x7c
 80017c6:	229c      	movs	r2, #156	; 0x9c
 80017c8:	2104      	movs	r1, #4
 80017ca:	2004      	movs	r0, #4
 80017cc:	f000 fbe6 	bl	8001f9c <ST7735_LineRect>
        ST7735_HEIGHT - BORDER_INSET,
        THEME
    );
    
    // Header
    ST7735_HLine(BORDER_INSET, ST7735_WIDTH - BORDER_INSET, 24, THEME);
 80017d0:	f24d 1340 	movw	r3, #53568	; 0xd140
 80017d4:	2218      	movs	r2, #24
 80017d6:	219c      	movs	r1, #156	; 0x9c
 80017d8:	2004      	movs	r0, #4
 80017da:	f000 fb13 	bl	8001e04 <ST7735_HLine>
    ST7735_WriteString(MENU_INSET, BORDER_INSET + 4, "BasicReflow V01", Font_7x10, THEME, THEME_BG);
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <Display_DrawFrame+0x48>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	9202      	str	r2, [sp, #8]
 80017e4:	f24d 1240 	movw	r2, #53568	; 0xd140
 80017e8:	9201      	str	r2, [sp, #4]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	9200      	str	r2, [sp, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a04      	ldr	r2, [pc, #16]	; (8001804 <Display_DrawFrame+0x4c>)
 80017f2:	2108      	movs	r1, #8
 80017f4:	2008      	movs	r0, #8
 80017f6:	f000 fa36 	bl	8001c66 <ST7735_WriteString>
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000104 	.word	0x20000104
 8001804:	0800c370 	.word	0x0800c370

08001808 <Display_Clear>:

void Display_Clear(void) {
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
    ST7735_FillScreenFast(ST7735_BLACK);
 800180c:	2000      	movs	r0, #0
 800180e:	f000 fbf0 	bl	8001ff2 <ST7735_FillScreenFast>
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}

08001816 <Display_ClearInner>:

void Display_ClearInner(void) {
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af02      	add	r7, sp, #8
    ST7735_FillRectangleFast(
 800181c:	2300      	movs	r3, #0
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2356      	movs	r3, #86	; 0x56
 8001822:	228e      	movs	r2, #142	; 0x8e
 8001824:	2120      	movs	r1, #32
 8001826:	2005      	movs	r0, #5
 8001828:	f000 fa68 	bl	8001cfc <ST7735_FillRectangleFast>
        MENU_Y_INSET,
        MENU_WIDTH, 
        MENU_HEIGHT, 
        THEME_BG
    );
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <Model_Init>:

#include "model.h"

void Model_Init(Model *this) {
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
    this->t_ms = 0;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	605a      	str	r2, [r3, #4]
    this->t_ms_last = 0;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
    this->last_state_time = 0;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	60da      	str	r2, [r3, #12]
    this->t_state = 0;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	611a      	str	r2, [r3, #16]
    this->machine_state = STATE_BOOT;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr

08001862 <Model_Tick>:

void Model_Tick(Model *this, uint32_t tick) {
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
    this->t_ms_last = this->t_ms;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	609a      	str	r2, [r3, #8]
    this->t_ms = tick;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	605a      	str	r2, [r3, #4]
//    this->t_state = this->t_ms - this->last_state_time;
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr

08001884 <Util_clamp_int>:

#include "util.h"

int Util_clamp_int(int x, int min, int max) {
 8001884:	b480      	push	{r7}
 8001886:	b087      	sub	sp, #28
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
    int r = x;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	617b      	str	r3, [r7, #20]
    r = (r < min) ? min : r;
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	4293      	cmp	r3, r2
 800189a:	bfb8      	it	lt
 800189c:	4613      	movlt	r3, r2
 800189e:	617b      	str	r3, [r7, #20]
    r = (r > max) ? max : r;
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4293      	cmp	r3, r2
 80018a6:	bfa8      	it	ge
 80018a8:	4613      	movge	r3, r2
 80018aa:	617b      	str	r3, [r7, #20]
    return r;
 80018ac:	697b      	ldr	r3, [r7, #20]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	371c      	adds	r7, #28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <View_Init>:
#define LCD_DC_0    HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin, GPIO_PIN_SET)
#define LCD_DC_1    HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin, GPIO_PIN_RESET)

/** PUBLIC METHODS **/

void View_Init(View *this, Controller *controller, Model *model) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]

    // Use 24 as the initial frame rate
    this->controller = controller;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	601a      	str	r2, [r3, #0]
    this->page = &Page_MainMenu;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <View_Init+0x40>)
 80018ce:	605a      	str	r2, [r3, #4]

    // Setup the screen
    ST7735_Init();
 80018d0:	f000 f938 	bl	8001b44 <ST7735_Init>
    Display_Clear();
 80018d4:	f7ff ff98 	bl	8001808 <Display_Clear>
    Display_DrawFrame();
 80018d8:	f7ff ff6e 	bl	80017b8 <Display_DrawFrame>
    LCD_BL_0; // Turn backlight on
 80018dc:	2201      	movs	r2, #1
 80018de:	2108      	movs	r1, #8
 80018e0:	4806      	ldr	r0, [pc, #24]	; (80018fc <View_Init+0x44>)
 80018e2:	f000 fec6 	bl	8002672 <HAL_GPIO_WritePin>

    // Show the current page
    this->page->onShow(this);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	4798      	blx	r3
}
 80018f0:	bf00      	nop
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000098 	.word	0x20000098
 80018fc:	40010800 	.word	0x40010800

08001900 <View_ShowPage>:

void View_ShowPage(View *this, PageDelegate *page) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
    this->page = page;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	605a      	str	r2, [r3, #4]
    this->page->onShow(this);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	4798      	blx	r3
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <View_Update>:

void View_Update(View *this, Model *model) {
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	6039      	str	r1, [r7, #0]
    this->page->onUpdate(this);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	4798      	blx	r3
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <View_onClick>:

void View_onClick(View *this) {
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
    this->page->onClick(this);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	4798      	blx	r3
}
 8001950:	bf00      	nop
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <View_onScroll>:

void View_onScroll(View *this, int increment) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
    this->page->onScroll(this, increment);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	6839      	ldr	r1, [r7, #0]
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	4798      	blx	r3
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 800197c:	2200      	movs	r2, #0
 800197e:	2102      	movs	r1, #2
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <ST7735_Select+0x14>)
 8001982:	f000 fe76 	bl	8002672 <HAL_GPIO_WritePin>
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40010c00 	.word	0x40010c00

08001990 <ST7735_Unselect>:

void ST7735_Unselect() {
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8001994:	2201      	movs	r2, #1
 8001996:	2102      	movs	r1, #2
 8001998:	4802      	ldr	r0, [pc, #8]	; (80019a4 <ST7735_Unselect+0x14>)
 800199a:	f000 fe6a 	bl	8002672 <HAL_GPIO_WritePin>
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40010c00 	.word	0x40010c00

080019a8 <ST7735_Reset>:

static void ST7735_Reset() {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2110      	movs	r1, #16
 80019b0:	4806      	ldr	r0, [pc, #24]	; (80019cc <ST7735_Reset+0x24>)
 80019b2:	f000 fe5e 	bl	8002672 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80019b6:	2005      	movs	r0, #5
 80019b8:	f000 fb8e 	bl	80020d8 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80019bc:	2201      	movs	r2, #1
 80019be:	2110      	movs	r1, #16
 80019c0:	4802      	ldr	r0, [pc, #8]	; (80019cc <ST7735_Reset+0x24>)
 80019c2:	f000 fe56 	bl	8002672 <HAL_GPIO_WritePin>
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40010800 	.word	0x40010800

080019d0 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80019da:	2200      	movs	r2, #0
 80019dc:	2101      	movs	r1, #1
 80019de:	4807      	ldr	r0, [pc, #28]	; (80019fc <ST7735_WriteCommand+0x2c>)
 80019e0:	f000 fe47 	bl	8002672 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80019e4:	1df9      	adds	r1, r7, #7
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ea:	2201      	movs	r2, #1
 80019ec:	4804      	ldr	r0, [pc, #16]	; (8001a00 <ST7735_WriteCommand+0x30>)
 80019ee:	f003 f8f9 	bl	8004be4 <HAL_SPI_Transmit>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40010c00 	.word	0x40010c00
 8001a00:	200004b4 	.word	0x200004b4

08001a04 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001a0e:	2201      	movs	r2, #1
 8001a10:	2101      	movs	r1, #1
 8001a12:	4807      	ldr	r0, [pc, #28]	; (8001a30 <ST7735_WriteData+0x2c>)
 8001a14:	f000 fe2d 	bl	8002672 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	4804      	ldr	r0, [pc, #16]	; (8001a34 <ST7735_WriteData+0x30>)
 8001a24:	f003 f8de 	bl	8004be4 <HAL_SPI_Transmit>
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40010c00 	.word	0x40010c00
 8001a34:	200004b4 	.word	0x200004b4

08001a38 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	607a      	str	r2, [r7, #4]
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8001a4a:	e034      	b.n	8001ab6 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001a56:	7afb      	ldrb	r3, [r7, #11]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ffb9 	bl	80019d0 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	1c5a      	adds	r2, r3, #1
 8001a62:	607a      	str	r2, [r7, #4]
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001a68:	7abb      	ldrb	r3, [r7, #10]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a70:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001a72:	7abb      	ldrb	r3, [r7, #10]
 8001a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a78:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8001a7a:	7abb      	ldrb	r3, [r7, #10]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d008      	beq.n	8001a92 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001a80:	7abb      	ldrb	r3, [r7, #10]
 8001a82:	4619      	mov	r1, r3
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ffbd 	bl	8001a04 <ST7735_WriteData>
            addr += numArgs;
 8001a8a:	7abb      	ldrb	r3, [r7, #10]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	4413      	add	r3, r2
 8001a90:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001a92:	89bb      	ldrh	r3, [r7, #12]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00e      	beq.n	8001ab6 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001aa2:	89bb      	ldrh	r3, [r7, #12]
 8001aa4:	2bff      	cmp	r3, #255	; 0xff
 8001aa6:	d102      	bne.n	8001aae <ST7735_ExecuteCommandList+0x76>
 8001aa8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001aac:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001aae:	89bb      	ldrh	r3, [r7, #12]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 fb11 	bl	80020d8 <HAL_Delay>
    while(numCommands--) {
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	1e5a      	subs	r2, r3, #1
 8001aba:	73fa      	strb	r2, [r7, #15]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1c5      	bne.n	8001a4c <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8001ac0:	bf00      	nop
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8001aca:	b590      	push	{r4, r7, lr}
 8001acc:	b085      	sub	sp, #20
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	4604      	mov	r4, r0
 8001ad2:	4608      	mov	r0, r1
 8001ad4:	4611      	mov	r1, r2
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4623      	mov	r3, r4
 8001ada:	71fb      	strb	r3, [r7, #7]
 8001adc:	4603      	mov	r3, r0
 8001ade:	71bb      	strb	r3, [r7, #6]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	717b      	strb	r3, [r7, #5]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001ae8:	202a      	movs	r0, #42	; 0x2a
 8001aea:	f7ff ff71 	bl	80019d0 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8001aee:	2300      	movs	r3, #0
 8001af0:	733b      	strb	r3, [r7, #12]
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	3301      	adds	r3, #1
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	737b      	strb	r3, [r7, #13]
 8001afa:	2300      	movs	r3, #0
 8001afc:	73bb      	strb	r3, [r7, #14]
 8001afe:	797b      	ldrb	r3, [r7, #5]
 8001b00:	3301      	adds	r3, #1
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001b06:	f107 030c 	add.w	r3, r7, #12
 8001b0a:	2104      	movs	r1, #4
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff79 	bl	8001a04 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001b12:	202b      	movs	r0, #43	; 0x2b
 8001b14:	f7ff ff5c 	bl	80019d0 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8001b18:	79bb      	ldrb	r3, [r7, #6]
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8001b20:	793b      	ldrb	r3, [r7, #4]
 8001b22:	3302      	adds	r3, #2
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001b28:	f107 030c 	add.w	r3, r7, #12
 8001b2c:	2104      	movs	r1, #4
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ff68 	bl	8001a04 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001b34:	202c      	movs	r0, #44	; 0x2c
 8001b36:	f7ff ff4b 	bl	80019d0 <ST7735_WriteCommand>
}
 8001b3a:	bf00      	nop
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd90      	pop	{r4, r7, pc}
	...

08001b44 <ST7735_Init>:

void ST7735_Init() {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
    ST7735_Select();
 8001b48:	f7ff ff16 	bl	8001978 <ST7735_Select>
    ST7735_Reset();
 8001b4c:	f7ff ff2c 	bl	80019a8 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001b50:	4806      	ldr	r0, [pc, #24]	; (8001b6c <ST7735_Init+0x28>)
 8001b52:	f7ff ff71 	bl	8001a38 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8001b56:	4806      	ldr	r0, [pc, #24]	; (8001b70 <ST7735_Init+0x2c>)
 8001b58:	f7ff ff6e 	bl	8001a38 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001b5c:	4805      	ldr	r0, [pc, #20]	; (8001b74 <ST7735_Init+0x30>)
 8001b5e:	f7ff ff6b 	bl	8001a38 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8001b62:	f7ff ff15 	bl	8001990 <ST7735_Unselect>
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	0800cb44 	.word	0x0800cb44
 8001b70:	0800cb80 	.word	0x0800cb80
 8001b74:	0800cb90 	.word	0x0800cb90

08001b78 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001b78:	b082      	sub	sp, #8
 8001b7a:	b590      	push	{r4, r7, lr}
 8001b7c:	b089      	sub	sp, #36	; 0x24
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	637b      	str	r3, [r7, #52]	; 0x34
 8001b82:	4603      	mov	r3, r0
 8001b84:	80fb      	strh	r3, [r7, #6]
 8001b86:	460b      	mov	r3, r1
 8001b88:	80bb      	strh	r3, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001b8e:	88fb      	ldrh	r3, [r7, #6]
 8001b90:	b2d8      	uxtb	r0, r3
 8001b92:	88bb      	ldrh	r3, [r7, #4]
 8001b94:	b2d9      	uxtb	r1, r3
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001b9e:	4413      	add	r3, r2
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	b2dc      	uxtb	r4, r3
 8001ba6:	88bb      	ldrh	r3, [r7, #4]
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001bae:	4413      	add	r3, r2
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	4622      	mov	r2, r4
 8001bb8:	f7ff ff87 	bl	8001aca <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
 8001bc0:	e043      	b.n	8001c4a <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8001bc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bc4:	78fb      	ldrb	r3, [r7, #3]
 8001bc6:	3b20      	subs	r3, #32
 8001bc8:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001bcc:	fb01 f303 	mul.w	r3, r1, r3
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	440b      	add	r3, r1
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
 8001be2:	e029      	b.n	8001c38 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00e      	beq.n	8001c12 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001bf4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001bf6:	0a1b      	lsrs	r3, r3, #8
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	743b      	strb	r3, [r7, #16]
 8001bfe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001c04:	f107 0310 	add.w	r3, r7, #16
 8001c08:	2102      	movs	r1, #2
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fefa 	bl	8001a04 <ST7735_WriteData>
 8001c10:	e00f      	b.n	8001c32 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001c12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001c16:	0a1b      	lsrs	r3, r3, #8
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	733b      	strb	r3, [r7, #12]
 8001c1e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001c26:	f107 030c 	add.w	r3, r7, #12
 8001c2a:	2102      	movs	r1, #2
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fee9 	bl	8001a04 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	3301      	adds	r3, #1
 8001c36:	61bb      	str	r3, [r7, #24]
 8001c38:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d3cf      	bcc.n	8001be4 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	3301      	adds	r3, #1
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001c4e:	461a      	mov	r2, r3
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d3b5      	bcc.n	8001bc2 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8001c56:	bf00      	nop
 8001c58:	bf00      	nop
 8001c5a:	3724      	adds	r7, #36	; 0x24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001c62:	b002      	add	sp, #8
 8001c64:	4770      	bx	lr

08001c66 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001c66:	b082      	sub	sp, #8
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af04      	add	r7, sp, #16
 8001c6e:	603a      	str	r2, [r7, #0]
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	4603      	mov	r3, r0
 8001c74:	80fb      	strh	r3, [r7, #6]
 8001c76:	460b      	mov	r3, r1
 8001c78:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8001c7a:	f7ff fe7d 	bl	8001978 <ST7735_Select>

    while(*str) {
 8001c7e:	e02d      	b.n	8001cdc <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	7d3a      	ldrb	r2, [r7, #20]
 8001c84:	4413      	add	r3, r2
 8001c86:	2b9f      	cmp	r3, #159	; 0x9f
 8001c88:	dd13      	ble.n	8001cb2 <ST7735_WriteString+0x4c>
            x = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001c8e:	7d7b      	ldrb	r3, [r7, #21]
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	88bb      	ldrh	r3, [r7, #4]
 8001c94:	4413      	add	r3, r2
 8001c96:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8001c98:	88bb      	ldrh	r3, [r7, #4]
 8001c9a:	7d7a      	ldrb	r2, [r7, #21]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	2b7f      	cmp	r3, #127	; 0x7f
 8001ca0:	dc21      	bgt.n	8001ce6 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b20      	cmp	r3, #32
 8001ca8:	d103      	bne.n	8001cb2 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	3301      	adds	r3, #1
 8001cae:	603b      	str	r3, [r7, #0]
                continue;
 8001cb0:	e014      	b.n	8001cdc <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	781a      	ldrb	r2, [r3, #0]
 8001cb6:	88b9      	ldrh	r1, [r7, #4]
 8001cb8:	88f8      	ldrh	r0, [r7, #6]
 8001cba:	8c3b      	ldrh	r3, [r7, #32]
 8001cbc:	9302      	str	r3, [sp, #8]
 8001cbe:	8bbb      	ldrh	r3, [r7, #28]
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f7ff ff56 	bl	8001b78 <ST7735_WriteChar>
        x += font.width;
 8001ccc:	7d3b      	ldrb	r3, [r7, #20]
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	80fb      	strh	r3, [r7, #6]
        str++;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1cd      	bne.n	8001c80 <ST7735_WriteString+0x1a>
 8001ce4:	e000      	b.n	8001ce8 <ST7735_WriteString+0x82>
                break;
 8001ce6:	bf00      	nop
    }

    ST7735_Unselect();
 8001ce8:	f7ff fe52 	bl	8001990 <ST7735_Unselect>
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cf6:	b002      	add	sp, #8
 8001cf8:	4770      	bx	lr
	...

08001cfc <ST7735_FillRectangleFast>:
    }

    ST7735_Unselect();
}

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001cfc:	b590      	push	{r4, r7, lr}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4604      	mov	r4, r0
 8001d04:	4608      	mov	r0, r1
 8001d06:	4611      	mov	r1, r2
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4623      	mov	r3, r4
 8001d0c:	80fb      	strh	r3, [r7, #6]
 8001d0e:	4603      	mov	r3, r0
 8001d10:	80bb      	strh	r3, [r7, #4]
 8001d12:	460b      	mov	r3, r1
 8001d14:	807b      	strh	r3, [r7, #2]
 8001d16:	4613      	mov	r3, r2
 8001d18:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	2b9f      	cmp	r3, #159	; 0x9f
 8001d1e:	d869      	bhi.n	8001df4 <ST7735_FillRectangleFast+0xf8>
 8001d20:	88bb      	ldrh	r3, [r7, #4]
 8001d22:	2b7f      	cmp	r3, #127	; 0x7f
 8001d24:	d866      	bhi.n	8001df4 <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001d26:	88fa      	ldrh	r2, [r7, #6]
 8001d28:	887b      	ldrh	r3, [r7, #2]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	2ba0      	cmp	r3, #160	; 0xa0
 8001d2e:	dd03      	ble.n	8001d38 <ST7735_FillRectangleFast+0x3c>
 8001d30:	88fb      	ldrh	r3, [r7, #6]
 8001d32:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8001d36:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001d38:	88ba      	ldrh	r2, [r7, #4]
 8001d3a:	883b      	ldrh	r3, [r7, #0]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	2b80      	cmp	r3, #128	; 0x80
 8001d40:	dd03      	ble.n	8001d4a <ST7735_FillRectangleFast+0x4e>
 8001d42:	88bb      	ldrh	r3, [r7, #4]
 8001d44:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001d48:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001d4a:	f7ff fe15 	bl	8001978 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001d4e:	88fb      	ldrh	r3, [r7, #6]
 8001d50:	b2d8      	uxtb	r0, r3
 8001d52:	88bb      	ldrh	r3, [r7, #4]
 8001d54:	b2d9      	uxtb	r1, r3
 8001d56:	88fb      	ldrh	r3, [r7, #6]
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	887b      	ldrh	r3, [r7, #2]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	4413      	add	r3, r2
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	3b01      	subs	r3, #1
 8001d64:	b2dc      	uxtb	r4, r3
 8001d66:	88bb      	ldrh	r3, [r7, #4]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	883b      	ldrh	r3, [r7, #0]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	4413      	add	r3, r2
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	3b01      	subs	r3, #1
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	4622      	mov	r2, r4
 8001d78:	f7ff fea7 	bl	8001aca <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 8001d7c:	8c3b      	ldrh	r3, [r7, #32]
 8001d7e:	0a1b      	lsrs	r3, r3, #8
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	723b      	strb	r3, [r7, #8]
 8001d86:	8c3b      	ldrh	r3, [r7, #32]
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 8001d8c:	887b      	ldrh	r3, [r7, #2]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4618      	mov	r0, r3
 8001d92:	f007 fc63 	bl	800965c <malloc>
 8001d96:	4603      	mov	r3, r0
 8001d98:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	80fb      	strh	r3, [r7, #6]
 8001d9e:	e008      	b.n	8001db2 <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8001da0:	88fb      	ldrh	r3, [r7, #6]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	4413      	add	r3, r2
 8001da8:	893a      	ldrh	r2, [r7, #8]
 8001daa:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 8001dac:	88fb      	ldrh	r3, [r7, #6]
 8001dae:	3301      	adds	r3, #1
 8001db0:	80fb      	strh	r3, [r7, #6]
 8001db2:	88fa      	ldrh	r2, [r7, #6]
 8001db4:	887b      	ldrh	r3, [r7, #2]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d3f2      	bcc.n	8001da0 <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001dba:	2201      	movs	r2, #1
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	480f      	ldr	r0, [pc, #60]	; (8001dfc <ST7735_FillRectangleFast+0x100>)
 8001dc0:	f000 fc57 	bl	8002672 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8001dc4:	883b      	ldrh	r3, [r7, #0]
 8001dc6:	80bb      	strh	r3, [r7, #4]
 8001dc8:	e00b      	b.n	8001de2 <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 8001dca:	887b      	ldrh	r3, [r7, #2]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd4:	68f9      	ldr	r1, [r7, #12]
 8001dd6:	480a      	ldr	r0, [pc, #40]	; (8001e00 <ST7735_FillRectangleFast+0x104>)
 8001dd8:	f002 ff04 	bl	8004be4 <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 8001ddc:	88bb      	ldrh	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	80bb      	strh	r3, [r7, #4]
 8001de2:	88bb      	ldrh	r3, [r7, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1f0      	bne.n	8001dca <ST7735_FillRectangleFast+0xce>

    free(line);
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f007 fc3f 	bl	800966c <free>
    ST7735_Unselect();
 8001dee:	f7ff fdcf 	bl	8001990 <ST7735_Unselect>
 8001df2:	e000      	b.n	8001df6 <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001df4:	bf00      	nop
}
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd90      	pop	{r4, r7, pc}
 8001dfc:	40010c00 	.word	0x40010c00
 8001e00:	200004b4 	.word	0x200004b4

08001e04 <ST7735_HLine>:

void ST7735_HLine(uint16_t x1, uint16_t x2, uint16_t y, uint16_t color) {
 8001e04:	b590      	push	{r4, r7, lr}
 8001e06:	b087      	sub	sp, #28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4604      	mov	r4, r0
 8001e0c:	4608      	mov	r0, r1
 8001e0e:	4611      	mov	r1, r2
 8001e10:	461a      	mov	r2, r3
 8001e12:	4623      	mov	r3, r4
 8001e14:	80fb      	strh	r3, [r7, #6]
 8001e16:	4603      	mov	r3, r0
 8001e18:	80bb      	strh	r3, [r7, #4]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	807b      	strh	r3, [r7, #2]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	803b      	strh	r3, [r7, #0]
    if ((x1 > x2) || (x2 > ST7735_WIDTH) || (y > ST7735_HEIGHT)) return;
 8001e22:	88fa      	ldrh	r2, [r7, #6]
 8001e24:	88bb      	ldrh	r3, [r7, #4]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d849      	bhi.n	8001ebe <ST7735_HLine+0xba>
 8001e2a:	88bb      	ldrh	r3, [r7, #4]
 8001e2c:	2ba0      	cmp	r3, #160	; 0xa0
 8001e2e:	d846      	bhi.n	8001ebe <ST7735_HLine+0xba>
 8001e30:	887b      	ldrh	r3, [r7, #2]
 8001e32:	2b80      	cmp	r3, #128	; 0x80
 8001e34:	d843      	bhi.n	8001ebe <ST7735_HLine+0xba>
    int w = x2 - x1;
 8001e36:	88ba      	ldrh	r2, [r7, #4]
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	613b      	str	r3, [r7, #16]
    
    ST7735_Select();
 8001e3e:	f7ff fd9b 	bl	8001978 <ST7735_Select>
    ST7735_SetAddressWindow(x1, y, x2, y);
 8001e42:	88fb      	ldrh	r3, [r7, #6]
 8001e44:	b2d8      	uxtb	r0, r3
 8001e46:	887b      	ldrh	r3, [r7, #2]
 8001e48:	b2d9      	uxtb	r1, r3
 8001e4a:	88bb      	ldrh	r3, [r7, #4]
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	887b      	ldrh	r3, [r7, #2]
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	f7ff fe3a 	bl	8001aca <ST7735_SetAddressWindow>

    uint8_t pixel[] = { color >> 8, color & 0xFF };
 8001e56:	883b      	ldrh	r3, [r7, #0]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	723b      	strb	r3, [r7, #8]
 8001e60:	883b      	ldrh	r3, [r7, #0]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f007 fbf6 	bl	800965c <malloc>
 8001e70:	4603      	mov	r3, r0
 8001e72:	60fb      	str	r3, [r7, #12]
    
    for (int x = 0; x < w; ++x) {
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	e008      	b.n	8001e8c <ST7735_HLine+0x88>
      memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	4413      	add	r3, r2
 8001e82:	893a      	ldrh	r2, [r7, #8]
 8001e84:	801a      	strh	r2, [r3, #0]
    for (int x = 0; x < w; ++x) {
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	dbf2      	blt.n	8001e7a <ST7735_HLine+0x76>
    }

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001e94:	2201      	movs	r2, #1
 8001e96:	2101      	movs	r1, #1
 8001e98:	480b      	ldr	r0, [pc, #44]	; (8001ec8 <ST7735_HLine+0xc4>)
 8001e9a:	f000 fbea 	bl	8002672 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eaa:	68f9      	ldr	r1, [r7, #12]
 8001eac:	4807      	ldr	r0, [pc, #28]	; (8001ecc <ST7735_HLine+0xc8>)
 8001eae:	f002 fe99 	bl	8004be4 <HAL_SPI_Transmit>

    free(line);
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f007 fbda 	bl	800966c <free>
    ST7735_Unselect();
 8001eb8:	f7ff fd6a 	bl	8001990 <ST7735_Unselect>
 8001ebc:	e000      	b.n	8001ec0 <ST7735_HLine+0xbc>
    if ((x1 > x2) || (x2 > ST7735_WIDTH) || (y > ST7735_HEIGHT)) return;
 8001ebe:	bf00      	nop
}
 8001ec0:	371c      	adds	r7, #28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd90      	pop	{r4, r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40010c00 	.word	0x40010c00
 8001ecc:	200004b4 	.word	0x200004b4

08001ed0 <ST7735_VLine>:


void ST7735_VLine(uint16_t x, uint16_t y1, uint16_t y2, uint16_t color) {
 8001ed0:	b590      	push	{r4, r7, lr}
 8001ed2:	b087      	sub	sp, #28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4604      	mov	r4, r0
 8001ed8:	4608      	mov	r0, r1
 8001eda:	4611      	mov	r1, r2
 8001edc:	461a      	mov	r2, r3
 8001ede:	4623      	mov	r3, r4
 8001ee0:	80fb      	strh	r3, [r7, #6]
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	80bb      	strh	r3, [r7, #4]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	807b      	strh	r3, [r7, #2]
 8001eea:	4613      	mov	r3, r2
 8001eec:	803b      	strh	r3, [r7, #0]
    if ((y1 > y2) || (y2 > ST7735_HEIGHT) || (x > ST7735_WIDTH)) return;
 8001eee:	88ba      	ldrh	r2, [r7, #4]
 8001ef0:	887b      	ldrh	r3, [r7, #2]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d849      	bhi.n	8001f8a <ST7735_VLine+0xba>
 8001ef6:	887b      	ldrh	r3, [r7, #2]
 8001ef8:	2b80      	cmp	r3, #128	; 0x80
 8001efa:	d846      	bhi.n	8001f8a <ST7735_VLine+0xba>
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	2ba0      	cmp	r3, #160	; 0xa0
 8001f00:	d843      	bhi.n	8001f8a <ST7735_VLine+0xba>
    int h = y2 - y1;
 8001f02:	887a      	ldrh	r2, [r7, #2]
 8001f04:	88bb      	ldrh	r3, [r7, #4]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	613b      	str	r3, [r7, #16]
    
    ST7735_Select();
 8001f0a:	f7ff fd35 	bl	8001978 <ST7735_Select>
    ST7735_SetAddressWindow(x, y1, x, y2);
 8001f0e:	88fb      	ldrh	r3, [r7, #6]
 8001f10:	b2d8      	uxtb	r0, r3
 8001f12:	88bb      	ldrh	r3, [r7, #4]
 8001f14:	b2d9      	uxtb	r1, r3
 8001f16:	88fb      	ldrh	r3, [r7, #6]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	887b      	ldrh	r3, [r7, #2]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	f7ff fdd4 	bl	8001aca <ST7735_SetAddressWindow>

    uint8_t pixel[] = { color >> 8, color & 0xFF };
 8001f22:	883b      	ldrh	r3, [r7, #0]
 8001f24:	0a1b      	lsrs	r3, r3, #8
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	723b      	strb	r3, [r7, #8]
 8001f2c:	883b      	ldrh	r3, [r7, #0]
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(h * sizeof(pixel));
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4618      	mov	r0, r3
 8001f38:	f007 fb90 	bl	800965c <malloc>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	60fb      	str	r3, [r7, #12]
    
    for (int y = 0; y < h; ++y) {
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	e008      	b.n	8001f58 <ST7735_VLine+0x88>
      memcpy(line + y * sizeof(pixel), pixel, sizeof(pixel));
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	893a      	ldrh	r2, [r7, #8]
 8001f50:	801a      	strh	r2, [r3, #0]
    for (int y = 0; y < h; ++y) {
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	3301      	adds	r3, #1
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	dbf2      	blt.n	8001f46 <ST7735_VLine+0x76>
    }

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001f60:	2201      	movs	r2, #1
 8001f62:	2101      	movs	r1, #1
 8001f64:	480b      	ldr	r0, [pc, #44]	; (8001f94 <ST7735_VLine+0xc4>)
 8001f66:	f000 fb84 	bl	8002672 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, line, h * sizeof(pixel), HAL_MAX_DELAY);
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295
 8001f76:	68f9      	ldr	r1, [r7, #12]
 8001f78:	4807      	ldr	r0, [pc, #28]	; (8001f98 <ST7735_VLine+0xc8>)
 8001f7a:	f002 fe33 	bl	8004be4 <HAL_SPI_Transmit>

    free(line);
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f007 fb74 	bl	800966c <free>
    ST7735_Unselect();
 8001f84:	f7ff fd04 	bl	8001990 <ST7735_Unselect>
 8001f88:	e000      	b.n	8001f8c <ST7735_VLine+0xbc>
    if ((y1 > y2) || (y2 > ST7735_HEIGHT) || (x > ST7735_WIDTH)) return;
 8001f8a:	bf00      	nop
}
 8001f8c:	371c      	adds	r7, #28
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd90      	pop	{r4, r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40010c00 	.word	0x40010c00
 8001f98:	200004b4 	.word	0x200004b4

08001f9c <ST7735_LineRect>:
//     for (int i = x1; i < x2; i++) {

//     }
// }

void ST7735_LineRect(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color) {
 8001f9c:	b590      	push	{r4, r7, lr}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4604      	mov	r4, r0
 8001fa4:	4608      	mov	r0, r1
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4623      	mov	r3, r4
 8001fac:	80fb      	strh	r3, [r7, #6]
 8001fae:	4603      	mov	r3, r0
 8001fb0:	80bb      	strh	r3, [r7, #4]
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	807b      	strh	r3, [r7, #2]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	803b      	strh	r3, [r7, #0]
    // Not fast :(
    ST7735_HLine(x1, x2, y1, color);
 8001fba:	8b3b      	ldrh	r3, [r7, #24]
 8001fbc:	88ba      	ldrh	r2, [r7, #4]
 8001fbe:	8879      	ldrh	r1, [r7, #2]
 8001fc0:	88f8      	ldrh	r0, [r7, #6]
 8001fc2:	f7ff ff1f 	bl	8001e04 <ST7735_HLine>
    ST7735_HLine(x1, x2, y2, color);
 8001fc6:	8b3b      	ldrh	r3, [r7, #24]
 8001fc8:	883a      	ldrh	r2, [r7, #0]
 8001fca:	8879      	ldrh	r1, [r7, #2]
 8001fcc:	88f8      	ldrh	r0, [r7, #6]
 8001fce:	f7ff ff19 	bl	8001e04 <ST7735_HLine>
    ST7735_VLine(x1, y1, y2, color);
 8001fd2:	8b3b      	ldrh	r3, [r7, #24]
 8001fd4:	883a      	ldrh	r2, [r7, #0]
 8001fd6:	88b9      	ldrh	r1, [r7, #4]
 8001fd8:	88f8      	ldrh	r0, [r7, #6]
 8001fda:	f7ff ff79 	bl	8001ed0 <ST7735_VLine>
    ST7735_VLine(x2, y1, y2, color);
 8001fde:	8b3b      	ldrh	r3, [r7, #24]
 8001fe0:	883a      	ldrh	r2, [r7, #0]
 8001fe2:	88b9      	ldrh	r1, [r7, #4]
 8001fe4:	8878      	ldrh	r0, [r7, #2]
 8001fe6:	f7ff ff73 	bl	8001ed0 <ST7735_VLine>
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd90      	pop	{r4, r7, pc}

08001ff2 <ST7735_FillScreenFast>:

void ST7735_FillScreen(uint16_t color) {
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
}

void ST7735_FillScreenFast(uint16_t color) {
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b084      	sub	sp, #16
 8001ff6:	af02      	add	r7, sp, #8
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001ffc:	88fb      	ldrh	r3, [r7, #6]
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	2380      	movs	r3, #128	; 0x80
 8002002:	22a0      	movs	r2, #160	; 0xa0
 8002004:	2100      	movs	r1, #0
 8002006:	2000      	movs	r0, #0
 8002008:	f7ff fe78 	bl	8001cfc <ST7735_FillRectangleFast>
}
 800200c:	bf00      	nop
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <HAL_Init+0x28>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a07      	ldr	r2, [pc, #28]	; (800203c <HAL_Init+0x28>)
 800201e:	f043 0310 	orr.w	r3, r3, #16
 8002022:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002024:	2003      	movs	r0, #3
 8002026:	f000 f947 	bl	80022b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800202a:	200f      	movs	r0, #15
 800202c:	f000 f808 	bl	8002040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002030:	f7fe fef8 	bl	8000e24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40022000 	.word	0x40022000

08002040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_InitTick+0x54>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_InitTick+0x58>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	4619      	mov	r1, r3
 8002052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002056:	fbb3 f3f1 	udiv	r3, r3, r1
 800205a:	fbb2 f3f3 	udiv	r3, r2, r3
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f95f 	bl	8002322 <HAL_SYSTICK_Config>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e00e      	b.n	800208c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b0f      	cmp	r3, #15
 8002072:	d80a      	bhi.n	800208a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002074:	2200      	movs	r2, #0
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	f04f 30ff 	mov.w	r0, #4294967295
 800207c:	f000 f927 	bl	80022ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002080:	4a06      	ldr	r2, [pc, #24]	; (800209c <HAL_InitTick+0x5c>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	e000      	b.n	800208c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000000 	.word	0x20000000
 8002098:	20000110 	.word	0x20000110
 800209c:	2000010c 	.word	0x2000010c

080020a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <HAL_IncTick+0x1c>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <HAL_IncTick+0x20>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4413      	add	r3, r2
 80020b0:	4a03      	ldr	r2, [pc, #12]	; (80020c0 <HAL_IncTick+0x20>)
 80020b2:	6013      	str	r3, [r2, #0]
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr
 80020bc:	20000110 	.word	0x20000110
 80020c0:	20000510 	.word	0x20000510

080020c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return uwTick;
 80020c8:	4b02      	ldr	r3, [pc, #8]	; (80020d4 <HAL_GetTick+0x10>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	20000510 	.word	0x20000510

080020d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e0:	f7ff fff0 	bl	80020c4 <HAL_GetTick>
 80020e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f0:	d005      	beq.n	80020fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020f2:	4b0a      	ldr	r3, [pc, #40]	; (800211c <HAL_Delay+0x44>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4413      	add	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020fe:	bf00      	nop
 8002100:	f7ff ffe0 	bl	80020c4 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	429a      	cmp	r2, r3
 800210e:	d8f7      	bhi.n	8002100 <HAL_Delay+0x28>
  {
  }
}
 8002110:	bf00      	nop
 8002112:	bf00      	nop
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000110 	.word	0x20000110

08002120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <__NVIC_SetPriorityGrouping+0x44>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800213c:	4013      	ands	r3, r2
 800213e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002148:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800214c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002152:	4a04      	ldr	r2, [pc, #16]	; (8002164 <__NVIC_SetPriorityGrouping+0x44>)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	60d3      	str	r3, [r2, #12]
}
 8002158:	bf00      	nop
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	e000ed00 	.word	0xe000ed00

08002168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800216c:	4b04      	ldr	r3, [pc, #16]	; (8002180 <__NVIC_GetPriorityGrouping+0x18>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	0a1b      	lsrs	r3, r3, #8
 8002172:	f003 0307 	and.w	r3, r3, #7
}
 8002176:	4618      	mov	r0, r3
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	2b00      	cmp	r3, #0
 8002194:	db0b      	blt.n	80021ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	f003 021f 	and.w	r2, r3, #31
 800219c:	4906      	ldr	r1, [pc, #24]	; (80021b8 <__NVIC_EnableIRQ+0x34>)
 800219e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	2001      	movs	r0, #1
 80021a6:	fa00 f202 	lsl.w	r2, r0, r2
 80021aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	e000e100 	.word	0xe000e100

080021bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	6039      	str	r1, [r7, #0]
 80021c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	db0a      	blt.n	80021e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	490c      	ldr	r1, [pc, #48]	; (8002208 <__NVIC_SetPriority+0x4c>)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	0112      	lsls	r2, r2, #4
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	440b      	add	r3, r1
 80021e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e4:	e00a      	b.n	80021fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	4908      	ldr	r1, [pc, #32]	; (800220c <__NVIC_SetPriority+0x50>)
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	3b04      	subs	r3, #4
 80021f4:	0112      	lsls	r2, r2, #4
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	440b      	add	r3, r1
 80021fa:	761a      	strb	r2, [r3, #24]
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e000e100 	.word	0xe000e100
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002210:	b480      	push	{r7}
 8002212:	b089      	sub	sp, #36	; 0x24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f1c3 0307 	rsb	r3, r3, #7
 800222a:	2b04      	cmp	r3, #4
 800222c:	bf28      	it	cs
 800222e:	2304      	movcs	r3, #4
 8002230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3304      	adds	r3, #4
 8002236:	2b06      	cmp	r3, #6
 8002238:	d902      	bls.n	8002240 <NVIC_EncodePriority+0x30>
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3b03      	subs	r3, #3
 800223e:	e000      	b.n	8002242 <NVIC_EncodePriority+0x32>
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002244:	f04f 32ff 	mov.w	r2, #4294967295
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43da      	mvns	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	401a      	ands	r2, r3
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002258:	f04f 31ff 	mov.w	r1, #4294967295
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	fa01 f303 	lsl.w	r3, r1, r3
 8002262:	43d9      	mvns	r1, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002268:	4313      	orrs	r3, r2
         );
}
 800226a:	4618      	mov	r0, r3
 800226c:	3724      	adds	r7, #36	; 0x24
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002284:	d301      	bcc.n	800228a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002286:	2301      	movs	r3, #1
 8002288:	e00f      	b.n	80022aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800228a:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <SysTick_Config+0x40>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3b01      	subs	r3, #1
 8002290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002292:	210f      	movs	r1, #15
 8002294:	f04f 30ff 	mov.w	r0, #4294967295
 8002298:	f7ff ff90 	bl	80021bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <SysTick_Config+0x40>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a2:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <SysTick_Config+0x40>)
 80022a4:	2207      	movs	r2, #7
 80022a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	e000e010 	.word	0xe000e010

080022b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ff2d 	bl	8002120 <__NVIC_SetPriorityGrouping>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4603      	mov	r3, r0
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022e0:	f7ff ff42 	bl	8002168 <__NVIC_GetPriorityGrouping>
 80022e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	6978      	ldr	r0, [r7, #20]
 80022ec:	f7ff ff90 	bl	8002210 <NVIC_EncodePriority>
 80022f0:	4602      	mov	r2, r0
 80022f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff5f 	bl	80021bc <__NVIC_SetPriority>
}
 80022fe:	bf00      	nop
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ff35 	bl	8002184 <__NVIC_EnableIRQ>
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff ffa2 	bl	8002274 <SysTick_Config>
 8002330:	4603      	mov	r3, r0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800233c:	b480      	push	{r7}
 800233e:	b08b      	sub	sp, #44	; 0x2c
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800234a:	2300      	movs	r3, #0
 800234c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800234e:	e169      	b.n	8002624 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002350:	2201      	movs	r2, #1
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	429a      	cmp	r2, r3
 800236a:	f040 8158 	bne.w	800261e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	4a9a      	ldr	r2, [pc, #616]	; (80025dc <HAL_GPIO_Init+0x2a0>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d05e      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
 8002378:	4a98      	ldr	r2, [pc, #608]	; (80025dc <HAL_GPIO_Init+0x2a0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d875      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 800237e:	4a98      	ldr	r2, [pc, #608]	; (80025e0 <HAL_GPIO_Init+0x2a4>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d058      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
 8002384:	4a96      	ldr	r2, [pc, #600]	; (80025e0 <HAL_GPIO_Init+0x2a4>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d86f      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 800238a:	4a96      	ldr	r2, [pc, #600]	; (80025e4 <HAL_GPIO_Init+0x2a8>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d052      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
 8002390:	4a94      	ldr	r2, [pc, #592]	; (80025e4 <HAL_GPIO_Init+0x2a8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d869      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 8002396:	4a94      	ldr	r2, [pc, #592]	; (80025e8 <HAL_GPIO_Init+0x2ac>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d04c      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
 800239c:	4a92      	ldr	r2, [pc, #584]	; (80025e8 <HAL_GPIO_Init+0x2ac>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d863      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 80023a2:	4a92      	ldr	r2, [pc, #584]	; (80025ec <HAL_GPIO_Init+0x2b0>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d046      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
 80023a8:	4a90      	ldr	r2, [pc, #576]	; (80025ec <HAL_GPIO_Init+0x2b0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d85d      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 80023ae:	2b12      	cmp	r3, #18
 80023b0:	d82a      	bhi.n	8002408 <HAL_GPIO_Init+0xcc>
 80023b2:	2b12      	cmp	r3, #18
 80023b4:	d859      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 80023b6:	a201      	add	r2, pc, #4	; (adr r2, 80023bc <HAL_GPIO_Init+0x80>)
 80023b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023bc:	08002437 	.word	0x08002437
 80023c0:	08002411 	.word	0x08002411
 80023c4:	08002423 	.word	0x08002423
 80023c8:	08002465 	.word	0x08002465
 80023cc:	0800246b 	.word	0x0800246b
 80023d0:	0800246b 	.word	0x0800246b
 80023d4:	0800246b 	.word	0x0800246b
 80023d8:	0800246b 	.word	0x0800246b
 80023dc:	0800246b 	.word	0x0800246b
 80023e0:	0800246b 	.word	0x0800246b
 80023e4:	0800246b 	.word	0x0800246b
 80023e8:	0800246b 	.word	0x0800246b
 80023ec:	0800246b 	.word	0x0800246b
 80023f0:	0800246b 	.word	0x0800246b
 80023f4:	0800246b 	.word	0x0800246b
 80023f8:	0800246b 	.word	0x0800246b
 80023fc:	0800246b 	.word	0x0800246b
 8002400:	08002419 	.word	0x08002419
 8002404:	0800242d 	.word	0x0800242d
 8002408:	4a79      	ldr	r2, [pc, #484]	; (80025f0 <HAL_GPIO_Init+0x2b4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d013      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800240e:	e02c      	b.n	800246a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	623b      	str	r3, [r7, #32]
          break;
 8002416:	e029      	b.n	800246c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	3304      	adds	r3, #4
 800241e:	623b      	str	r3, [r7, #32]
          break;
 8002420:	e024      	b.n	800246c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	3308      	adds	r3, #8
 8002428:	623b      	str	r3, [r7, #32]
          break;
 800242a:	e01f      	b.n	800246c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	330c      	adds	r3, #12
 8002432:	623b      	str	r3, [r7, #32]
          break;
 8002434:	e01a      	b.n	800246c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d102      	bne.n	8002444 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800243e:	2304      	movs	r3, #4
 8002440:	623b      	str	r3, [r7, #32]
          break;
 8002442:	e013      	b.n	800246c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d105      	bne.n	8002458 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800244c:	2308      	movs	r3, #8
 800244e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	611a      	str	r2, [r3, #16]
          break;
 8002456:	e009      	b.n	800246c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002458:	2308      	movs	r3, #8
 800245a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	615a      	str	r2, [r3, #20]
          break;
 8002462:	e003      	b.n	800246c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002464:	2300      	movs	r3, #0
 8002466:	623b      	str	r3, [r7, #32]
          break;
 8002468:	e000      	b.n	800246c <HAL_GPIO_Init+0x130>
          break;
 800246a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	2bff      	cmp	r3, #255	; 0xff
 8002470:	d801      	bhi.n	8002476 <HAL_GPIO_Init+0x13a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	e001      	b.n	800247a <HAL_GPIO_Init+0x13e>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3304      	adds	r3, #4
 800247a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	2bff      	cmp	r3, #255	; 0xff
 8002480:	d802      	bhi.n	8002488 <HAL_GPIO_Init+0x14c>
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	e002      	b.n	800248e <HAL_GPIO_Init+0x152>
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	3b08      	subs	r3, #8
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	210f      	movs	r1, #15
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	fa01 f303 	lsl.w	r3, r1, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	401a      	ands	r2, r3
 80024a0:	6a39      	ldr	r1, [r7, #32]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	fa01 f303 	lsl.w	r3, r1, r3
 80024a8:	431a      	orrs	r2, r3
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 80b1 	beq.w	800261e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024bc:	4b4d      	ldr	r3, [pc, #308]	; (80025f4 <HAL_GPIO_Init+0x2b8>)
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	4a4c      	ldr	r2, [pc, #304]	; (80025f4 <HAL_GPIO_Init+0x2b8>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6193      	str	r3, [r2, #24]
 80024c8:	4b4a      	ldr	r3, [pc, #296]	; (80025f4 <HAL_GPIO_Init+0x2b8>)
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024d4:	4a48      	ldr	r2, [pc, #288]	; (80025f8 <HAL_GPIO_Init+0x2bc>)
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	089b      	lsrs	r3, r3, #2
 80024da:	3302      	adds	r3, #2
 80024dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	220f      	movs	r2, #15
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	4013      	ands	r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a40      	ldr	r2, [pc, #256]	; (80025fc <HAL_GPIO_Init+0x2c0>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d013      	beq.n	8002528 <HAL_GPIO_Init+0x1ec>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a3f      	ldr	r2, [pc, #252]	; (8002600 <HAL_GPIO_Init+0x2c4>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d00d      	beq.n	8002524 <HAL_GPIO_Init+0x1e8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a3e      	ldr	r2, [pc, #248]	; (8002604 <HAL_GPIO_Init+0x2c8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d007      	beq.n	8002520 <HAL_GPIO_Init+0x1e4>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a3d      	ldr	r2, [pc, #244]	; (8002608 <HAL_GPIO_Init+0x2cc>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d101      	bne.n	800251c <HAL_GPIO_Init+0x1e0>
 8002518:	2303      	movs	r3, #3
 800251a:	e006      	b.n	800252a <HAL_GPIO_Init+0x1ee>
 800251c:	2304      	movs	r3, #4
 800251e:	e004      	b.n	800252a <HAL_GPIO_Init+0x1ee>
 8002520:	2302      	movs	r3, #2
 8002522:	e002      	b.n	800252a <HAL_GPIO_Init+0x1ee>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <HAL_GPIO_Init+0x1ee>
 8002528:	2300      	movs	r3, #0
 800252a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252c:	f002 0203 	and.w	r2, r2, #3
 8002530:	0092      	lsls	r2, r2, #2
 8002532:	4093      	lsls	r3, r2
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800253a:	492f      	ldr	r1, [pc, #188]	; (80025f8 <HAL_GPIO_Init+0x2bc>)
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	089b      	lsrs	r3, r3, #2
 8002540:	3302      	adds	r3, #2
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d006      	beq.n	8002562 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002554:	4b2d      	ldr	r3, [pc, #180]	; (800260c <HAL_GPIO_Init+0x2d0>)
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	492c      	ldr	r1, [pc, #176]	; (800260c <HAL_GPIO_Init+0x2d0>)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	4313      	orrs	r3, r2
 800255e:	608b      	str	r3, [r1, #8]
 8002560:	e006      	b.n	8002570 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002562:	4b2a      	ldr	r3, [pc, #168]	; (800260c <HAL_GPIO_Init+0x2d0>)
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	43db      	mvns	r3, r3
 800256a:	4928      	ldr	r1, [pc, #160]	; (800260c <HAL_GPIO_Init+0x2d0>)
 800256c:	4013      	ands	r3, r2
 800256e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d006      	beq.n	800258a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800257c:	4b23      	ldr	r3, [pc, #140]	; (800260c <HAL_GPIO_Init+0x2d0>)
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	4922      	ldr	r1, [pc, #136]	; (800260c <HAL_GPIO_Init+0x2d0>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	60cb      	str	r3, [r1, #12]
 8002588:	e006      	b.n	8002598 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800258a:	4b20      	ldr	r3, [pc, #128]	; (800260c <HAL_GPIO_Init+0x2d0>)
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	43db      	mvns	r3, r3
 8002592:	491e      	ldr	r1, [pc, #120]	; (800260c <HAL_GPIO_Init+0x2d0>)
 8002594:	4013      	ands	r3, r2
 8002596:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d006      	beq.n	80025b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025a4:	4b19      	ldr	r3, [pc, #100]	; (800260c <HAL_GPIO_Init+0x2d0>)
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	4918      	ldr	r1, [pc, #96]	; (800260c <HAL_GPIO_Init+0x2d0>)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
 80025b0:	e006      	b.n	80025c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025b2:	4b16      	ldr	r3, [pc, #88]	; (800260c <HAL_GPIO_Init+0x2d0>)
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	4914      	ldr	r1, [pc, #80]	; (800260c <HAL_GPIO_Init+0x2d0>)
 80025bc:	4013      	ands	r3, r2
 80025be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d021      	beq.n	8002610 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025cc:	4b0f      	ldr	r3, [pc, #60]	; (800260c <HAL_GPIO_Init+0x2d0>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	490e      	ldr	r1, [pc, #56]	; (800260c <HAL_GPIO_Init+0x2d0>)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	600b      	str	r3, [r1, #0]
 80025d8:	e021      	b.n	800261e <HAL_GPIO_Init+0x2e2>
 80025da:	bf00      	nop
 80025dc:	10320000 	.word	0x10320000
 80025e0:	10310000 	.word	0x10310000
 80025e4:	10220000 	.word	0x10220000
 80025e8:	10210000 	.word	0x10210000
 80025ec:	10120000 	.word	0x10120000
 80025f0:	10110000 	.word	0x10110000
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40010000 	.word	0x40010000
 80025fc:	40010800 	.word	0x40010800
 8002600:	40010c00 	.word	0x40010c00
 8002604:	40011000 	.word	0x40011000
 8002608:	40011400 	.word	0x40011400
 800260c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_GPIO_Init+0x304>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	43db      	mvns	r3, r3
 8002618:	4909      	ldr	r1, [pc, #36]	; (8002640 <HAL_GPIO_Init+0x304>)
 800261a:	4013      	ands	r3, r2
 800261c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	3301      	adds	r3, #1
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	fa22 f303 	lsr.w	r3, r2, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	f47f ae8e 	bne.w	8002350 <HAL_GPIO_Init+0x14>
  }
}
 8002634:	bf00      	nop
 8002636:	bf00      	nop
 8002638:	372c      	adds	r7, #44	; 0x2c
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr
 8002640:	40010400 	.word	0x40010400

08002644 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	887b      	ldrh	r3, [r7, #2]
 8002656:	4013      	ands	r3, r2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800265c:	2301      	movs	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]
 8002660:	e001      	b.n	8002666 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002662:	2300      	movs	r3, #0
 8002664:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002666:	7bfb      	ldrb	r3, [r7, #15]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr

08002672 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	460b      	mov	r3, r1
 800267c:	807b      	strh	r3, [r7, #2]
 800267e:	4613      	mov	r3, r2
 8002680:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002682:	787b      	ldrb	r3, [r7, #1]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002688:	887a      	ldrh	r2, [r7, #2]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800268e:	e003      	b.n	8002698 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002690:	887b      	ldrh	r3, [r7, #2]
 8002692:	041a      	lsls	r2, r3, #16
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	611a      	str	r2, [r3, #16]
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr
	...

080026a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026ae:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	88fb      	ldrh	r3, [r7, #6]
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d006      	beq.n	80026c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026ba:	4a05      	ldr	r2, [pc, #20]	; (80026d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026c0:	88fb      	ldrh	r3, [r7, #6]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe fb18 	bl	8000cf8 <HAL_GPIO_EXTI_Callback>
  }
}
 80026c8:	bf00      	nop
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40010400 	.word	0x40010400

080026d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026d6:	b08b      	sub	sp, #44	; 0x2c
 80026d8:	af06      	add	r7, sp, #24
 80026da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e0f1      	b.n	80028ca <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f006 fd04 	bl	8009108 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2203      	movs	r2, #3
 8002704:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f002 fc79 	bl	8005004 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	603b      	str	r3, [r7, #0]
 8002718:	687e      	ldr	r6, [r7, #4]
 800271a:	466d      	mov	r5, sp
 800271c:	f106 0410 	add.w	r4, r6, #16
 8002720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002722:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002724:	6823      	ldr	r3, [r4, #0]
 8002726:	602b      	str	r3, [r5, #0]
 8002728:	1d33      	adds	r3, r6, #4
 800272a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800272c:	6838      	ldr	r0, [r7, #0]
 800272e:	f002 fc43 	bl	8004fb8 <USB_CoreInit>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0c2      	b.n	80028ca <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2100      	movs	r1, #0
 800274a:	4618      	mov	r0, r3
 800274c:	f002 fc74 	bl	8005038 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002750:	2300      	movs	r3, #0
 8002752:	73fb      	strb	r3, [r7, #15]
 8002754:	e040      	b.n	80027d8 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	440b      	add	r3, r1
 8002766:	3301      	adds	r3, #1
 8002768:	2201      	movs	r2, #1
 800276a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	440b      	add	r3, r1
 800277c:	7bfa      	ldrb	r2, [r7, #15]
 800277e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002780:	7bfb      	ldrb	r3, [r7, #15]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	440b      	add	r3, r1
 8002790:	3303      	adds	r3, #3
 8002792:	2200      	movs	r2, #0
 8002794:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002796:	7bfa      	ldrb	r2, [r7, #15]
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	440b      	add	r3, r1
 80027a4:	3338      	adds	r3, #56	; 0x38
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027aa:	7bfa      	ldrb	r2, [r7, #15]
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	440b      	add	r3, r1
 80027b8:	333c      	adds	r3, #60	; 0x3c
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027be:	7bfa      	ldrb	r2, [r7, #15]
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	440b      	add	r3, r1
 80027cc:	3340      	adds	r3, #64	; 0x40
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
 80027d4:	3301      	adds	r3, #1
 80027d6:	73fb      	strb	r3, [r7, #15]
 80027d8:	7bfa      	ldrb	r2, [r7, #15]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d3b9      	bcc.n	8002756 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e2:	2300      	movs	r3, #0
 80027e4:	73fb      	strb	r3, [r7, #15]
 80027e6:	e044      	b.n	8002872 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027e8:	7bfa      	ldrb	r2, [r7, #15]
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	440b      	add	r3, r1
 80027f6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80027fa:	2200      	movs	r2, #0
 80027fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027fe:	7bfa      	ldrb	r2, [r7, #15]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	440b      	add	r3, r1
 800280c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002810:	7bfa      	ldrb	r2, [r7, #15]
 8002812:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002814:	7bfa      	ldrb	r2, [r7, #15]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	440b      	add	r3, r1
 8002822:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800282a:	7bfa      	ldrb	r2, [r7, #15]
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	440b      	add	r3, r1
 8002838:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002840:	7bfa      	ldrb	r2, [r7, #15]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	440b      	add	r3, r1
 800284e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002856:	7bfa      	ldrb	r2, [r7, #15]
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	440b      	add	r3, r1
 8002864:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	3301      	adds	r3, #1
 8002870:	73fb      	strb	r3, [r7, #15]
 8002872:	7bfa      	ldrb	r2, [r7, #15]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	429a      	cmp	r2, r3
 800287a:	d3b5      	bcc.n	80027e8 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	603b      	str	r3, [r7, #0]
 8002882:	687e      	ldr	r6, [r7, #4]
 8002884:	466d      	mov	r5, sp
 8002886:	f106 0410 	add.w	r4, r6, #16
 800288a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800288c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800288e:	6823      	ldr	r3, [r4, #0]
 8002890:	602b      	str	r3, [r5, #0]
 8002892:	1d33      	adds	r3, r6, #4
 8002894:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002896:	6838      	ldr	r0, [r7, #0]
 8002898:	f002 fbda 	bl	8005050 <USB_DevInit>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2202      	movs	r2, #2
 80028a6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e00d      	b.n	80028ca <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f004 fe5b 	bl	800757e <USB_DevDisconnect>

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028d2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_PCD_Start+0x16>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e016      	b.n	8002916 <HAL_PCD_Start+0x44>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f002 fb6f 	bl	8004fd8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80028fa:	2101      	movs	r1, #1
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f006 fe76 	bl	80095ee <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f004 fe2f 	bl	800756a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b088      	sub	sp, #32
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f004 fe31 	bl	8007592 <USB_ReadInterrupts>
 8002930:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 fb1b 	bl	8002f78 <PCD_EP_ISR_Handler>

    return;
 8002942:	e119      	b.n	8002b78 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294a:	2b00      	cmp	r3, #0
 800294c:	d013      	beq.n	8002976 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002956:	b29a      	uxth	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002960:	b292      	uxth	r2, r2
 8002962:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f006 fc49 	bl	80091fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800296c:	2100      	movs	r1, #0
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f905 	bl	8002b7e <HAL_PCD_SetAddress>

    return;
 8002974:	e100      	b.n	8002b78 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00c      	beq.n	800299a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002988:	b29a      	uxth	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002992:	b292      	uxth	r2, r2
 8002994:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002998:	e0ee      	b.n	8002b78 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00c      	beq.n	80029be <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029b6:	b292      	uxth	r2, r2
 80029b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80029bc:	e0dc      	b.n	8002b78 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d027      	beq.n	8002a18 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0204 	bic.w	r2, r2, #4
 80029da:	b292      	uxth	r2, r2
 80029dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0208 	bic.w	r2, r2, #8
 80029f2:	b292      	uxth	r2, r2
 80029f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f006 fc39 	bl	8009270 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a10:	b292      	uxth	r2, r2
 8002a12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002a16:	e0af      	b.n	8002b78 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 8083 	beq.w	8002b2a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002a24:	2300      	movs	r3, #0
 8002a26:	77fb      	strb	r3, [r7, #31]
 8002a28:	e010      	b.n	8002a4c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	7ffb      	ldrb	r3, [r7, #31]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	441a      	add	r2, r3
 8002a36:	7ffb      	ldrb	r3, [r7, #31]
 8002a38:	8812      	ldrh	r2, [r2, #0]
 8002a3a:	b292      	uxth	r2, r2
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	3320      	adds	r3, #32
 8002a40:	443b      	add	r3, r7
 8002a42:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002a46:	7ffb      	ldrb	r3, [r7, #31]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	77fb      	strb	r3, [r7, #31]
 8002a4c:	7ffb      	ldrb	r3, [r7, #31]
 8002a4e:	2b07      	cmp	r3, #7
 8002a50:	d9eb      	bls.n	8002a2a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 0201 	orr.w	r2, r2, #1
 8002a64:	b292      	uxth	r2, r2
 8002a66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0201 	bic.w	r2, r2, #1
 8002a7c:	b292      	uxth	r2, r2
 8002a7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002a82:	bf00      	nop
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f6      	beq.n	8002a84 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aa8:	b292      	uxth	r2, r2
 8002aaa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002aae:	2300      	movs	r3, #0
 8002ab0:	77fb      	strb	r3, [r7, #31]
 8002ab2:	e00f      	b.n	8002ad4 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002ab4:	7ffb      	ldrb	r3, [r7, #31]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6812      	ldr	r2, [r2, #0]
 8002aba:	4611      	mov	r1, r2
 8002abc:	7ffa      	ldrb	r2, [r7, #31]
 8002abe:	0092      	lsls	r2, r2, #2
 8002ac0:	440a      	add	r2, r1
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	3320      	adds	r3, #32
 8002ac6:	443b      	add	r3, r7
 8002ac8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002acc:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002ace:	7ffb      	ldrb	r3, [r7, #31]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	77fb      	strb	r3, [r7, #31]
 8002ad4:	7ffb      	ldrb	r3, [r7, #31]
 8002ad6:	2b07      	cmp	r3, #7
 8002ad8:	d9ec      	bls.n	8002ab4 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f042 0208 	orr.w	r2, r2, #8
 8002aec:	b292      	uxth	r2, r2
 8002aee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b04:	b292      	uxth	r2, r2
 8002b06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f042 0204 	orr.w	r2, r2, #4
 8002b1c:	b292      	uxth	r2, r2
 8002b1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f006 fb8a 	bl	800923c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002b28:	e026      	b.n	8002b78 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00f      	beq.n	8002b54 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b46:	b292      	uxth	r2, r2
 8002b48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f006 fb48 	bl	80091e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002b52:	e011      	b.n	8002b78 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00c      	beq.n	8002b78 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b70:	b292      	uxth	r2, r2
 8002b72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002b76:	bf00      	nop
  }
}
 8002b78:	3720      	adds	r7, #32
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b082      	sub	sp, #8
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	460b      	mov	r3, r1
 8002b88:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_PCD_SetAddress+0x1a>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e013      	b.n	8002bc0 <HAL_PCD_SetAddress+0x42>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	78fa      	ldrb	r2, [r7, #3]
 8002ba4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	78fa      	ldrb	r2, [r7, #3]
 8002bae:	4611      	mov	r1, r2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f004 fcc7 	bl	8007544 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	4608      	mov	r0, r1
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	70fb      	strb	r3, [r7, #3]
 8002bda:	460b      	mov	r3, r1
 8002bdc:	803b      	strh	r3, [r7, #0]
 8002bde:	4613      	mov	r3, r2
 8002be0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002be6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	da0e      	bge.n	8002c0c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	4413      	add	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2201      	movs	r2, #1
 8002c08:	705a      	strb	r2, [r3, #1]
 8002c0a:	e00e      	b.n	8002c2a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	f003 0207 	and.w	r2, r3, #7
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	4413      	add	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c2a:	78fb      	ldrb	r3, [r7, #3]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c36:	883a      	ldrh	r2, [r7, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	78ba      	ldrb	r2, [r7, #2]
 8002c40:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c42:	78bb      	ldrb	r3, [r7, #2]
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d102      	bne.n	8002c4e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d101      	bne.n	8002c5c <HAL_PCD_EP_Open+0x94>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e00e      	b.n	8002c7a <HAL_PCD_EP_Open+0xb2>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68f9      	ldr	r1, [r7, #12]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f002 fa10 	bl	8005090 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002c78:	7afb      	ldrb	r3, [r7, #11]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	da0e      	bge.n	8002cb4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c96:	78fb      	ldrb	r3, [r7, #3]
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	1c5a      	adds	r2, r3, #1
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	4413      	add	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	705a      	strb	r2, [r3, #1]
 8002cb2:	e00e      	b.n	8002cd2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cb4:	78fb      	ldrb	r3, [r7, #3]
 8002cb6:	f003 0207 	and.w	r2, r3, #7
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	4413      	add	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cd2:	78fb      	ldrb	r3, [r7, #3]
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <HAL_PCD_EP_Close+0x6a>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e00e      	b.n	8002d0a <HAL_PCD_EP_Close+0x88>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68f9      	ldr	r1, [r7, #12]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f002 fd88 	bl	8005810 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b086      	sub	sp, #24
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	607a      	str	r2, [r7, #4]
 8002d1c:	603b      	str	r3, [r7, #0]
 8002d1e:	460b      	mov	r3, r1
 8002d20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d22:	7afb      	ldrb	r3, [r7, #11]
 8002d24:	f003 0207 	and.w	r2, r3, #7
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	4413      	add	r3, r2
 8002d38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d52:	7afb      	ldrb	r3, [r7, #11]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6979      	ldr	r1, [r7, #20]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f002 ff3f 	bl	8005be8 <USB_EPStartXfer>

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	f003 0207 	and.w	r2, r3, #7
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	440b      	add	r3, r1
 8002d92:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002d96:	681b      	ldr	r3, [r3, #0]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr

08002da2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b086      	sub	sp, #24
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	607a      	str	r2, [r7, #4]
 8002dac:	603b      	str	r3, [r7, #0]
 8002dae:	460b      	mov	r3, r1
 8002db0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002db2:	7afb      	ldrb	r3, [r7, #11]
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2200      	movs	r2, #0
 8002de6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	2201      	movs	r2, #1
 8002dec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dee:	7afb      	ldrb	r3, [r7, #11]
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6979      	ldr	r1, [r7, #20]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f002 fef1 	bl	8005be8 <USB_EPStartXfer>

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	f003 0207 	and.w	r2, r3, #7
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d901      	bls.n	8002e2e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e04c      	b.n	8002ec8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	da0e      	bge.n	8002e54 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e36:	78fb      	ldrb	r3, [r7, #3]
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	4613      	mov	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	4413      	add	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	705a      	strb	r2, [r3, #1]
 8002e52:	e00c      	b.n	8002e6e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e54:	78fa      	ldrb	r2, [r7, #3]
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2201      	movs	r2, #1
 8002e72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e74:	78fb      	ldrb	r3, [r7, #3]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_PCD_EP_SetStall+0x7e>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e01c      	b.n	8002ec8 <HAL_PCD_EP_SetStall+0xb8>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68f9      	ldr	r1, [r7, #12]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f004 fa54 	bl	800734a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ea2:	78fb      	ldrb	r3, [r7, #3]
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d108      	bne.n	8002ebe <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4610      	mov	r0, r2
 8002eba:	f004 fb79 	bl	80075b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	f003 020f 	and.w	r2, r3, #15
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d901      	bls.n	8002eee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e040      	b.n	8002f70 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002eee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	da0e      	bge.n	8002f14 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	1c5a      	adds	r2, r3, #1
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	4413      	add	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	705a      	strb	r2, [r3, #1]
 8002f12:	e00e      	b.n	8002f32 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	f003 0207 	and.w	r2, r3, #7
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f38:	78fb      	ldrb	r3, [r7, #3]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <HAL_PCD_EP_ClrStall+0x82>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e00e      	b.n	8002f70 <HAL_PCD_EP_ClrStall+0xa0>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68f9      	ldr	r1, [r7, #12]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f004 fa42 	bl	80073ea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b096      	sub	sp, #88	; 0x58
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002f80:	e3bf      	b.n	8003702 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f8a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002f8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	f003 030f 	and.w	r3, r3, #15
 8002f98:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002f9c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f040 8179 	bne.w	8003298 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002fa6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002faa:	f003 0310 	and.w	r3, r3, #16
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d152      	bne.n	8003058 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc2:	81fb      	strh	r3, [r7, #14]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	89fb      	ldrh	r3, [r7, #14]
 8002fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3328      	adds	r3, #40	; 0x28
 8002fda:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	4413      	add	r3, r2
 8002ff0:	3302      	adds	r3, #2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003006:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800300a:	695a      	ldr	r2, [r3, #20]
 800300c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	441a      	add	r2, r3
 8003012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003014:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003016:	2100      	movs	r1, #0
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f006 f8c8 	bl	80091ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 836b 	beq.w	8003702 <PCD_EP_ISR_Handler+0x78a>
 800302c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	2b00      	cmp	r3, #0
 8003032:	f040 8366 	bne.w	8003702 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800303c:	b2db      	uxtb	r3, r3
 800303e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003042:	b2da      	uxtb	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	b292      	uxth	r2, r2
 800304a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003056:	e354      	b.n	8003702 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800305e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800306a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800306e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003072:	2b00      	cmp	r3, #0
 8003074:	d034      	beq.n	80030e0 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800307e:	b29b      	uxth	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4413      	add	r3, r2
 800308a:	3306      	adds	r3, #6
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6812      	ldr	r2, [r2, #0]
 8003092:	4413      	add	r3, r2
 8003094:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800309e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030a0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80030ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ae:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80030b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030b2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	f004 facb 	bl	8007650 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80030c6:	4013      	ands	r3, r2
 80030c8:	823b      	strh	r3, [r7, #16]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	8a3a      	ldrh	r2, [r7, #16]
 80030d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030d4:	b292      	uxth	r2, r2
 80030d6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f006 f83b 	bl	8009154 <HAL_PCD_SetupStageCallback>
 80030de:	e310      	b.n	8003702 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80030e0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f280 830c 	bge.w	8003702 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80030f6:	4013      	ands	r3, r2
 80030f8:	83fb      	strh	r3, [r7, #30]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	8bfa      	ldrh	r2, [r7, #30]
 8003100:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003104:	b292      	uxth	r2, r2
 8003106:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003110:	b29b      	uxth	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4413      	add	r3, r2
 800311c:	3306      	adds	r3, #6
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	4413      	add	r3, r2
 8003126:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003132:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d019      	beq.n	8003170 <PCD_EP_ISR_Handler+0x1f8>
 800313c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d015      	beq.n	8003170 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800314a:	6959      	ldr	r1, [r3, #20]
 800314c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800314e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003152:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003154:	b29b      	uxth	r3, r3
 8003156:	f004 fa7b 	bl	8007650 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800315a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800315c:	695a      	ldr	r2, [r3, #20]
 800315e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	441a      	add	r2, r3
 8003164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003166:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003168:	2100      	movs	r1, #0
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f006 f804 	bl	8009178 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800317a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800317e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003182:	2b00      	cmp	r3, #0
 8003184:	f040 82bd 	bne.w	8003702 <PCD_EP_ISR_Handler+0x78a>
 8003188:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800318c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003190:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003194:	f000 82b5 	beq.w	8003702 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	61bb      	str	r3, [r7, #24]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	4413      	add	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	801a      	strh	r2, [r3, #0]
 80031c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	2b3e      	cmp	r3, #62	; 0x3e
 80031ce:	d91d      	bls.n	800320c <PCD_EP_ISR_Handler+0x294>
 80031d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	095b      	lsrs	r3, r3, #5
 80031d6:	647b      	str	r3, [r7, #68]	; 0x44
 80031d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	f003 031f 	and.w	r3, r3, #31
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d102      	bne.n	80031ea <PCD_EP_ISR_Handler+0x272>
 80031e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031e6:	3b01      	subs	r3, #1
 80031e8:	647b      	str	r3, [r7, #68]	; 0x44
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	029b      	lsls	r3, r3, #10
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	4313      	orrs	r3, r2
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003204:	b29a      	uxth	r2, r3
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	801a      	strh	r2, [r3, #0]
 800320a:	e026      	b.n	800325a <PCD_EP_ISR_Handler+0x2e2>
 800320c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10a      	bne.n	800322a <PCD_EP_ISR_Handler+0x2b2>
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	b29b      	uxth	r3, r3
 800321a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800321e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003222:	b29a      	uxth	r2, r3
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	801a      	strh	r2, [r3, #0]
 8003228:	e017      	b.n	800325a <PCD_EP_ISR_Handler+0x2e2>
 800322a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	647b      	str	r3, [r7, #68]	; 0x44
 8003232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <PCD_EP_ISR_Handler+0x2cc>
 800323e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003240:	3301      	adds	r3, #1
 8003242:	647b      	str	r3, [r7, #68]	; 0x44
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	b29a      	uxth	r2, r3
 800324a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800324c:	b29b      	uxth	r3, r3
 800324e:	029b      	lsls	r3, r3, #10
 8003250:	b29b      	uxth	r3, r3
 8003252:	4313      	orrs	r3, r2
 8003254:	b29a      	uxth	r2, r3
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	881b      	ldrh	r3, [r3, #0]
 8003260:	b29b      	uxth	r3, r3
 8003262:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326a:	827b      	strh	r3, [r7, #18]
 800326c:	8a7b      	ldrh	r3, [r7, #18]
 800326e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003272:	827b      	strh	r3, [r7, #18]
 8003274:	8a7b      	ldrh	r3, [r7, #18]
 8003276:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800327a:	827b      	strh	r3, [r7, #18]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	8a7b      	ldrh	r3, [r7, #18]
 8003282:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003286:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800328a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800328e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003292:	b29b      	uxth	r3, r3
 8003294:	8013      	strh	r3, [r2, #0]
 8003296:	e234      	b.n	8003702 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	461a      	mov	r2, r3
 800329e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80032ac:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f280 80fc 	bge.w	80034ae <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	461a      	mov	r2, r3
 80032bc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80032cc:	4013      	ands	r3, r2
 80032ce:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	461a      	mov	r2, r3
 80032d8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80032e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032e8:	b292      	uxth	r2, r2
 80032ea:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80032ec:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	4413      	add	r3, r2
 8003300:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003304:	7b1b      	ldrb	r3, [r3, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d125      	bne.n	8003356 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003312:	b29b      	uxth	r3, r3
 8003314:	461a      	mov	r2, r3
 8003316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4413      	add	r3, r2
 800331e:	3306      	adds	r3, #6
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6812      	ldr	r2, [r2, #0]
 8003326:	4413      	add	r3, r2
 8003328:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003332:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003336:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 8092 	beq.w	8003464 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6818      	ldr	r0, [r3, #0]
 8003344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003346:	6959      	ldr	r1, [r3, #20]
 8003348:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800334a:	88da      	ldrh	r2, [r3, #6]
 800334c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003350:	f004 f97e 	bl	8007650 <USB_ReadPMA>
 8003354:	e086      	b.n	8003464 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003358:	78db      	ldrb	r3, [r3, #3]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d10a      	bne.n	8003374 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800335e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003362:	461a      	mov	r2, r3
 8003364:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f9d9 	bl	800371e <HAL_PCD_EP_DB_Receive>
 800336c:	4603      	mov	r3, r0
 800336e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003372:	e077      	b.n	8003464 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	461a      	mov	r2, r3
 800337a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	b29b      	uxth	r3, r3
 8003386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800338a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	441a      	add	r2, r3
 80033a0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80033a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	461a      	mov	r2, r3
 80033be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d024      	beq.n	800341c <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033da:	b29b      	uxth	r3, r3
 80033dc:	461a      	mov	r2, r3
 80033de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	4413      	add	r3, r2
 80033e6:	3302      	adds	r3, #2
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6812      	ldr	r2, [r2, #0]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033fa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80033fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003402:	2b00      	cmp	r3, #0
 8003404:	d02e      	beq.n	8003464 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6818      	ldr	r0, [r3, #0]
 800340a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800340c:	6959      	ldr	r1, [r3, #20]
 800340e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003410:	891a      	ldrh	r2, [r3, #8]
 8003412:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003416:	f004 f91b 	bl	8007650 <USB_ReadPMA>
 800341a:	e023      	b.n	8003464 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003424:	b29b      	uxth	r3, r3
 8003426:	461a      	mov	r2, r3
 8003428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	4413      	add	r3, r2
 8003430:	3306      	adds	r3, #6
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6812      	ldr	r2, [r2, #0]
 8003438:	4413      	add	r3, r2
 800343a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003444:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003448:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800344c:	2b00      	cmp	r3, #0
 800344e:	d009      	beq.n	8003464 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6818      	ldr	r0, [r3, #0]
 8003454:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003456:	6959      	ldr	r1, [r3, #20]
 8003458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800345a:	895a      	ldrh	r2, [r3, #10]
 800345c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003460:	f004 f8f6 	bl	8007650 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003466:	69da      	ldr	r2, [r3, #28]
 8003468:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800346c:	441a      	add	r2, r3
 800346e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003470:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003474:	695a      	ldr	r2, [r3, #20]
 8003476:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800347a:	441a      	add	r2, r3
 800347c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800347e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003480:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <PCD_EP_ISR_Handler+0x51c>
 8003488:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800348c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	429a      	cmp	r2, r3
 8003492:	d206      	bcs.n	80034a2 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	4619      	mov	r1, r3
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f005 fe6c 	bl	8009178 <HAL_PCD_DataOutStageCallback>
 80034a0:	e005      	b.n	80034ae <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034a8:	4618      	mov	r0, r3
 80034aa:	f002 fb9d 	bl	8005be8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80034ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80034b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 8123 	beq.w	8003702 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 80034bc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	4413      	add	r3, r2
 80034ce:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	461a      	mov	r2, r3
 80034d6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80034e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	461a      	mov	r2, r3
 80034f4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	441a      	add	r2, r3
 80034fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003508:	b29b      	uxth	r3, r3
 800350a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800350c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800350e:	78db      	ldrb	r3, [r3, #3]
 8003510:	2b01      	cmp	r3, #1
 8003512:	f040 80a2 	bne.w	800365a <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8003516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003518:	2200      	movs	r2, #0
 800351a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800351c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800351e:	7b1b      	ldrb	r3, [r3, #12]
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 8093 	beq.w	800364c <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003526:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800352a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352e:	2b00      	cmp	r3, #0
 8003530:	d046      	beq.n	80035c0 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003534:	785b      	ldrb	r3, [r3, #1]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d126      	bne.n	8003588 <PCD_EP_ISR_Handler+0x610>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003548:	b29b      	uxth	r3, r3
 800354a:	461a      	mov	r2, r3
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	4413      	add	r3, r2
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
 8003552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	011a      	lsls	r2, r3, #4
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	4413      	add	r3, r2
 800355c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003560:	623b      	str	r3, [r7, #32]
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	b29b      	uxth	r3, r3
 8003568:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800356c:	b29a      	uxth	r2, r3
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	801a      	strh	r2, [r3, #0]
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	b29b      	uxth	r3, r3
 8003578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800357c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003580:	b29a      	uxth	r2, r3
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	801a      	strh	r2, [r3, #0]
 8003586:	e061      	b.n	800364c <PCD_EP_ISR_Handler+0x6d4>
 8003588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800358a:	785b      	ldrb	r3, [r3, #1]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d15d      	bne.n	800364c <PCD_EP_ISR_Handler+0x6d4>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800359e:	b29b      	uxth	r3, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a4:	4413      	add	r3, r2
 80035a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	011a      	lsls	r2, r3, #4
 80035ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b0:	4413      	add	r3, r2
 80035b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80035b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80035b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ba:	2200      	movs	r2, #0
 80035bc:	801a      	strh	r2, [r3, #0]
 80035be:	e045      	b.n	800364c <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c8:	785b      	ldrb	r3, [r3, #1]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d126      	bne.n	800361c <PCD_EP_ISR_Handler+0x6a4>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	637b      	str	r3, [r7, #52]	; 0x34
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035dc:	b29b      	uxth	r3, r3
 80035de:	461a      	mov	r2, r3
 80035e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e2:	4413      	add	r3, r2
 80035e4:	637b      	str	r3, [r7, #52]	; 0x34
 80035e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	011a      	lsls	r2, r3, #4
 80035ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ee:	4413      	add	r3, r2
 80035f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80035f4:	633b      	str	r3, [r7, #48]	; 0x30
 80035f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003600:	b29a      	uxth	r2, r3
 8003602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003604:	801a      	strh	r2, [r3, #0]
 8003606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	b29b      	uxth	r3, r3
 800360c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003614:	b29a      	uxth	r2, r3
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	801a      	strh	r2, [r3, #0]
 800361a:	e017      	b.n	800364c <PCD_EP_ISR_Handler+0x6d4>
 800361c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800361e:	785b      	ldrb	r3, [r3, #1]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d113      	bne.n	800364c <PCD_EP_ISR_Handler+0x6d4>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800362c:	b29b      	uxth	r3, r3
 800362e:	461a      	mov	r2, r3
 8003630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003632:	4413      	add	r3, r2
 8003634:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	011a      	lsls	r2, r3, #4
 800363c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800363e:	4413      	add	r3, r2
 8003640:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003644:	63bb      	str	r3, [r7, #56]	; 0x38
 8003646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003648:	2200      	movs	r2, #0
 800364a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800364c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	4619      	mov	r1, r3
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f005 fdab 	bl	80091ae <HAL_PCD_DataInStageCallback>
 8003658:	e053      	b.n	8003702 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800365a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800365e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d146      	bne.n	80036f4 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800366e:	b29b      	uxth	r3, r3
 8003670:	461a      	mov	r2, r3
 8003672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	4413      	add	r3, r2
 800367a:	3302      	adds	r3, #2
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6812      	ldr	r2, [r2, #0]
 8003682:	4413      	add	r3, r2
 8003684:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800368e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800369a:	429a      	cmp	r2, r3
 800369c:	d907      	bls.n	80036ae <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 800369e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a0:	699a      	ldr	r2, [r3, #24]
 80036a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80036a6:	1ad2      	subs	r2, r2, r3
 80036a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036aa:	619a      	str	r2, [r3, #24]
 80036ac:	e002      	b.n	80036b4 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80036ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036b0:	2200      	movs	r2, #0
 80036b2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80036b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d106      	bne.n	80036ca <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	4619      	mov	r1, r3
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f005 fd73 	bl	80091ae <HAL_PCD_DataInStageCallback>
 80036c8:	e01b      	b.n	8003702 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80036ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036cc:	695a      	ldr	r2, [r3, #20]
 80036ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80036d2:	441a      	add	r2, r3
 80036d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036d6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80036d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036da:	69da      	ldr	r2, [r3, #28]
 80036dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80036e0:	441a      	add	r2, r3
 80036e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036e4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036ec:	4618      	mov	r0, r3
 80036ee:	f002 fa7b 	bl	8005be8 <USB_EPStartXfer>
 80036f2:	e006      	b.n	8003702 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80036f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80036f8:	461a      	mov	r2, r3
 80036fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f91b 	bl	8003938 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800370a:	b29b      	uxth	r3, r3
 800370c:	b21b      	sxth	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	f6ff ac37 	blt.w	8002f82 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3758      	adds	r7, #88	; 0x58
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b088      	sub	sp, #32
 8003722:	af00      	add	r7, sp, #0
 8003724:	60f8      	str	r0, [r7, #12]
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	4613      	mov	r3, r2
 800372a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800372c:	88fb      	ldrh	r3, [r7, #6]
 800372e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d07e      	beq.n	8003834 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800373e:	b29b      	uxth	r3, r3
 8003740:	461a      	mov	r2, r3
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	4413      	add	r3, r2
 800374a:	3302      	adds	r3, #2
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	6812      	ldr	r2, [r2, #0]
 8003752:	4413      	add	r3, r2
 8003754:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800375e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	699a      	ldr	r2, [r3, #24]
 8003764:	8b7b      	ldrh	r3, [r7, #26]
 8003766:	429a      	cmp	r2, r3
 8003768:	d306      	bcc.n	8003778 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	699a      	ldr	r2, [r3, #24]
 800376e:	8b7b      	ldrh	r3, [r7, #26]
 8003770:	1ad2      	subs	r2, r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	619a      	str	r2, [r3, #24]
 8003776:	e002      	b.n	800377e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2200      	movs	r2, #0
 800377c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d123      	bne.n	80037ce <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	b29b      	uxth	r3, r3
 8003798:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800379c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a0:	833b      	strh	r3, [r7, #24]
 80037a2:	8b3b      	ldrh	r3, [r7, #24]
 80037a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80037a8:	833b      	strh	r3, [r7, #24]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	441a      	add	r2, r3
 80037b8:	8b3b      	ldrh	r3, [r7, #24]
 80037ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80037ce:	88fb      	ldrh	r3, [r7, #6]
 80037d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d01f      	beq.n	8003818 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	461a      	mov	r2, r3
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f2:	82fb      	strh	r3, [r7, #22]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	461a      	mov	r2, r3
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	441a      	add	r2, r3
 8003802:	8afb      	ldrh	r3, [r7, #22]
 8003804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800380c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003810:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003814:	b29b      	uxth	r3, r3
 8003816:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003818:	8b7b      	ldrh	r3, [r7, #26]
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 8087 	beq.w	800392e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6818      	ldr	r0, [r3, #0]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	6959      	ldr	r1, [r3, #20]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	891a      	ldrh	r2, [r3, #8]
 800382c:	8b7b      	ldrh	r3, [r7, #26]
 800382e:	f003 ff0f 	bl	8007650 <USB_ReadPMA>
 8003832:	e07c      	b.n	800392e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800383c:	b29b      	uxth	r3, r3
 800383e:	461a      	mov	r2, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	4413      	add	r3, r2
 8003848:	3306      	adds	r3, #6
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800385c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	8b7b      	ldrh	r3, [r7, #26]
 8003864:	429a      	cmp	r2, r3
 8003866:	d306      	bcc.n	8003876 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	699a      	ldr	r2, [r3, #24]
 800386c:	8b7b      	ldrh	r3, [r7, #26]
 800386e:	1ad2      	subs	r2, r2, r3
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	619a      	str	r2, [r3, #24]
 8003874:	e002      	b.n	800387c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2200      	movs	r2, #0
 800387a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d123      	bne.n	80038cc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	461a      	mov	r2, r3
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	b29b      	uxth	r3, r3
 8003896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800389a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389e:	83fb      	strh	r3, [r7, #30]
 80038a0:	8bfb      	ldrh	r3, [r7, #30]
 80038a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80038a6:	83fb      	strh	r3, [r7, #30]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	461a      	mov	r2, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	441a      	add	r2, r3
 80038b6:	8bfb      	ldrh	r3, [r7, #30]
 80038b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80038cc:	88fb      	ldrh	r3, [r7, #6]
 80038ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d11f      	bne.n	8003916 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	461a      	mov	r2, r3
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4413      	add	r3, r2
 80038e4:	881b      	ldrh	r3, [r3, #0]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f0:	83bb      	strh	r3, [r7, #28]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	441a      	add	r2, r3
 8003900:	8bbb      	ldrh	r3, [r7, #28]
 8003902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800390a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800390e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003912:	b29b      	uxth	r3, r3
 8003914:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003916:	8b7b      	ldrh	r3, [r7, #26]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d008      	beq.n	800392e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6818      	ldr	r0, [r3, #0]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	6959      	ldr	r1, [r3, #20]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	895a      	ldrh	r2, [r3, #10]
 8003928:	8b7b      	ldrh	r3, [r7, #26]
 800392a:	f003 fe91 	bl	8007650 <USB_ReadPMA>
    }
  }

  return count;
 800392e:	8b7b      	ldrh	r3, [r7, #26]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3720      	adds	r7, #32
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b0a4      	sub	sp, #144	; 0x90
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	4613      	mov	r3, r2
 8003944:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003946:	88fb      	ldrh	r3, [r7, #6]
 8003948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 81dd 	beq.w	8003d0c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800395a:	b29b      	uxth	r3, r3
 800395c:	461a      	mov	r2, r3
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	4413      	add	r3, r2
 8003966:	3302      	adds	r3, #2
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	6812      	ldr	r2, [r2, #0]
 800396e:	4413      	add	r3, r2
 8003970:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800397a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	699a      	ldr	r2, [r3, #24]
 8003982:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003986:	429a      	cmp	r2, r3
 8003988:	d907      	bls.n	800399a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	699a      	ldr	r2, [r3, #24]
 800398e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003992:	1ad2      	subs	r2, r2, r3
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	619a      	str	r2, [r3, #24]
 8003998:	e002      	b.n	80039a0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2200      	movs	r2, #0
 800399e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f040 80b9 	bne.w	8003b1c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	785b      	ldrb	r3, [r3, #1]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d126      	bne.n	8003a00 <HAL_PCD_EP_DB_Transmit+0xc8>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	461a      	mov	r2, r3
 80039c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c6:	4413      	add	r3, r2
 80039c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	011a      	lsls	r2, r3, #4
 80039d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d2:	4413      	add	r3, r2
 80039d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e8:	801a      	strh	r2, [r3, #0]
 80039ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fc:	801a      	strh	r2, [r3, #0]
 80039fe:	e01a      	b.n	8003a36 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	785b      	ldrb	r3, [r3, #1]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d116      	bne.n	8003a36 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	461a      	mov	r2, r3
 8003a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a1c:	4413      	add	r3, r2
 8003a1e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	011a      	lsls	r2, r3, #4
 8003a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a28:	4413      	add	r3, r2
 8003a2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a2e:	633b      	str	r3, [r7, #48]	; 0x30
 8003a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a32:	2200      	movs	r2, #0
 8003a34:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	785b      	ldrb	r3, [r3, #1]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d126      	bne.n	8003a92 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	61fb      	str	r3, [r7, #28]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	461a      	mov	r2, r3
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	4413      	add	r3, r2
 8003a5a:	61fb      	str	r3, [r7, #28]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	011a      	lsls	r2, r3, #4
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	4413      	add	r3, r2
 8003a66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a6a:	61bb      	str	r3, [r7, #24]
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	881b      	ldrh	r3, [r3, #0]
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	801a      	strh	r2, [r3, #0]
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	881b      	ldrh	r3, [r3, #0]
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	801a      	strh	r2, [r3, #0]
 8003a90:	e017      	b.n	8003ac2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	785b      	ldrb	r3, [r3, #1]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d113      	bne.n	8003ac2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	4413      	add	r3, r2
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	011a      	lsls	r2, r3, #4
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003aba:	623b      	str	r3, [r7, #32]
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f005 fb70 	bl	80091ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ace:	88fb      	ldrh	r3, [r7, #6]
 8003ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 82fc 	beq.w	80040d2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af4:	82fb      	strh	r3, [r7, #22]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	441a      	add	r2, r3
 8003b04:	8afb      	ldrh	r3, [r7, #22]
 8003b06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	8013      	strh	r3, [r2, #0]
 8003b1a:	e2da      	b.n	80040d2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b1c:	88fb      	ldrh	r3, [r7, #6]
 8003b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d021      	beq.n	8003b6a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b40:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	441a      	add	r2, r3
 8003b52:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003b56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	f040 82ae 	bne.w	80040d2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	695a      	ldr	r2, [r3, #20]
 8003b7a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003b7e:	441a      	add	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	69da      	ldr	r2, [r3, #28]
 8003b88:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003b8c:	441a      	add	r2, r3
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	6a1a      	ldr	r2, [r3, #32]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d30b      	bcc.n	8003bb6 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	6a1a      	ldr	r2, [r3, #32]
 8003baa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bae:	1ad2      	subs	r2, r2, r3
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	621a      	str	r2, [r3, #32]
 8003bb4:	e017      	b.n	8003be6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d108      	bne.n	8003bd0 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003bbe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003bc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003bce:	e00a      	b.n	8003be6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2200      	movs	r2, #0
 8003be4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	785b      	ldrb	r3, [r3, #1]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d165      	bne.n	8003cba <HAL_PCD_EP_DB_Transmit+0x382>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	461a      	mov	r2, r3
 8003c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c02:	4413      	add	r3, r2
 8003c04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	011a      	lsls	r2, r3, #4
 8003c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c0e:	4413      	add	r3, r2
 8003c10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c14:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c24:	801a      	strh	r2, [r3, #0]
 8003c26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c2a:	2b3e      	cmp	r3, #62	; 0x3e
 8003c2c:	d91d      	bls.n	8003c6a <HAL_PCD_EP_DB_Transmit+0x332>
 8003c2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c32:	095b      	lsrs	r3, r3, #5
 8003c34:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c3a:	f003 031f 	and.w	r3, r3, #31
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d102      	bne.n	8003c48 <HAL_PCD_EP_DB_Transmit+0x310>
 8003c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c44:	3b01      	subs	r3, #1
 8003c46:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4a:	881b      	ldrh	r3, [r3, #0]
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	029b      	lsls	r3, r3, #10
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	4313      	orrs	r3, r2
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c66:	801a      	strh	r2, [r3, #0]
 8003c68:	e044      	b.n	8003cf4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10a      	bne.n	8003c88 <HAL_PCD_EP_DB_Transmit+0x350>
 8003c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c84:	801a      	strh	r2, [r3, #0]
 8003c86:	e035      	b.n	8003cf4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003c88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c8c:	085b      	lsrs	r3, r3, #1
 8003c8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	029b      	lsls	r3, r3, #10
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb6:	801a      	strh	r2, [r3, #0]
 8003cb8:	e01c      	b.n	8003cf4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	785b      	ldrb	r3, [r3, #1]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d118      	bne.n	8003cf4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	647b      	str	r3, [r7, #68]	; 0x44
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cd6:	4413      	add	r3, r2
 8003cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	011a      	lsls	r2, r3, #4
 8003ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ce8:	643b      	str	r3, [r7, #64]	; 0x40
 8003cea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cf2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	6959      	ldr	r1, [r3, #20]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	891a      	ldrh	r2, [r3, #8]
 8003d00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	f003 fc5e 	bl	80075c6 <USB_WritePMA>
 8003d0a:	e1e2      	b.n	80040d2 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	461a      	mov	r2, r3
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	4413      	add	r3, r2
 8003d20:	3306      	adds	r3, #6
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	6812      	ldr	r2, [r2, #0]
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d34:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	699a      	ldr	r2, [r3, #24]
 8003d3c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d307      	bcc.n	8003d54 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	699a      	ldr	r2, [r3, #24]
 8003d48:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003d4c:	1ad2      	subs	r2, r2, r3
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	619a      	str	r2, [r3, #24]
 8003d52:	e002      	b.n	8003d5a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2200      	movs	r2, #0
 8003d58:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f040 80c0 	bne.w	8003ee4 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	785b      	ldrb	r3, [r3, #1]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d126      	bne.n	8003dba <HAL_PCD_EP_DB_Transmit+0x482>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d80:	4413      	add	r3, r2
 8003d82:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	011a      	lsls	r2, r3, #4
 8003d8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d92:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003da2:	801a      	strh	r2, [r3, #0]
 8003da4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003db6:	801a      	strh	r2, [r3, #0]
 8003db8:	e01a      	b.n	8003df0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	785b      	ldrb	r3, [r3, #1]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d116      	bne.n	8003df0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	667b      	str	r3, [r7, #100]	; 0x64
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dd6:	4413      	add	r3, r2
 8003dd8:	667b      	str	r3, [r7, #100]	; 0x64
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	011a      	lsls	r2, r3, #4
 8003de0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003de2:	4413      	add	r3, r2
 8003de4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003de8:	663b      	str	r3, [r7, #96]	; 0x60
 8003dea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dec:	2200      	movs	r2, #0
 8003dee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	677b      	str	r3, [r7, #116]	; 0x74
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	785b      	ldrb	r3, [r3, #1]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d12b      	bne.n	8003e56 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	461a      	mov	r2, r3
 8003e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e12:	4413      	add	r3, r2
 8003e14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	011a      	lsls	r2, r3, #4
 8003e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1e:	4413      	add	r3, r2
 8003e20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e3a:	801a      	strh	r2, [r3, #0]
 8003e3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e52:	801a      	strh	r2, [r3, #0]
 8003e54:	e017      	b.n	8003e86 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	785b      	ldrb	r3, [r3, #1]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d113      	bne.n	8003e86 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e6c:	4413      	add	r3, r2
 8003e6e:	677b      	str	r3, [r7, #116]	; 0x74
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	011a      	lsls	r2, r3, #4
 8003e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e78:	4413      	add	r3, r2
 8003e7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e7e:	673b      	str	r3, [r7, #112]	; 0x70
 8003e80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e82:	2200      	movs	r2, #0
 8003e84:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f005 f98e 	bl	80091ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003e92:	88fb      	ldrh	r3, [r7, #6]
 8003e94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f040 811a 	bne.w	80040d2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	441a      	add	r2, r3
 8003eca:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003ece:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ed2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ed6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	8013      	strh	r3, [r2, #0]
 8003ee2:	e0f6      	b.n	80040d2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ee4:	88fb      	ldrh	r3, [r7, #6]
 8003ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d121      	bne.n	8003f32 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f08:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	461a      	mov	r2, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	441a      	add	r2, r3
 8003f1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	f040 80ca 	bne.w	80040d2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	695a      	ldr	r2, [r3, #20]
 8003f42:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003f46:	441a      	add	r2, r3
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	69da      	ldr	r2, [r3, #28]
 8003f50:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003f54:	441a      	add	r2, r3
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	6a1a      	ldr	r2, [r3, #32]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d30b      	bcc.n	8003f7e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	6a1a      	ldr	r2, [r3, #32]
 8003f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f76:	1ad2      	subs	r2, r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	621a      	str	r2, [r3, #32]
 8003f7c:	e017      	b.n	8003fae <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d108      	bne.n	8003f98 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003f86:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003f8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003f96:	e00a      	b.n	8003fae <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	657b      	str	r3, [r7, #84]	; 0x54
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	785b      	ldrb	r3, [r3, #1]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d165      	bne.n	8004088 <HAL_PCD_EP_DB_Transmit+0x750>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	461a      	mov	r2, r3
 8003fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fd0:	4413      	add	r3, r2
 8003fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	011a      	lsls	r2, r3, #4
 8003fda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fdc:	4413      	add	r3, r2
 8003fde:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fe2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fe4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ff2:	801a      	strh	r2, [r3, #0]
 8003ff4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ff8:	2b3e      	cmp	r3, #62	; 0x3e
 8003ffa:	d91d      	bls.n	8004038 <HAL_PCD_EP_DB_Transmit+0x700>
 8003ffc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004000:	095b      	lsrs	r3, r3, #5
 8004002:	66bb      	str	r3, [r7, #104]	; 0x68
 8004004:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004008:	f003 031f 	and.w	r3, r3, #31
 800400c:	2b00      	cmp	r3, #0
 800400e:	d102      	bne.n	8004016 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004010:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004012:	3b01      	subs	r3, #1
 8004014:	66bb      	str	r3, [r7, #104]	; 0x68
 8004016:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	b29a      	uxth	r2, r3
 800401c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800401e:	b29b      	uxth	r3, r3
 8004020:	029b      	lsls	r3, r3, #10
 8004022:	b29b      	uxth	r3, r3
 8004024:	4313      	orrs	r3, r2
 8004026:	b29b      	uxth	r3, r3
 8004028:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800402c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004030:	b29a      	uxth	r2, r3
 8004032:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004034:	801a      	strh	r2, [r3, #0]
 8004036:	e041      	b.n	80040bc <HAL_PCD_EP_DB_Transmit+0x784>
 8004038:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10a      	bne.n	8004056 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004040:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	b29b      	uxth	r3, r3
 8004046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800404a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800404e:	b29a      	uxth	r2, r3
 8004050:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004052:	801a      	strh	r2, [r3, #0]
 8004054:	e032      	b.n	80040bc <HAL_PCD_EP_DB_Transmit+0x784>
 8004056:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800405a:	085b      	lsrs	r3, r3, #1
 800405c:	66bb      	str	r3, [r7, #104]	; 0x68
 800405e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <HAL_PCD_EP_DB_Transmit+0x738>
 800406a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800406c:	3301      	adds	r3, #1
 800406e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004070:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	b29a      	uxth	r2, r3
 8004076:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004078:	b29b      	uxth	r3, r3
 800407a:	029b      	lsls	r3, r3, #10
 800407c:	b29b      	uxth	r3, r3
 800407e:	4313      	orrs	r3, r2
 8004080:	b29a      	uxth	r2, r3
 8004082:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004084:	801a      	strh	r2, [r3, #0]
 8004086:	e019      	b.n	80040bc <HAL_PCD_EP_DB_Transmit+0x784>
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	785b      	ldrb	r3, [r3, #1]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d115      	bne.n	80040bc <HAL_PCD_EP_DB_Transmit+0x784>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004098:	b29b      	uxth	r3, r3
 800409a:	461a      	mov	r2, r3
 800409c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800409e:	4413      	add	r3, r2
 80040a0:	657b      	str	r3, [r7, #84]	; 0x54
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	011a      	lsls	r2, r3, #4
 80040a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040aa:	4413      	add	r3, r2
 80040ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040b0:	653b      	str	r3, [r7, #80]	; 0x50
 80040b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ba:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	6959      	ldr	r1, [r3, #20]
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	895a      	ldrh	r2, [r3, #10]
 80040c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	f003 fa7a 	bl	80075c6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ec:	82bb      	strh	r3, [r7, #20]
 80040ee:	8abb      	ldrh	r3, [r7, #20]
 80040f0:	f083 0310 	eor.w	r3, r3, #16
 80040f4:	82bb      	strh	r3, [r7, #20]
 80040f6:	8abb      	ldrh	r3, [r7, #20]
 80040f8:	f083 0320 	eor.w	r3, r3, #32
 80040fc:	82bb      	strh	r3, [r7, #20]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	441a      	add	r2, r3
 800410c:	8abb      	ldrh	r3, [r7, #20]
 800410e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004112:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800411a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800411e:	b29b      	uxth	r3, r3
 8004120:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3790      	adds	r7, #144	; 0x90
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	607b      	str	r3, [r7, #4]
 8004136:	460b      	mov	r3, r1
 8004138:	817b      	strh	r3, [r7, #10]
 800413a:	4613      	mov	r3, r2
 800413c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800413e:	897b      	ldrh	r3, [r7, #10]
 8004140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00b      	beq.n	8004162 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800414a:	897b      	ldrh	r3, [r7, #10]
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	4613      	mov	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	4413      	add	r3, r2
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	e009      	b.n	8004176 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004162:	897a      	ldrh	r2, [r7, #10]
 8004164:	4613      	mov	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	4413      	add	r3, r2
 8004174:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004176:	893b      	ldrh	r3, [r7, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d107      	bne.n	800418c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	2200      	movs	r2, #0
 8004180:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	b29a      	uxth	r2, r3
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	80da      	strh	r2, [r3, #6]
 800418a:	e00b      	b.n	80041a4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	2201      	movs	r2, #1
 8004190:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	b29a      	uxth	r2, r3
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	0c1b      	lsrs	r3, r3, #16
 800419e:	b29a      	uxth	r2, r3
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	371c      	adds	r7, #28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr

080041b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e272      	b.n	80046a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 8087 	beq.w	80042de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041d0:	4b92      	ldr	r3, [pc, #584]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f003 030c 	and.w	r3, r3, #12
 80041d8:	2b04      	cmp	r3, #4
 80041da:	d00c      	beq.n	80041f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041dc:	4b8f      	ldr	r3, [pc, #572]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f003 030c 	and.w	r3, r3, #12
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d112      	bne.n	800420e <HAL_RCC_OscConfig+0x5e>
 80041e8:	4b8c      	ldr	r3, [pc, #560]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f4:	d10b      	bne.n	800420e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f6:	4b89      	ldr	r3, [pc, #548]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d06c      	beq.n	80042dc <HAL_RCC_OscConfig+0x12c>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d168      	bne.n	80042dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e24c      	b.n	80046a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004216:	d106      	bne.n	8004226 <HAL_RCC_OscConfig+0x76>
 8004218:	4b80      	ldr	r3, [pc, #512]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a7f      	ldr	r2, [pc, #508]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 800421e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004222:	6013      	str	r3, [r2, #0]
 8004224:	e02e      	b.n	8004284 <HAL_RCC_OscConfig+0xd4>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10c      	bne.n	8004248 <HAL_RCC_OscConfig+0x98>
 800422e:	4b7b      	ldr	r3, [pc, #492]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a7a      	ldr	r2, [pc, #488]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 8004234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	4b78      	ldr	r3, [pc, #480]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a77      	ldr	r2, [pc, #476]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 8004240:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	e01d      	b.n	8004284 <HAL_RCC_OscConfig+0xd4>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004250:	d10c      	bne.n	800426c <HAL_RCC_OscConfig+0xbc>
 8004252:	4b72      	ldr	r3, [pc, #456]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a71      	ldr	r2, [pc, #452]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 8004258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	4b6f      	ldr	r3, [pc, #444]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a6e      	ldr	r2, [pc, #440]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 8004264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	e00b      	b.n	8004284 <HAL_RCC_OscConfig+0xd4>
 800426c:	4b6b      	ldr	r3, [pc, #428]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a6a      	ldr	r2, [pc, #424]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 8004272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	4b68      	ldr	r3, [pc, #416]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a67      	ldr	r2, [pc, #412]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 800427e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004282:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d013      	beq.n	80042b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428c:	f7fd ff1a 	bl	80020c4 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004294:	f7fd ff16 	bl	80020c4 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b64      	cmp	r3, #100	; 0x64
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e200      	b.n	80046a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a6:	4b5d      	ldr	r3, [pc, #372]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0f0      	beq.n	8004294 <HAL_RCC_OscConfig+0xe4>
 80042b2:	e014      	b.n	80042de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b4:	f7fd ff06 	bl	80020c4 <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042bc:	f7fd ff02 	bl	80020c4 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b64      	cmp	r3, #100	; 0x64
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e1ec      	b.n	80046a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ce:	4b53      	ldr	r3, [pc, #332]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1f0      	bne.n	80042bc <HAL_RCC_OscConfig+0x10c>
 80042da:	e000      	b.n	80042de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d063      	beq.n	80043b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042ea:	4b4c      	ldr	r3, [pc, #304]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f003 030c 	and.w	r3, r3, #12
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00b      	beq.n	800430e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80042f6:	4b49      	ldr	r3, [pc, #292]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f003 030c 	and.w	r3, r3, #12
 80042fe:	2b08      	cmp	r3, #8
 8004300:	d11c      	bne.n	800433c <HAL_RCC_OscConfig+0x18c>
 8004302:	4b46      	ldr	r3, [pc, #280]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d116      	bne.n	800433c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800430e:	4b43      	ldr	r3, [pc, #268]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d005      	beq.n	8004326 <HAL_RCC_OscConfig+0x176>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d001      	beq.n	8004326 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e1c0      	b.n	80046a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004326:	4b3d      	ldr	r3, [pc, #244]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	4939      	ldr	r1, [pc, #228]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 8004336:	4313      	orrs	r3, r2
 8004338:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800433a:	e03a      	b.n	80043b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d020      	beq.n	8004386 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004344:	4b36      	ldr	r3, [pc, #216]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 8004346:	2201      	movs	r2, #1
 8004348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434a:	f7fd febb 	bl	80020c4 <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004352:	f7fd feb7 	bl	80020c4 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e1a1      	b.n	80046a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004364:	4b2d      	ldr	r3, [pc, #180]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0f0      	beq.n	8004352 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004370:	4b2a      	ldr	r3, [pc, #168]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	4927      	ldr	r1, [pc, #156]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 8004380:	4313      	orrs	r3, r2
 8004382:	600b      	str	r3, [r1, #0]
 8004384:	e015      	b.n	80043b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004386:	4b26      	ldr	r3, [pc, #152]	; (8004420 <HAL_RCC_OscConfig+0x270>)
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438c:	f7fd fe9a 	bl	80020c4 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004394:	f7fd fe96 	bl	80020c4 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e180      	b.n	80046a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043a6:	4b1d      	ldr	r3, [pc, #116]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1f0      	bne.n	8004394 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0308 	and.w	r3, r3, #8
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d03a      	beq.n	8004434 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d019      	beq.n	80043fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043c6:	4b17      	ldr	r3, [pc, #92]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 80043c8:	2201      	movs	r2, #1
 80043ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043cc:	f7fd fe7a 	bl	80020c4 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043d4:	f7fd fe76 	bl	80020c4 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e160      	b.n	80046a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043e6:	4b0d      	ldr	r3, [pc, #52]	; (800441c <HAL_RCC_OscConfig+0x26c>)
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0f0      	beq.n	80043d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80043f2:	2001      	movs	r0, #1
 80043f4:	f000 fa9e 	bl	8004934 <RCC_Delay>
 80043f8:	e01c      	b.n	8004434 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043fa:	4b0a      	ldr	r3, [pc, #40]	; (8004424 <HAL_RCC_OscConfig+0x274>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004400:	f7fd fe60 	bl	80020c4 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004406:	e00f      	b.n	8004428 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004408:	f7fd fe5c 	bl	80020c4 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d908      	bls.n	8004428 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e146      	b.n	80046a8 <HAL_RCC_OscConfig+0x4f8>
 800441a:	bf00      	nop
 800441c:	40021000 	.word	0x40021000
 8004420:	42420000 	.word	0x42420000
 8004424:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004428:	4b92      	ldr	r3, [pc, #584]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1e9      	bne.n	8004408 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 80a6 	beq.w	800458e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004442:	2300      	movs	r3, #0
 8004444:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004446:	4b8b      	ldr	r3, [pc, #556]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10d      	bne.n	800446e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004452:	4b88      	ldr	r3, [pc, #544]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	4a87      	ldr	r2, [pc, #540]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 8004458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800445c:	61d3      	str	r3, [r2, #28]
 800445e:	4b85      	ldr	r3, [pc, #532]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004466:	60bb      	str	r3, [r7, #8]
 8004468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800446a:	2301      	movs	r3, #1
 800446c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446e:	4b82      	ldr	r3, [pc, #520]	; (8004678 <HAL_RCC_OscConfig+0x4c8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004476:	2b00      	cmp	r3, #0
 8004478:	d118      	bne.n	80044ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800447a:	4b7f      	ldr	r3, [pc, #508]	; (8004678 <HAL_RCC_OscConfig+0x4c8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a7e      	ldr	r2, [pc, #504]	; (8004678 <HAL_RCC_OscConfig+0x4c8>)
 8004480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004486:	f7fd fe1d 	bl	80020c4 <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800448c:	e008      	b.n	80044a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800448e:	f7fd fe19 	bl	80020c4 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b64      	cmp	r3, #100	; 0x64
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e103      	b.n	80046a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a0:	4b75      	ldr	r3, [pc, #468]	; (8004678 <HAL_RCC_OscConfig+0x4c8>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0f0      	beq.n	800448e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d106      	bne.n	80044c2 <HAL_RCC_OscConfig+0x312>
 80044b4:	4b6f      	ldr	r3, [pc, #444]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	4a6e      	ldr	r2, [pc, #440]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 80044ba:	f043 0301 	orr.w	r3, r3, #1
 80044be:	6213      	str	r3, [r2, #32]
 80044c0:	e02d      	b.n	800451e <HAL_RCC_OscConfig+0x36e>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10c      	bne.n	80044e4 <HAL_RCC_OscConfig+0x334>
 80044ca:	4b6a      	ldr	r3, [pc, #424]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	4a69      	ldr	r2, [pc, #420]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 80044d0:	f023 0301 	bic.w	r3, r3, #1
 80044d4:	6213      	str	r3, [r2, #32]
 80044d6:	4b67      	ldr	r3, [pc, #412]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	4a66      	ldr	r2, [pc, #408]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 80044dc:	f023 0304 	bic.w	r3, r3, #4
 80044e0:	6213      	str	r3, [r2, #32]
 80044e2:	e01c      	b.n	800451e <HAL_RCC_OscConfig+0x36e>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	2b05      	cmp	r3, #5
 80044ea:	d10c      	bne.n	8004506 <HAL_RCC_OscConfig+0x356>
 80044ec:	4b61      	ldr	r3, [pc, #388]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	4a60      	ldr	r2, [pc, #384]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 80044f2:	f043 0304 	orr.w	r3, r3, #4
 80044f6:	6213      	str	r3, [r2, #32]
 80044f8:	4b5e      	ldr	r3, [pc, #376]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	4a5d      	ldr	r2, [pc, #372]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 80044fe:	f043 0301 	orr.w	r3, r3, #1
 8004502:	6213      	str	r3, [r2, #32]
 8004504:	e00b      	b.n	800451e <HAL_RCC_OscConfig+0x36e>
 8004506:	4b5b      	ldr	r3, [pc, #364]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	4a5a      	ldr	r2, [pc, #360]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 800450c:	f023 0301 	bic.w	r3, r3, #1
 8004510:	6213      	str	r3, [r2, #32]
 8004512:	4b58      	ldr	r3, [pc, #352]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	4a57      	ldr	r2, [pc, #348]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 8004518:	f023 0304 	bic.w	r3, r3, #4
 800451c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d015      	beq.n	8004552 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004526:	f7fd fdcd 	bl	80020c4 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800452c:	e00a      	b.n	8004544 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452e:	f7fd fdc9 	bl	80020c4 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	f241 3288 	movw	r2, #5000	; 0x1388
 800453c:	4293      	cmp	r3, r2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e0b1      	b.n	80046a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004544:	4b4b      	ldr	r3, [pc, #300]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0ee      	beq.n	800452e <HAL_RCC_OscConfig+0x37e>
 8004550:	e014      	b.n	800457c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004552:	f7fd fdb7 	bl	80020c4 <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004558:	e00a      	b.n	8004570 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800455a:	f7fd fdb3 	bl	80020c4 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	f241 3288 	movw	r2, #5000	; 0x1388
 8004568:	4293      	cmp	r3, r2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e09b      	b.n	80046a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004570:	4b40      	ldr	r3, [pc, #256]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1ee      	bne.n	800455a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800457c:	7dfb      	ldrb	r3, [r7, #23]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d105      	bne.n	800458e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004582:	4b3c      	ldr	r3, [pc, #240]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	4a3b      	ldr	r2, [pc, #236]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 8004588:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800458c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 8087 	beq.w	80046a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004598:	4b36      	ldr	r3, [pc, #216]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f003 030c 	and.w	r3, r3, #12
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d061      	beq.n	8004668 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d146      	bne.n	800463a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ac:	4b33      	ldr	r3, [pc, #204]	; (800467c <HAL_RCC_OscConfig+0x4cc>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b2:	f7fd fd87 	bl	80020c4 <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045b8:	e008      	b.n	80045cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ba:	f7fd fd83 	bl	80020c4 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d901      	bls.n	80045cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e06d      	b.n	80046a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045cc:	4b29      	ldr	r3, [pc, #164]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1f0      	bne.n	80045ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e0:	d108      	bne.n	80045f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045e2:	4b24      	ldr	r3, [pc, #144]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	4921      	ldr	r1, [pc, #132]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045f4:	4b1f      	ldr	r3, [pc, #124]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a19      	ldr	r1, [r3, #32]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	430b      	orrs	r3, r1
 8004606:	491b      	ldr	r1, [pc, #108]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 8004608:	4313      	orrs	r3, r2
 800460a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800460c:	4b1b      	ldr	r3, [pc, #108]	; (800467c <HAL_RCC_OscConfig+0x4cc>)
 800460e:	2201      	movs	r2, #1
 8004610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004612:	f7fd fd57 	bl	80020c4 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004618:	e008      	b.n	800462c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800461a:	f7fd fd53 	bl	80020c4 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e03d      	b.n	80046a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800462c:	4b11      	ldr	r3, [pc, #68]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0f0      	beq.n	800461a <HAL_RCC_OscConfig+0x46a>
 8004638:	e035      	b.n	80046a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463a:	4b10      	ldr	r3, [pc, #64]	; (800467c <HAL_RCC_OscConfig+0x4cc>)
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004640:	f7fd fd40 	bl	80020c4 <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004648:	f7fd fd3c 	bl	80020c4 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e026      	b.n	80046a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800465a:	4b06      	ldr	r3, [pc, #24]	; (8004674 <HAL_RCC_OscConfig+0x4c4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1f0      	bne.n	8004648 <HAL_RCC_OscConfig+0x498>
 8004666:	e01e      	b.n	80046a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d107      	bne.n	8004680 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e019      	b.n	80046a8 <HAL_RCC_OscConfig+0x4f8>
 8004674:	40021000 	.word	0x40021000
 8004678:	40007000 	.word	0x40007000
 800467c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004680:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <HAL_RCC_OscConfig+0x500>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	429a      	cmp	r2, r3
 8004692:	d106      	bne.n	80046a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800469e:	429a      	cmp	r2, r3
 80046a0:	d001      	beq.n	80046a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40021000 	.word	0x40021000

080046b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e0d0      	b.n	800486a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046c8:	4b6a      	ldr	r3, [pc, #424]	; (8004874 <HAL_RCC_ClockConfig+0x1c0>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d910      	bls.n	80046f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d6:	4b67      	ldr	r3, [pc, #412]	; (8004874 <HAL_RCC_ClockConfig+0x1c0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f023 0207 	bic.w	r2, r3, #7
 80046de:	4965      	ldr	r1, [pc, #404]	; (8004874 <HAL_RCC_ClockConfig+0x1c0>)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e6:	4b63      	ldr	r3, [pc, #396]	; (8004874 <HAL_RCC_ClockConfig+0x1c0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d001      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0b8      	b.n	800486a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d020      	beq.n	8004746 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004710:	4b59      	ldr	r3, [pc, #356]	; (8004878 <HAL_RCC_ClockConfig+0x1c4>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	4a58      	ldr	r2, [pc, #352]	; (8004878 <HAL_RCC_ClockConfig+0x1c4>)
 8004716:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800471a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004728:	4b53      	ldr	r3, [pc, #332]	; (8004878 <HAL_RCC_ClockConfig+0x1c4>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	4a52      	ldr	r2, [pc, #328]	; (8004878 <HAL_RCC_ClockConfig+0x1c4>)
 800472e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004732:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004734:	4b50      	ldr	r3, [pc, #320]	; (8004878 <HAL_RCC_ClockConfig+0x1c4>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	494d      	ldr	r1, [pc, #308]	; (8004878 <HAL_RCC_ClockConfig+0x1c4>)
 8004742:	4313      	orrs	r3, r2
 8004744:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d040      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d107      	bne.n	800476a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475a:	4b47      	ldr	r3, [pc, #284]	; (8004878 <HAL_RCC_ClockConfig+0x1c4>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d115      	bne.n	8004792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e07f      	b.n	800486a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d107      	bne.n	8004782 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004772:	4b41      	ldr	r3, [pc, #260]	; (8004878 <HAL_RCC_ClockConfig+0x1c4>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d109      	bne.n	8004792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e073      	b.n	800486a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004782:	4b3d      	ldr	r3, [pc, #244]	; (8004878 <HAL_RCC_ClockConfig+0x1c4>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e06b      	b.n	800486a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004792:	4b39      	ldr	r3, [pc, #228]	; (8004878 <HAL_RCC_ClockConfig+0x1c4>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f023 0203 	bic.w	r2, r3, #3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	4936      	ldr	r1, [pc, #216]	; (8004878 <HAL_RCC_ClockConfig+0x1c4>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047a4:	f7fd fc8e 	bl	80020c4 <HAL_GetTick>
 80047a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047aa:	e00a      	b.n	80047c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ac:	f7fd fc8a 	bl	80020c4 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e053      	b.n	800486a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c2:	4b2d      	ldr	r3, [pc, #180]	; (8004878 <HAL_RCC_ClockConfig+0x1c4>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f003 020c 	and.w	r2, r3, #12
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d1eb      	bne.n	80047ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047d4:	4b27      	ldr	r3, [pc, #156]	; (8004874 <HAL_RCC_ClockConfig+0x1c0>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d210      	bcs.n	8004804 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e2:	4b24      	ldr	r3, [pc, #144]	; (8004874 <HAL_RCC_ClockConfig+0x1c0>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f023 0207 	bic.w	r2, r3, #7
 80047ea:	4922      	ldr	r1, [pc, #136]	; (8004874 <HAL_RCC_ClockConfig+0x1c0>)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f2:	4b20      	ldr	r3, [pc, #128]	; (8004874 <HAL_RCC_ClockConfig+0x1c0>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d001      	beq.n	8004804 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e032      	b.n	800486a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004810:	4b19      	ldr	r3, [pc, #100]	; (8004878 <HAL_RCC_ClockConfig+0x1c4>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	4916      	ldr	r1, [pc, #88]	; (8004878 <HAL_RCC_ClockConfig+0x1c4>)
 800481e:	4313      	orrs	r3, r2
 8004820:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b00      	cmp	r3, #0
 800482c:	d009      	beq.n	8004842 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800482e:	4b12      	ldr	r3, [pc, #72]	; (8004878 <HAL_RCC_ClockConfig+0x1c4>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	490e      	ldr	r1, [pc, #56]	; (8004878 <HAL_RCC_ClockConfig+0x1c4>)
 800483e:	4313      	orrs	r3, r2
 8004840:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004842:	f000 f821 	bl	8004888 <HAL_RCC_GetSysClockFreq>
 8004846:	4602      	mov	r2, r0
 8004848:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <HAL_RCC_ClockConfig+0x1c4>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	091b      	lsrs	r3, r3, #4
 800484e:	f003 030f 	and.w	r3, r3, #15
 8004852:	490a      	ldr	r1, [pc, #40]	; (800487c <HAL_RCC_ClockConfig+0x1c8>)
 8004854:	5ccb      	ldrb	r3, [r1, r3]
 8004856:	fa22 f303 	lsr.w	r3, r2, r3
 800485a:	4a09      	ldr	r2, [pc, #36]	; (8004880 <HAL_RCC_ClockConfig+0x1cc>)
 800485c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800485e:	4b09      	ldr	r3, [pc, #36]	; (8004884 <HAL_RCC_ClockConfig+0x1d0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f7fd fbec 	bl	8002040 <HAL_InitTick>

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	40022000 	.word	0x40022000
 8004878:	40021000 	.word	0x40021000
 800487c:	0800c3c8 	.word	0x0800c3c8
 8004880:	20000000 	.word	0x20000000
 8004884:	2000010c 	.word	0x2000010c

08004888 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800488e:	2300      	movs	r3, #0
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	2300      	movs	r3, #0
 8004894:	60bb      	str	r3, [r7, #8]
 8004896:	2300      	movs	r3, #0
 8004898:	617b      	str	r3, [r7, #20]
 800489a:	2300      	movs	r3, #0
 800489c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80048a2:	4b1e      	ldr	r3, [pc, #120]	; (800491c <HAL_RCC_GetSysClockFreq+0x94>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f003 030c 	and.w	r3, r3, #12
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d002      	beq.n	80048b8 <HAL_RCC_GetSysClockFreq+0x30>
 80048b2:	2b08      	cmp	r3, #8
 80048b4:	d003      	beq.n	80048be <HAL_RCC_GetSysClockFreq+0x36>
 80048b6:	e027      	b.n	8004908 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048b8:	4b19      	ldr	r3, [pc, #100]	; (8004920 <HAL_RCC_GetSysClockFreq+0x98>)
 80048ba:	613b      	str	r3, [r7, #16]
      break;
 80048bc:	e027      	b.n	800490e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	0c9b      	lsrs	r3, r3, #18
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	4a17      	ldr	r2, [pc, #92]	; (8004924 <HAL_RCC_GetSysClockFreq+0x9c>)
 80048c8:	5cd3      	ldrb	r3, [r2, r3]
 80048ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d010      	beq.n	80048f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048d6:	4b11      	ldr	r3, [pc, #68]	; (800491c <HAL_RCC_GetSysClockFreq+0x94>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	0c5b      	lsrs	r3, r3, #17
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	4a11      	ldr	r2, [pc, #68]	; (8004928 <HAL_RCC_GetSysClockFreq+0xa0>)
 80048e2:	5cd3      	ldrb	r3, [r2, r3]
 80048e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a0d      	ldr	r2, [pc, #52]	; (8004920 <HAL_RCC_GetSysClockFreq+0x98>)
 80048ea:	fb03 f202 	mul.w	r2, r3, r2
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f4:	617b      	str	r3, [r7, #20]
 80048f6:	e004      	b.n	8004902 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a0c      	ldr	r2, [pc, #48]	; (800492c <HAL_RCC_GetSysClockFreq+0xa4>)
 80048fc:	fb02 f303 	mul.w	r3, r2, r3
 8004900:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	613b      	str	r3, [r7, #16]
      break;
 8004906:	e002      	b.n	800490e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004908:	4b09      	ldr	r3, [pc, #36]	; (8004930 <HAL_RCC_GetSysClockFreq+0xa8>)
 800490a:	613b      	str	r3, [r7, #16]
      break;
 800490c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800490e:	693b      	ldr	r3, [r7, #16]
}
 8004910:	4618      	mov	r0, r3
 8004912:	371c      	adds	r7, #28
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	40021000 	.word	0x40021000
 8004920:	00f42400 	.word	0x00f42400
 8004924:	0800cbbc 	.word	0x0800cbbc
 8004928:	0800cbcc 	.word	0x0800cbcc
 800492c:	003d0900 	.word	0x003d0900
 8004930:	007a1200 	.word	0x007a1200

08004934 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800493c:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <RCC_Delay+0x34>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a0a      	ldr	r2, [pc, #40]	; (800496c <RCC_Delay+0x38>)
 8004942:	fba2 2303 	umull	r2, r3, r2, r3
 8004946:	0a5b      	lsrs	r3, r3, #9
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	fb02 f303 	mul.w	r3, r2, r3
 800494e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004950:	bf00      	nop
  }
  while (Delay --);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	1e5a      	subs	r2, r3, #1
 8004956:	60fa      	str	r2, [r7, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1f9      	bne.n	8004950 <RCC_Delay+0x1c>
}
 800495c:	bf00      	nop
 800495e:	bf00      	nop
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	4770      	bx	lr
 8004968:	20000000 	.word	0x20000000
 800496c:	10624dd3 	.word	0x10624dd3

08004970 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	613b      	str	r3, [r7, #16]
 800497c:	2300      	movs	r3, #0
 800497e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b00      	cmp	r3, #0
 800498a:	d07d      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800498c:	2300      	movs	r3, #0
 800498e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004990:	4b4f      	ldr	r3, [pc, #316]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10d      	bne.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800499c:	4b4c      	ldr	r3, [pc, #304]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	4a4b      	ldr	r2, [pc, #300]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a6:	61d3      	str	r3, [r2, #28]
 80049a8:	4b49      	ldr	r3, [pc, #292]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b0:	60bb      	str	r3, [r7, #8]
 80049b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049b4:	2301      	movs	r3, #1
 80049b6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b8:	4b46      	ldr	r3, [pc, #280]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d118      	bne.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049c4:	4b43      	ldr	r3, [pc, #268]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a42      	ldr	r2, [pc, #264]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049d0:	f7fd fb78 	bl	80020c4 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d6:	e008      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049d8:	f7fd fb74 	bl	80020c4 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b64      	cmp	r3, #100	; 0x64
 80049e4:	d901      	bls.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e06d      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ea:	4b3a      	ldr	r3, [pc, #232]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0f0      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049f6:	4b36      	ldr	r3, [pc, #216]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d02e      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d027      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a14:	4b2e      	ldr	r3, [pc, #184]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a1e:	4b2e      	ldr	r3, [pc, #184]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a20:	2201      	movs	r2, #1
 8004a22:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a24:	4b2c      	ldr	r3, [pc, #176]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a2a:	4a29      	ldr	r2, [pc, #164]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d014      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3a:	f7fd fb43 	bl	80020c4 <HAL_GetTick>
 8004a3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a40:	e00a      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a42:	f7fd fb3f 	bl	80020c4 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e036      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a58:	4b1d      	ldr	r3, [pc, #116]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0ee      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a64:	4b1a      	ldr	r3, [pc, #104]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	4917      	ldr	r1, [pc, #92]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a76:	7dfb      	ldrb	r3, [r7, #23]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d105      	bne.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a7c:	4b14      	ldr	r3, [pc, #80]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	4a13      	ldr	r2, [pc, #76]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d008      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a94:	4b0e      	ldr	r3, [pc, #56]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	490b      	ldr	r1, [pc, #44]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0310 	and.w	r3, r3, #16
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d008      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ab2:	4b07      	ldr	r3, [pc, #28]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	4904      	ldr	r1, [pc, #16]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	40007000 	.word	0x40007000
 8004ad8:	42420440 	.word	0x42420440

08004adc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e076      	b.n	8004bdc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d108      	bne.n	8004b08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004afe:	d009      	beq.n	8004b14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	61da      	str	r2, [r3, #28]
 8004b06:	e005      	b.n	8004b14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fc f92e 	bl	8000d90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b66:	431a      	orrs	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	431a      	orrs	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b98:	ea42 0103 	orr.w	r1, r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	0c1a      	lsrs	r2, r3, #16
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f002 0204 	and.w	r2, r2, #4
 8004bba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69da      	ldr	r2, [r3, #28]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b088      	sub	sp, #32
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_SPI_Transmit+0x22>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e12d      	b.n	8004e62 <HAL_SPI_Transmit+0x27e>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c0e:	f7fd fa59 	bl	80020c4 <HAL_GetTick>
 8004c12:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c14:	88fb      	ldrh	r3, [r7, #6]
 8004c16:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d002      	beq.n	8004c2a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c24:	2302      	movs	r3, #2
 8004c26:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c28:	e116      	b.n	8004e58 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <HAL_SPI_Transmit+0x52>
 8004c30:	88fb      	ldrh	r3, [r7, #6]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d102      	bne.n	8004c3c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c3a:	e10d      	b.n	8004e58 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2203      	movs	r2, #3
 8004c40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	88fa      	ldrh	r2, [r7, #6]
 8004c54:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	88fa      	ldrh	r2, [r7, #6]
 8004c5a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c82:	d10f      	bne.n	8004ca4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c92:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ca2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cae:	2b40      	cmp	r3, #64	; 0x40
 8004cb0:	d007      	beq.n	8004cc2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cca:	d14f      	bne.n	8004d6c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <HAL_SPI_Transmit+0xf6>
 8004cd4:	8afb      	ldrh	r3, [r7, #22]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d142      	bne.n	8004d60 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cde:	881a      	ldrh	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cea:	1c9a      	adds	r2, r3, #2
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004cfe:	e02f      	b.n	8004d60 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d112      	bne.n	8004d34 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d12:	881a      	ldrh	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1e:	1c9a      	adds	r2, r3, #2
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d32:	e015      	b.n	8004d60 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d34:	f7fd f9c6 	bl	80020c4 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d803      	bhi.n	8004d4c <HAL_SPI_Transmit+0x168>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4a:	d102      	bne.n	8004d52 <HAL_SPI_Transmit+0x16e>
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004d5e:	e07b      	b.n	8004e58 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1ca      	bne.n	8004d00 <HAL_SPI_Transmit+0x11c>
 8004d6a:	e050      	b.n	8004e0e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d002      	beq.n	8004d7a <HAL_SPI_Transmit+0x196>
 8004d74:	8afb      	ldrh	r3, [r7, #22]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d144      	bne.n	8004e04 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	330c      	adds	r3, #12
 8004d84:	7812      	ldrb	r2, [r2, #0]
 8004d86:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004da0:	e030      	b.n	8004e04 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d113      	bne.n	8004dd8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	330c      	adds	r3, #12
 8004dba:	7812      	ldrb	r2, [r2, #0]
 8004dbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	86da      	strh	r2, [r3, #54]	; 0x36
 8004dd6:	e015      	b.n	8004e04 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dd8:	f7fd f974 	bl	80020c4 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d803      	bhi.n	8004df0 <HAL_SPI_Transmit+0x20c>
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dee:	d102      	bne.n	8004df6 <HAL_SPI_Transmit+0x212>
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004e02:	e029      	b.n	8004e58 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1c9      	bne.n	8004da2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	6839      	ldr	r1, [r7, #0]
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 f8b2 	bl	8004f7c <SPI_EndRxTxTransaction>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2220      	movs	r2, #32
 8004e22:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10a      	bne.n	8004e42 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	613b      	str	r3, [r7, #16]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	613b      	str	r3, [r7, #16]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	77fb      	strb	r3, [r7, #31]
 8004e4e:	e003      	b.n	8004e58 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e60:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3720      	adds	r7, #32
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e7c:	f7fd f922 	bl	80020c4 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e84:	1a9b      	subs	r3, r3, r2
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	4413      	add	r3, r2
 8004e8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e8c:	f7fd f91a 	bl	80020c4 <HAL_GetTick>
 8004e90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e92:	4b39      	ldr	r3, [pc, #228]	; (8004f78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	015b      	lsls	r3, r3, #5
 8004e98:	0d1b      	lsrs	r3, r3, #20
 8004e9a:	69fa      	ldr	r2, [r7, #28]
 8004e9c:	fb02 f303 	mul.w	r3, r2, r3
 8004ea0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ea2:	e054      	b.n	8004f4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eaa:	d050      	beq.n	8004f4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004eac:	f7fd f90a 	bl	80020c4 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d902      	bls.n	8004ec2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d13d      	bne.n	8004f3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ed0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eda:	d111      	bne.n	8004f00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ee4:	d004      	beq.n	8004ef0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eee:	d107      	bne.n	8004f00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004efe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f08:	d10f      	bne.n	8004f2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e017      	b.n	8004f6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4013      	ands	r3, r2
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	bf0c      	ite	eq
 8004f5e:	2301      	moveq	r3, #1
 8004f60:	2300      	movne	r3, #0
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	461a      	mov	r2, r3
 8004f66:	79fb      	ldrb	r3, [r7, #7]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d19b      	bne.n	8004ea4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3720      	adds	r7, #32
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	20000000 	.word	0x20000000

08004f7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af02      	add	r7, sp, #8
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2180      	movs	r1, #128	; 0x80
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f7ff ff6a 	bl	8004e6c <SPI_WaitFlagStateUntilTimeout>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d007      	beq.n	8004fae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa2:	f043 0220 	orr.w	r2, r3, #32
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e000      	b.n	8004fb0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004fb8:	b084      	sub	sp, #16
 8004fba:	b480      	push	{r7}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	f107 0014 	add.w	r0, r7, #20
 8004fc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bc80      	pop	{r7}
 8004fd4:	b004      	add	sp, #16
 8004fd6:	4770      	bx	lr

08004fd8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004fe8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004fec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bc80      	pop	{r7}
 8005002:	4770      	bx	lr

08005004 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800500c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005010:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005018:	b29a      	uxth	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	b29b      	uxth	r3, r3
 800501e:	43db      	mvns	r3, r3
 8005020:	b29b      	uxth	r3, r3
 8005022:	4013      	ands	r3, r2
 8005024:	b29a      	uxth	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	bc80      	pop	{r7}
 8005036:	4770      	bx	lr

08005038 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	460b      	mov	r3, r1
 8005042:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	bc80      	pop	{r7}
 800504e:	4770      	bx	lr

08005050 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005050:	b084      	sub	sp, #16
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	f107 0014 	add.w	r0, r7, #20
 800505e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	bc80      	pop	{r7}
 800508c:	b004      	add	sp, #16
 800508e:	4770      	bx	lr

08005090 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005090:	b480      	push	{r7}
 8005092:	b09d      	sub	sp, #116	; 0x74
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	881b      	ldrh	r3, [r3, #0]
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80050b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	78db      	ldrb	r3, [r3, #3]
 80050be:	2b03      	cmp	r3, #3
 80050c0:	d81f      	bhi.n	8005102 <USB_ActivateEndpoint+0x72>
 80050c2:	a201      	add	r2, pc, #4	; (adr r2, 80050c8 <USB_ActivateEndpoint+0x38>)
 80050c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c8:	080050d9 	.word	0x080050d9
 80050cc:	080050f5 	.word	0x080050f5
 80050d0:	0800510b 	.word	0x0800510b
 80050d4:	080050e7 	.word	0x080050e7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80050d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80050dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80050e4:	e012      	b.n	800510c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80050e6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80050ea:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80050ee:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80050f2:	e00b      	b.n	800510c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80050f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80050f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050fc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005100:	e004      	b.n	800510c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005108:	e000      	b.n	800510c <USB_ActivateEndpoint+0x7c>
      break;
 800510a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	441a      	add	r2, r3
 8005116:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800511a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800511e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800512a:	b29b      	uxth	r3, r3
 800512c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	b29b      	uxth	r3, r3
 800513c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005144:	b29a      	uxth	r2, r3
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	b29b      	uxth	r3, r3
 800514c:	4313      	orrs	r3, r2
 800514e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	441a      	add	r2, r3
 800515c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800516c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005170:	b29b      	uxth	r3, r3
 8005172:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	7b1b      	ldrb	r3, [r3, #12]
 8005178:	2b00      	cmp	r3, #0
 800517a:	f040 8178 	bne.w	800546e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	785b      	ldrb	r3, [r3, #1]
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 8084 	beq.w	8005290 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	61bb      	str	r3, [r7, #24]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005192:	b29b      	uxth	r3, r3
 8005194:	461a      	mov	r2, r3
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	4413      	add	r3, r2
 800519a:	61bb      	str	r3, [r7, #24]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	011a      	lsls	r2, r3, #4
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	88db      	ldrh	r3, [r3, #6]
 80051b0:	085b      	lsrs	r3, r3, #1
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	881b      	ldrh	r3, [r3, #0]
 80051c8:	827b      	strh	r3, [r7, #18]
 80051ca:	8a7b      	ldrh	r3, [r7, #18]
 80051cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d01b      	beq.n	800520c <USB_ActivateEndpoint+0x17c>
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ea:	823b      	strh	r3, [r7, #16]
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	441a      	add	r2, r3
 80051f6:	8a3b      	ldrh	r3, [r7, #16]
 80051f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005200:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005204:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005208:	b29b      	uxth	r3, r3
 800520a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	78db      	ldrb	r3, [r3, #3]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d020      	beq.n	8005256 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	881b      	ldrh	r3, [r3, #0]
 8005220:	b29b      	uxth	r3, r3
 8005222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800522a:	81bb      	strh	r3, [r7, #12]
 800522c:	89bb      	ldrh	r3, [r7, #12]
 800522e:	f083 0320 	eor.w	r3, r3, #32
 8005232:	81bb      	strh	r3, [r7, #12]
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	441a      	add	r2, r3
 800523e:	89bb      	ldrh	r3, [r7, #12]
 8005240:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005244:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005248:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800524c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005250:	b29b      	uxth	r3, r3
 8005252:	8013      	strh	r3, [r2, #0]
 8005254:	e2d5      	b.n	8005802 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	881b      	ldrh	r3, [r3, #0]
 8005262:	b29b      	uxth	r3, r3
 8005264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800526c:	81fb      	strh	r3, [r7, #14]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	441a      	add	r2, r3
 8005278:	89fb      	ldrh	r3, [r7, #14]
 800527a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800527e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800528a:	b29b      	uxth	r3, r3
 800528c:	8013      	strh	r3, [r2, #0]
 800528e:	e2b8      	b.n	8005802 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	633b      	str	r3, [r7, #48]	; 0x30
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800529a:	b29b      	uxth	r3, r3
 800529c:	461a      	mov	r2, r3
 800529e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a0:	4413      	add	r3, r2
 80052a2:	633b      	str	r3, [r7, #48]	; 0x30
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	011a      	lsls	r2, r3, #4
 80052aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80052b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	88db      	ldrh	r3, [r3, #6]
 80052b8:	085b      	lsrs	r3, r3, #1
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	b29a      	uxth	r2, r3
 80052c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	461a      	mov	r2, r3
 80052d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d4:	4413      	add	r3, r2
 80052d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	011a      	lsls	r2, r3, #4
 80052de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e0:	4413      	add	r3, r2
 80052e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052e6:	627b      	str	r3, [r7, #36]	; 0x24
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	801a      	strh	r2, [r3, #0]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	2b3e      	cmp	r3, #62	; 0x3e
 80052fe:	d91d      	bls.n	800533c <USB_ActivateEndpoint+0x2ac>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	095b      	lsrs	r3, r3, #5
 8005306:	66bb      	str	r3, [r7, #104]	; 0x68
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	f003 031f 	and.w	r3, r3, #31
 8005310:	2b00      	cmp	r3, #0
 8005312:	d102      	bne.n	800531a <USB_ActivateEndpoint+0x28a>
 8005314:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005316:	3b01      	subs	r3, #1
 8005318:	66bb      	str	r3, [r7, #104]	; 0x68
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	b29a      	uxth	r2, r3
 8005320:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005322:	b29b      	uxth	r3, r3
 8005324:	029b      	lsls	r3, r3, #10
 8005326:	b29b      	uxth	r3, r3
 8005328:	4313      	orrs	r3, r2
 800532a:	b29b      	uxth	r3, r3
 800532c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005334:	b29a      	uxth	r2, r3
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	801a      	strh	r2, [r3, #0]
 800533a:	e026      	b.n	800538a <USB_ActivateEndpoint+0x2fa>
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10a      	bne.n	800535a <USB_ActivateEndpoint+0x2ca>
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	881b      	ldrh	r3, [r3, #0]
 8005348:	b29b      	uxth	r3, r3
 800534a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800534e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005352:	b29a      	uxth	r2, r3
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	801a      	strh	r2, [r3, #0]
 8005358:	e017      	b.n	800538a <USB_ActivateEndpoint+0x2fa>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	085b      	lsrs	r3, r3, #1
 8005360:	66bb      	str	r3, [r7, #104]	; 0x68
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <USB_ActivateEndpoint+0x2e4>
 800536e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005370:	3301      	adds	r3, #1
 8005372:	66bb      	str	r3, [r7, #104]	; 0x68
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	881b      	ldrh	r3, [r3, #0]
 8005378:	b29a      	uxth	r2, r3
 800537a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800537c:	b29b      	uxth	r3, r3
 800537e:	029b      	lsls	r3, r3, #10
 8005380:	b29b      	uxth	r3, r3
 8005382:	4313      	orrs	r3, r2
 8005384:	b29a      	uxth	r2, r3
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4413      	add	r3, r2
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	847b      	strh	r3, [r7, #34]	; 0x22
 8005398:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800539a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d01b      	beq.n	80053da <USB_ActivateEndpoint+0x34a>
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b8:	843b      	strh	r3, [r7, #32]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	441a      	add	r2, r3
 80053c4:	8c3b      	ldrh	r3, [r7, #32]
 80053c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d124      	bne.n	800542c <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f8:	83bb      	strh	r3, [r7, #28]
 80053fa:	8bbb      	ldrh	r3, [r7, #28]
 80053fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005400:	83bb      	strh	r3, [r7, #28]
 8005402:	8bbb      	ldrh	r3, [r7, #28]
 8005404:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005408:	83bb      	strh	r3, [r7, #28]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	441a      	add	r2, r3
 8005414:	8bbb      	ldrh	r3, [r7, #28]
 8005416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800541a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800541e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005426:	b29b      	uxth	r3, r3
 8005428:	8013      	strh	r3, [r2, #0]
 800542a:	e1ea      	b.n	8005802 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	b29b      	uxth	r3, r3
 800543a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800543e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005442:	83fb      	strh	r3, [r7, #30]
 8005444:	8bfb      	ldrh	r3, [r7, #30]
 8005446:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800544a:	83fb      	strh	r3, [r7, #30]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	441a      	add	r2, r3
 8005456:	8bfb      	ldrh	r3, [r7, #30]
 8005458:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800545c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005468:	b29b      	uxth	r3, r3
 800546a:	8013      	strh	r3, [r2, #0]
 800546c:	e1c9      	b.n	8005802 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	78db      	ldrb	r3, [r3, #3]
 8005472:	2b02      	cmp	r3, #2
 8005474:	d11e      	bne.n	80054b4 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	b29b      	uxth	r3, r3
 8005484:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	441a      	add	r2, r3
 800549a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800549e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054a6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80054aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	8013      	strh	r3, [r2, #0]
 80054b2:	e01d      	b.n	80054f0 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80054c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	441a      	add	r2, r3
 80054d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80054dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	461a      	mov	r2, r3
 80054fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005500:	4413      	add	r3, r2
 8005502:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	011a      	lsls	r2, r3, #4
 800550a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800550c:	4413      	add	r3, r2
 800550e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005512:	65bb      	str	r3, [r7, #88]	; 0x58
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	891b      	ldrh	r3, [r3, #8]
 8005518:	085b      	lsrs	r3, r3, #1
 800551a:	b29b      	uxth	r3, r3
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005522:	801a      	strh	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	657b      	str	r3, [r7, #84]	; 0x54
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800552e:	b29b      	uxth	r3, r3
 8005530:	461a      	mov	r2, r3
 8005532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005534:	4413      	add	r3, r2
 8005536:	657b      	str	r3, [r7, #84]	; 0x54
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	011a      	lsls	r2, r3, #4
 800553e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005540:	4413      	add	r3, r2
 8005542:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005546:	653b      	str	r3, [r7, #80]	; 0x50
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	895b      	ldrh	r3, [r3, #10]
 800554c:	085b      	lsrs	r3, r3, #1
 800554e:	b29b      	uxth	r3, r3
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	b29a      	uxth	r2, r3
 8005554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005556:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	785b      	ldrb	r3, [r3, #1]
 800555c:	2b00      	cmp	r3, #0
 800555e:	f040 8093 	bne.w	8005688 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005572:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d01b      	beq.n	80055b6 <USB_ActivateEndpoint+0x526>
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	b29b      	uxth	r3, r3
 800558c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005594:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	441a      	add	r2, r3
 80055a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80055a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	881b      	ldrh	r3, [r3, #0]
 80055c2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80055c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80055c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d01b      	beq.n	8005606 <USB_ActivateEndpoint+0x576>
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	b29b      	uxth	r3, r3
 80055dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	441a      	add	r2, r3
 80055f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80055f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005602:	b29b      	uxth	r3, r3
 8005604:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	b29b      	uxth	r3, r3
 8005614:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800561c:	873b      	strh	r3, [r7, #56]	; 0x38
 800561e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005620:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005624:	873b      	strh	r3, [r7, #56]	; 0x38
 8005626:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005628:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800562c:	873b      	strh	r3, [r7, #56]	; 0x38
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	441a      	add	r2, r3
 8005638:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800563a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800563e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800564a:	b29b      	uxth	r3, r3
 800564c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	b29b      	uxth	r3, r3
 800565c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005664:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	441a      	add	r2, r3
 8005670:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800567a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800567e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005682:	b29b      	uxth	r3, r3
 8005684:	8013      	strh	r3, [r2, #0]
 8005686:	e0bc      	b.n	8005802 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005698:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800569c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d01d      	beq.n	80056e0 <USB_ActivateEndpoint+0x650>
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ba:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	441a      	add	r2, r3
 80056c8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80056cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056dc:	b29b      	uxth	r3, r3
 80056de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80056f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80056f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d01d      	beq.n	8005738 <USB_ActivateEndpoint+0x6a8>
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	881b      	ldrh	r3, [r3, #0]
 8005708:	b29b      	uxth	r3, r3
 800570a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800570e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005712:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	441a      	add	r2, r3
 8005720:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800572c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005730:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005734:	b29b      	uxth	r3, r3
 8005736:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	78db      	ldrb	r3, [r3, #3]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d024      	beq.n	800578a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	b29b      	uxth	r3, r3
 800574e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005756:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800575a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800575e:	f083 0320 	eor.w	r3, r3, #32
 8005762:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	441a      	add	r2, r3
 8005770:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005774:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005778:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800577c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005784:	b29b      	uxth	r3, r3
 8005786:	8013      	strh	r3, [r2, #0]
 8005788:	e01d      	b.n	80057c6 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	881b      	ldrh	r3, [r3, #0]
 8005796:	b29b      	uxth	r3, r3
 8005798:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057a0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	441a      	add	r2, r3
 80057ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80057b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	441a      	add	r2, r3
 80057ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80057ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057fe:	b29b      	uxth	r3, r3
 8005800:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005802:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005806:	4618      	mov	r0, r3
 8005808:	3774      	adds	r7, #116	; 0x74
 800580a:	46bd      	mov	sp, r7
 800580c:	bc80      	pop	{r7}
 800580e:	4770      	bx	lr

08005810 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005810:	b480      	push	{r7}
 8005812:	b08d      	sub	sp, #52	; 0x34
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	7b1b      	ldrb	r3, [r3, #12]
 800581e:	2b00      	cmp	r3, #0
 8005820:	f040 808e 	bne.w	8005940 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	785b      	ldrb	r3, [r3, #1]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d044      	beq.n	80058b6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	881b      	ldrh	r3, [r3, #0]
 8005838:	81bb      	strh	r3, [r7, #12]
 800583a:	89bb      	ldrh	r3, [r7, #12]
 800583c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005840:	2b00      	cmp	r3, #0
 8005842:	d01b      	beq.n	800587c <USB_DeactivateEndpoint+0x6c>
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	881b      	ldrh	r3, [r3, #0]
 8005850:	b29b      	uxth	r3, r3
 8005852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585a:	817b      	strh	r3, [r7, #10]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	441a      	add	r2, r3
 8005866:	897b      	ldrh	r3, [r7, #10]
 8005868:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800586c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005874:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005878:	b29b      	uxth	r3, r3
 800587a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	881b      	ldrh	r3, [r3, #0]
 8005888:	b29b      	uxth	r3, r3
 800588a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800588e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005892:	813b      	strh	r3, [r7, #8]
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	441a      	add	r2, r3
 800589e:	893b      	ldrh	r3, [r7, #8]
 80058a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	8013      	strh	r3, [r2, #0]
 80058b4:	e192      	b.n	8005bdc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	827b      	strh	r3, [r7, #18]
 80058c4:	8a7b      	ldrh	r3, [r7, #18]
 80058c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d01b      	beq.n	8005906 <USB_DeactivateEndpoint+0xf6>
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	b29b      	uxth	r3, r3
 80058dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e4:	823b      	strh	r3, [r7, #16]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	441a      	add	r2, r3
 80058f0:	8a3b      	ldrh	r3, [r7, #16]
 80058f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005902:	b29b      	uxth	r3, r3
 8005904:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4413      	add	r3, r2
 8005910:	881b      	ldrh	r3, [r3, #0]
 8005912:	b29b      	uxth	r3, r3
 8005914:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591c:	81fb      	strh	r3, [r7, #14]
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	441a      	add	r2, r3
 8005928:	89fb      	ldrh	r3, [r7, #14]
 800592a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800592e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800593a:	b29b      	uxth	r3, r3
 800593c:	8013      	strh	r3, [r2, #0]
 800593e:	e14d      	b.n	8005bdc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	785b      	ldrb	r3, [r3, #1]
 8005944:	2b00      	cmp	r3, #0
 8005946:	f040 80a5 	bne.w	8005a94 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	881b      	ldrh	r3, [r3, #0]
 8005956:	843b      	strh	r3, [r7, #32]
 8005958:	8c3b      	ldrh	r3, [r7, #32]
 800595a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d01b      	beq.n	800599a <USB_DeactivateEndpoint+0x18a>
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	b29b      	uxth	r3, r3
 8005970:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005978:	83fb      	strh	r3, [r7, #30]
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	441a      	add	r2, r3
 8005984:	8bfb      	ldrh	r3, [r7, #30]
 8005986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800598a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800598e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005996:	b29b      	uxth	r3, r3
 8005998:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4413      	add	r3, r2
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	83bb      	strh	r3, [r7, #28]
 80059a8:	8bbb      	ldrh	r3, [r7, #28]
 80059aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d01b      	beq.n	80059ea <USB_DeactivateEndpoint+0x1da>
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	881b      	ldrh	r3, [r3, #0]
 80059be:	b29b      	uxth	r3, r3
 80059c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c8:	837b      	strh	r3, [r7, #26]
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	441a      	add	r2, r3
 80059d4:	8b7b      	ldrh	r3, [r7, #26]
 80059d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a00:	833b      	strh	r3, [r7, #24]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	441a      	add	r2, r3
 8005a0c:	8b3b      	ldrh	r3, [r7, #24]
 8005a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4413      	add	r3, r2
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a38:	82fb      	strh	r3, [r7, #22]
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	441a      	add	r2, r3
 8005a44:	8afb      	ldrh	r3, [r7, #22]
 8005a46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	881b      	ldrh	r3, [r3, #0]
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a70:	82bb      	strh	r3, [r7, #20]
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	441a      	add	r2, r3
 8005a7c:	8abb      	ldrh	r3, [r7, #20]
 8005a7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	8013      	strh	r3, [r2, #0]
 8005a92:	e0a3      	b.n	8005bdc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	4413      	add	r3, r2
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005aa2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d01b      	beq.n	8005ae4 <USB_DeactivateEndpoint+0x2d4>
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	441a      	add	r2, r3
 8005ace:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005ad0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ad4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ad8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4413      	add	r3, r2
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005af2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d01b      	beq.n	8005b34 <USB_DeactivateEndpoint+0x324>
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	881b      	ldrh	r3, [r3, #0]
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b12:	853b      	strh	r3, [r7, #40]	; 0x28
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	441a      	add	r2, r3
 8005b1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	441a      	add	r2, r3
 8005b56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b82:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	441a      	add	r2, r3
 8005b8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bba:	847b      	strh	r3, [r7, #34]	; 0x22
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	441a      	add	r2, r3
 8005bc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3734      	adds	r7, #52	; 0x34
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bc80      	pop	{r7}
 8005be6:	4770      	bx	lr

08005be8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b0c2      	sub	sp, #264	; 0x108
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bf6:	6018      	str	r0, [r3, #0]
 8005bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c00:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	785b      	ldrb	r3, [r3, #1]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	f040 86b7 	bne.w	8006982 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	699a      	ldr	r2, [r3, #24]
 8005c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d908      	bls.n	8005c42 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005c40:	e007      	b.n	8005c52 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005c42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	7b1b      	ldrb	r3, [r3, #12]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d13a      	bne.n	8005cd8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005c62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6959      	ldr	r1, [r3, #20]
 8005c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	88da      	ldrh	r2, [r3, #6]
 8005c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005c84:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005c88:	6800      	ldr	r0, [r0, #0]
 8005c8a:	f001 fc9c 	bl	80075c6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	613b      	str	r3, [r7, #16]
 8005c9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	461a      	mov	r2, r3
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	4413      	add	r3, r2
 8005cb0:	613b      	str	r3, [r7, #16]
 8005cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	011a      	lsls	r2, r3, #4
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cc8:	60fb      	str	r3, [r7, #12]
 8005cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	801a      	strh	r2, [r3, #0]
 8005cd4:	f000 be1f 	b.w	8006916 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	78db      	ldrb	r3, [r3, #3]
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	f040 8462 	bne.w	80065ae <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6a1a      	ldr	r2, [r3, #32]
 8005cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	f240 83df 	bls.w	80064c6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d2e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	441a      	add	r2, r3
 8005d4c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005d50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d58:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6a1a      	ldr	r2, [r3, #32]
 8005d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d74:	1ad2      	subs	r2, r2, r3
 8005d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 81c7 	beq.w	8006138 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	633b      	str	r3, [r7, #48]	; 0x30
 8005db6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	785b      	ldrb	r3, [r3, #1]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d177      	bne.n	8005eb6 <USB_EPStartXfer+0x2ce>
 8005dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	461a      	mov	r2, r3
 8005de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de6:	4413      	add	r3, r2
 8005de8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	011a      	lsls	r2, r3, #4
 8005df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e00:	627b      	str	r3, [r7, #36]	; 0x24
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	801a      	strh	r2, [r3, #0]
 8005e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e16:	2b3e      	cmp	r3, #62	; 0x3e
 8005e18:	d921      	bls.n	8005e5e <USB_EPStartXfer+0x276>
 8005e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e1e:	095b      	lsrs	r3, r3, #5
 8005e20:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e28:	f003 031f 	and.w	r3, r3, #31
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d104      	bne.n	8005e3a <USB_EPStartXfer+0x252>
 8005e30:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e34:	3b01      	subs	r3, #1
 8005e36:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	881b      	ldrh	r3, [r3, #0]
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	029b      	lsls	r3, r3, #10
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	801a      	strh	r2, [r3, #0]
 8005e5c:	e050      	b.n	8005f00 <USB_EPStartXfer+0x318>
 8005e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10a      	bne.n	8005e7c <USB_EPStartXfer+0x294>
 8005e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	801a      	strh	r2, [r3, #0]
 8005e7a:	e041      	b.n	8005f00 <USB_EPStartXfer+0x318>
 8005e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e80:	085b      	lsrs	r3, r3, #1
 8005e82:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d004      	beq.n	8005e9c <USB_EPStartXfer+0x2b4>
 8005e92:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e96:	3301      	adds	r3, #1
 8005e98:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	029b      	lsls	r3, r3, #10
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	4313      	orrs	r3, r2
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	801a      	strh	r2, [r3, #0]
 8005eb4:	e024      	b.n	8005f00 <USB_EPStartXfer+0x318>
 8005eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	785b      	ldrb	r3, [r3, #1]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d11c      	bne.n	8005f00 <USB_EPStartXfer+0x318>
 8005ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eda:	4413      	add	r3, r2
 8005edc:	633b      	str	r3, [r7, #48]	; 0x30
 8005ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	011a      	lsls	r2, r3, #4
 8005eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eee:	4413      	add	r3, r2
 8005ef0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	895b      	ldrh	r3, [r3, #10]
 8005f0c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6959      	ldr	r1, [r3, #20]
 8005f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005f26:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f2a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f2e:	6800      	ldr	r0, [r0, #0]
 8005f30:	f001 fb49 	bl	80075c6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	695a      	ldr	r2, [r3, #20]
 8005f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f44:	441a      	add	r2, r3
 8005f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6a1a      	ldr	r2, [r3, #32]
 8005f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d90f      	bls.n	8005f8e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6a1a      	ldr	r2, [r3, #32]
 8005f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f7e:	1ad2      	subs	r2, r2, r3
 8005f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	621a      	str	r2, [r3, #32]
 8005f8c:	e00e      	b.n	8005fac <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	785b      	ldrb	r3, [r3, #1]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d177      	bne.n	80060ac <USB_EPStartXfer+0x4c4>
 8005fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	61bb      	str	r3, [r7, #24]
 8005fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	461a      	mov	r2, r3
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	4413      	add	r3, r2
 8005fde:	61bb      	str	r3, [r7, #24]
 8005fe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	011a      	lsls	r2, r3, #4
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ff6:	617b      	str	r3, [r7, #20]
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006002:	b29a      	uxth	r2, r3
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	801a      	strh	r2, [r3, #0]
 8006008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800600c:	2b3e      	cmp	r3, #62	; 0x3e
 800600e:	d921      	bls.n	8006054 <USB_EPStartXfer+0x46c>
 8006010:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006014:	095b      	lsrs	r3, r3, #5
 8006016:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800601a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800601e:	f003 031f 	and.w	r3, r3, #31
 8006022:	2b00      	cmp	r3, #0
 8006024:	d104      	bne.n	8006030 <USB_EPStartXfer+0x448>
 8006026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800602a:	3b01      	subs	r3, #1
 800602c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	b29a      	uxth	r2, r3
 8006036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800603a:	b29b      	uxth	r3, r3
 800603c:	029b      	lsls	r3, r3, #10
 800603e:	b29b      	uxth	r3, r3
 8006040:	4313      	orrs	r3, r2
 8006042:	b29b      	uxth	r3, r3
 8006044:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006048:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800604c:	b29a      	uxth	r2, r3
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	801a      	strh	r2, [r3, #0]
 8006052:	e056      	b.n	8006102 <USB_EPStartXfer+0x51a>
 8006054:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10a      	bne.n	8006072 <USB_EPStartXfer+0x48a>
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	b29b      	uxth	r3, r3
 8006062:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006066:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800606a:	b29a      	uxth	r2, r3
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	801a      	strh	r2, [r3, #0]
 8006070:	e047      	b.n	8006102 <USB_EPStartXfer+0x51a>
 8006072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006076:	085b      	lsrs	r3, r3, #1
 8006078:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800607c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b00      	cmp	r3, #0
 8006086:	d004      	beq.n	8006092 <USB_EPStartXfer+0x4aa>
 8006088:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800608c:	3301      	adds	r3, #1
 800608e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	b29a      	uxth	r2, r3
 8006098:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800609c:	b29b      	uxth	r3, r3
 800609e:	029b      	lsls	r3, r3, #10
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	4313      	orrs	r3, r2
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	801a      	strh	r2, [r3, #0]
 80060aa:	e02a      	b.n	8006102 <USB_EPStartXfer+0x51a>
 80060ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	785b      	ldrb	r3, [r3, #1]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d122      	bne.n	8006102 <USB_EPStartXfer+0x51a>
 80060bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	623b      	str	r3, [r7, #32]
 80060c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	461a      	mov	r2, r3
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	4413      	add	r3, r2
 80060de:	623b      	str	r3, [r7, #32]
 80060e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	011a      	lsls	r2, r3, #4
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	4413      	add	r3, r2
 80060f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060f6:	61fb      	str	r3, [r7, #28]
 80060f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	891b      	ldrh	r3, [r3, #8]
 800610e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6959      	ldr	r1, [r3, #20]
 800611e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006122:	b29b      	uxth	r3, r3
 8006124:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006128:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800612c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006130:	6800      	ldr	r0, [r0, #0]
 8006132:	f001 fa48 	bl	80075c6 <USB_WritePMA>
 8006136:	e3ee      	b.n	8006916 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800613c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	785b      	ldrb	r3, [r3, #1]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d177      	bne.n	8006238 <USB_EPStartXfer+0x650>
 8006148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800614c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	64bb      	str	r3, [r7, #72]	; 0x48
 8006154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006158:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006162:	b29b      	uxth	r3, r3
 8006164:	461a      	mov	r2, r3
 8006166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006168:	4413      	add	r3, r2
 800616a:	64bb      	str	r3, [r7, #72]	; 0x48
 800616c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	011a      	lsls	r2, r3, #4
 800617a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800617c:	4413      	add	r3, r2
 800617e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006182:	647b      	str	r3, [r7, #68]	; 0x44
 8006184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	b29b      	uxth	r3, r3
 800618a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800618e:	b29a      	uxth	r2, r3
 8006190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006192:	801a      	strh	r2, [r3, #0]
 8006194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006198:	2b3e      	cmp	r3, #62	; 0x3e
 800619a:	d921      	bls.n	80061e0 <USB_EPStartXfer+0x5f8>
 800619c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061a0:	095b      	lsrs	r3, r3, #5
 80061a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80061a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061aa:	f003 031f 	and.w	r3, r3, #31
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d104      	bne.n	80061bc <USB_EPStartXfer+0x5d4>
 80061b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061b6:	3b01      	subs	r3, #1
 80061b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80061bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	029b      	lsls	r3, r3, #10
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	4313      	orrs	r3, r2
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061d8:	b29a      	uxth	r2, r3
 80061da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061dc:	801a      	strh	r2, [r3, #0]
 80061de:	e056      	b.n	800628e <USB_EPStartXfer+0x6a6>
 80061e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10a      	bne.n	80061fe <USB_EPStartXfer+0x616>
 80061e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061ea:	881b      	ldrh	r3, [r3, #0]
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061fa:	801a      	strh	r2, [r3, #0]
 80061fc:	e047      	b.n	800628e <USB_EPStartXfer+0x6a6>
 80061fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006202:	085b      	lsrs	r3, r3, #1
 8006204:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b00      	cmp	r3, #0
 8006212:	d004      	beq.n	800621e <USB_EPStartXfer+0x636>
 8006214:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006218:	3301      	adds	r3, #1
 800621a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800621e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	b29a      	uxth	r2, r3
 8006224:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006228:	b29b      	uxth	r3, r3
 800622a:	029b      	lsls	r3, r3, #10
 800622c:	b29b      	uxth	r3, r3
 800622e:	4313      	orrs	r3, r2
 8006230:	b29a      	uxth	r2, r3
 8006232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006234:	801a      	strh	r2, [r3, #0]
 8006236:	e02a      	b.n	800628e <USB_EPStartXfer+0x6a6>
 8006238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800623c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	785b      	ldrb	r3, [r3, #1]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d122      	bne.n	800628e <USB_EPStartXfer+0x6a6>
 8006248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800624c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	653b      	str	r3, [r7, #80]	; 0x50
 8006254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006258:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006262:	b29b      	uxth	r3, r3
 8006264:	461a      	mov	r2, r3
 8006266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006268:	4413      	add	r3, r2
 800626a:	653b      	str	r3, [r7, #80]	; 0x50
 800626c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	011a      	lsls	r2, r3, #4
 800627a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800627c:	4413      	add	r3, r2
 800627e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006282:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006288:	b29a      	uxth	r2, r3
 800628a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800628c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800628e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	891b      	ldrh	r3, [r3, #8]
 800629a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800629e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6959      	ldr	r1, [r3, #20]
 80062aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80062b4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80062b8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80062bc:	6800      	ldr	r0, [r0, #0]
 80062be:	f001 f982 	bl	80075c6 <USB_WritePMA>
            ep->xfer_buff += len;
 80062c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	695a      	ldr	r2, [r3, #20]
 80062ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062d2:	441a      	add	r2, r3
 80062d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80062e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6a1a      	ldr	r2, [r3, #32]
 80062ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d90f      	bls.n	800631c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80062fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006300:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6a1a      	ldr	r2, [r3, #32]
 8006308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800630c:	1ad2      	subs	r2, r2, r3
 800630e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	621a      	str	r2, [r3, #32]
 800631a:	e00e      	b.n	800633a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800631c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006320:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800632c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006330:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2200      	movs	r2, #0
 8006338:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800633a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800633e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	643b      	str	r3, [r7, #64]	; 0x40
 8006346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800634a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	785b      	ldrb	r3, [r3, #1]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d177      	bne.n	8006446 <USB_EPStartXfer+0x85e>
 8006356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800635a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	63bb      	str	r3, [r7, #56]	; 0x38
 8006362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006366:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006370:	b29b      	uxth	r3, r3
 8006372:	461a      	mov	r2, r3
 8006374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006376:	4413      	add	r3, r2
 8006378:	63bb      	str	r3, [r7, #56]	; 0x38
 800637a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800637e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	011a      	lsls	r2, r3, #4
 8006388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638a:	4413      	add	r3, r2
 800638c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006390:	637b      	str	r3, [r7, #52]	; 0x34
 8006392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	b29b      	uxth	r3, r3
 8006398:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800639c:	b29a      	uxth	r2, r3
 800639e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a0:	801a      	strh	r2, [r3, #0]
 80063a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063a6:	2b3e      	cmp	r3, #62	; 0x3e
 80063a8:	d921      	bls.n	80063ee <USB_EPStartXfer+0x806>
 80063aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ae:	095b      	lsrs	r3, r3, #5
 80063b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80063b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063b8:	f003 031f 	and.w	r3, r3, #31
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d104      	bne.n	80063ca <USB_EPStartXfer+0x7e2>
 80063c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c4:	3b01      	subs	r3, #1
 80063c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80063ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	029b      	lsls	r3, r3, #10
 80063d8:	b29b      	uxth	r3, r3
 80063da:	4313      	orrs	r3, r2
 80063dc:	b29b      	uxth	r3, r3
 80063de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ea:	801a      	strh	r2, [r3, #0]
 80063ec:	e050      	b.n	8006490 <USB_EPStartXfer+0x8a8>
 80063ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10a      	bne.n	800640c <USB_EPStartXfer+0x824>
 80063f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f8:	881b      	ldrh	r3, [r3, #0]
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006400:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006404:	b29a      	uxth	r2, r3
 8006406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006408:	801a      	strh	r2, [r3, #0]
 800640a:	e041      	b.n	8006490 <USB_EPStartXfer+0x8a8>
 800640c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006410:	085b      	lsrs	r3, r3, #1
 8006412:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b00      	cmp	r3, #0
 8006420:	d004      	beq.n	800642c <USB_EPStartXfer+0x844>
 8006422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006426:	3301      	adds	r3, #1
 8006428:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800642c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800642e:	881b      	ldrh	r3, [r3, #0]
 8006430:	b29a      	uxth	r2, r3
 8006432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006436:	b29b      	uxth	r3, r3
 8006438:	029b      	lsls	r3, r3, #10
 800643a:	b29b      	uxth	r3, r3
 800643c:	4313      	orrs	r3, r2
 800643e:	b29a      	uxth	r2, r3
 8006440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006442:	801a      	strh	r2, [r3, #0]
 8006444:	e024      	b.n	8006490 <USB_EPStartXfer+0x8a8>
 8006446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800644a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	785b      	ldrb	r3, [r3, #1]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d11c      	bne.n	8006490 <USB_EPStartXfer+0x8a8>
 8006456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800645a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006464:	b29b      	uxth	r3, r3
 8006466:	461a      	mov	r2, r3
 8006468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800646a:	4413      	add	r3, r2
 800646c:	643b      	str	r3, [r7, #64]	; 0x40
 800646e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	011a      	lsls	r2, r3, #4
 800647c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800647e:	4413      	add	r3, r2
 8006480:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006484:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648a:	b29a      	uxth	r2, r3
 800648c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800648e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	895b      	ldrh	r3, [r3, #10]
 800649c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	6959      	ldr	r1, [r3, #20]
 80064ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80064b6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80064ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80064be:	6800      	ldr	r0, [r0, #0]
 80064c0:	f001 f881 	bl	80075c6 <USB_WritePMA>
 80064c4:	e227      	b.n	8006916 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80064c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80064d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80064f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064fc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006504:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800650e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	441a      	add	r2, r3
 800651a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800651e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800652a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800652e:	b29b      	uxth	r3, r3
 8006530:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006536:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800653e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006542:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800654c:	b29b      	uxth	r3, r3
 800654e:	461a      	mov	r2, r3
 8006550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006552:	4413      	add	r3, r2
 8006554:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800655a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	011a      	lsls	r2, r3, #4
 8006564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006566:	4413      	add	r3, r2
 8006568:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800656c:	65bb      	str	r3, [r7, #88]	; 0x58
 800656e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006572:	b29a      	uxth	r2, r3
 8006574:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006576:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800657c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	891b      	ldrh	r3, [r3, #8]
 8006584:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800658c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6959      	ldr	r1, [r3, #20]
 8006594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006598:	b29b      	uxth	r3, r3
 800659a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800659e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80065a2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80065a6:	6800      	ldr	r0, [r0, #0]
 80065a8:	f001 f80d 	bl	80075c6 <USB_WritePMA>
 80065ac:	e1b3      	b.n	8006916 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80065ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6a1a      	ldr	r2, [r3, #32]
 80065ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065be:	1ad2      	subs	r2, r2, r3
 80065c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80065cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	881b      	ldrh	r3, [r3, #0]
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f000 80c6 	beq.w	8006780 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80065f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	673b      	str	r3, [r7, #112]	; 0x70
 8006600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	785b      	ldrb	r3, [r3, #1]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d177      	bne.n	8006700 <USB_EPStartXfer+0xb18>
 8006610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006614:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	66bb      	str	r3, [r7, #104]	; 0x68
 800661c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006620:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800662a:	b29b      	uxth	r3, r3
 800662c:	461a      	mov	r2, r3
 800662e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006630:	4413      	add	r3, r2
 8006632:	66bb      	str	r3, [r7, #104]	; 0x68
 8006634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	011a      	lsls	r2, r3, #4
 8006642:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006644:	4413      	add	r3, r2
 8006646:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800664a:	667b      	str	r3, [r7, #100]	; 0x64
 800664c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800664e:	881b      	ldrh	r3, [r3, #0]
 8006650:	b29b      	uxth	r3, r3
 8006652:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006656:	b29a      	uxth	r2, r3
 8006658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800665a:	801a      	strh	r2, [r3, #0]
 800665c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006660:	2b3e      	cmp	r3, #62	; 0x3e
 8006662:	d921      	bls.n	80066a8 <USB_EPStartXfer+0xac0>
 8006664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006668:	095b      	lsrs	r3, r3, #5
 800666a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800666e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006672:	f003 031f 	and.w	r3, r3, #31
 8006676:	2b00      	cmp	r3, #0
 8006678:	d104      	bne.n	8006684 <USB_EPStartXfer+0xa9c>
 800667a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800667e:	3b01      	subs	r3, #1
 8006680:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006684:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	b29a      	uxth	r2, r3
 800668a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800668e:	b29b      	uxth	r3, r3
 8006690:	029b      	lsls	r3, r3, #10
 8006692:	b29b      	uxth	r3, r3
 8006694:	4313      	orrs	r3, r2
 8006696:	b29b      	uxth	r3, r3
 8006698:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800669c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066a4:	801a      	strh	r2, [r3, #0]
 80066a6:	e050      	b.n	800674a <USB_EPStartXfer+0xb62>
 80066a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10a      	bne.n	80066c6 <USB_EPStartXfer+0xade>
 80066b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066be:	b29a      	uxth	r2, r3
 80066c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066c2:	801a      	strh	r2, [r3, #0]
 80066c4:	e041      	b.n	800674a <USB_EPStartXfer+0xb62>
 80066c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ca:	085b      	lsrs	r3, r3, #1
 80066cc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80066d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d004      	beq.n	80066e6 <USB_EPStartXfer+0xafe>
 80066dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80066e0:	3301      	adds	r3, #1
 80066e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80066e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066e8:	881b      	ldrh	r3, [r3, #0]
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	029b      	lsls	r3, r3, #10
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	4313      	orrs	r3, r2
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066fc:	801a      	strh	r2, [r3, #0]
 80066fe:	e024      	b.n	800674a <USB_EPStartXfer+0xb62>
 8006700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	785b      	ldrb	r3, [r3, #1]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d11c      	bne.n	800674a <USB_EPStartXfer+0xb62>
 8006710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006714:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800671e:	b29b      	uxth	r3, r3
 8006720:	461a      	mov	r2, r3
 8006722:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006724:	4413      	add	r3, r2
 8006726:	673b      	str	r3, [r7, #112]	; 0x70
 8006728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800672c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	011a      	lsls	r2, r3, #4
 8006736:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006738:	4413      	add	r3, r2
 800673a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800673e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006744:	b29a      	uxth	r2, r3
 8006746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006748:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800674a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800674e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	895b      	ldrh	r3, [r3, #10]
 8006756:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800675a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800675e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6959      	ldr	r1, [r3, #20]
 8006766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800676a:	b29b      	uxth	r3, r3
 800676c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006770:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006774:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006778:	6800      	ldr	r0, [r0, #0]
 800677a:	f000 ff24 	bl	80075c6 <USB_WritePMA>
 800677e:	e0ca      	b.n	8006916 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	785b      	ldrb	r3, [r3, #1]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d177      	bne.n	8006880 <USB_EPStartXfer+0xc98>
 8006790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006794:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800679c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	461a      	mov	r2, r3
 80067ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067b0:	4413      	add	r3, r2
 80067b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80067b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	011a      	lsls	r2, r3, #4
 80067c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067c4:	4413      	add	r3, r2
 80067c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80067cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067da:	801a      	strh	r2, [r3, #0]
 80067dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067e0:	2b3e      	cmp	r3, #62	; 0x3e
 80067e2:	d921      	bls.n	8006828 <USB_EPStartXfer+0xc40>
 80067e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067e8:	095b      	lsrs	r3, r3, #5
 80067ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80067ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067f2:	f003 031f 	and.w	r3, r3, #31
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d104      	bne.n	8006804 <USB_EPStartXfer+0xc1c>
 80067fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067fe:	3b01      	subs	r3, #1
 8006800:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	b29a      	uxth	r2, r3
 800680a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800680e:	b29b      	uxth	r3, r3
 8006810:	029b      	lsls	r3, r3, #10
 8006812:	b29b      	uxth	r3, r3
 8006814:	4313      	orrs	r3, r2
 8006816:	b29b      	uxth	r3, r3
 8006818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800681c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006820:	b29a      	uxth	r2, r3
 8006822:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006824:	801a      	strh	r2, [r3, #0]
 8006826:	e05c      	b.n	80068e2 <USB_EPStartXfer+0xcfa>
 8006828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10a      	bne.n	8006846 <USB_EPStartXfer+0xc5e>
 8006830:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006832:	881b      	ldrh	r3, [r3, #0]
 8006834:	b29b      	uxth	r3, r3
 8006836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800683a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800683e:	b29a      	uxth	r2, r3
 8006840:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006842:	801a      	strh	r2, [r3, #0]
 8006844:	e04d      	b.n	80068e2 <USB_EPStartXfer+0xcfa>
 8006846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800684a:	085b      	lsrs	r3, r3, #1
 800684c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b00      	cmp	r3, #0
 800685a:	d004      	beq.n	8006866 <USB_EPStartXfer+0xc7e>
 800685c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006860:	3301      	adds	r3, #1
 8006862:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006866:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	b29a      	uxth	r2, r3
 800686c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006870:	b29b      	uxth	r3, r3
 8006872:	029b      	lsls	r3, r3, #10
 8006874:	b29b      	uxth	r3, r3
 8006876:	4313      	orrs	r3, r2
 8006878:	b29a      	uxth	r2, r3
 800687a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800687c:	801a      	strh	r2, [r3, #0]
 800687e:	e030      	b.n	80068e2 <USB_EPStartXfer+0xcfa>
 8006880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	785b      	ldrb	r3, [r3, #1]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d128      	bne.n	80068e2 <USB_EPStartXfer+0xcfa>
 8006890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006894:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800689e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	461a      	mov	r2, r3
 80068b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068b4:	4413      	add	r3, r2
 80068b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	011a      	lsls	r2, r3, #4
 80068c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068cc:	4413      	add	r3, r2
 80068ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068da:	b29a      	uxth	r2, r3
 80068dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068e0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80068e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	891b      	ldrh	r3, [r3, #8]
 80068ee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6959      	ldr	r1, [r3, #20]
 80068fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006902:	b29b      	uxth	r3, r3
 8006904:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006908:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800690c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006910:	6800      	ldr	r0, [r0, #0]
 8006912:	f000 fe58 	bl	80075c6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800691a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4413      	add	r3, r2
 8006930:	881b      	ldrh	r3, [r3, #0]
 8006932:	b29b      	uxth	r3, r3
 8006934:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006938:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800693c:	817b      	strh	r3, [r7, #10]
 800693e:	897b      	ldrh	r3, [r7, #10]
 8006940:	f083 0310 	eor.w	r3, r3, #16
 8006944:	817b      	strh	r3, [r7, #10]
 8006946:	897b      	ldrh	r3, [r7, #10]
 8006948:	f083 0320 	eor.w	r3, r3, #32
 800694c:	817b      	strh	r3, [r7, #10]
 800694e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006952:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800695c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	441a      	add	r2, r3
 8006968:	897b      	ldrh	r3, [r7, #10]
 800696a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800696e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800697a:	b29b      	uxth	r3, r3
 800697c:	8013      	strh	r3, [r2, #0]
 800697e:	f000 bcde 	b.w	800733e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006986:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	7b1b      	ldrb	r3, [r3, #12]
 800698e:	2b00      	cmp	r3, #0
 8006990:	f040 80bb 	bne.w	8006b0a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	699a      	ldr	r2, [r3, #24]
 80069a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d917      	bls.n	80069e0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80069b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80069c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	699a      	ldr	r2, [r3, #24]
 80069cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069d0:	1ad2      	subs	r2, r2, r3
 80069d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	619a      	str	r2, [r3, #24]
 80069de:	e00e      	b.n	80069fe <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80069e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80069f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2200      	movs	r2, #0
 80069fc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80069fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a22:	4413      	add	r3, r2
 8006a24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	011a      	lsls	r2, r3, #4
 8006a36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006a44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a48:	881b      	ldrh	r3, [r3, #0]
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a56:	801a      	strh	r2, [r3, #0]
 8006a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a5c:	2b3e      	cmp	r3, #62	; 0x3e
 8006a5e:	d924      	bls.n	8006aaa <USB_EPStartXfer+0xec2>
 8006a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a64:	095b      	lsrs	r3, r3, #5
 8006a66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a6e:	f003 031f 	and.w	r3, r3, #31
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d104      	bne.n	8006a80 <USB_EPStartXfer+0xe98>
 8006a76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	029b      	lsls	r3, r3, #10
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	4313      	orrs	r3, r2
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006aa4:	801a      	strh	r2, [r3, #0]
 8006aa6:	f000 bc10 	b.w	80072ca <USB_EPStartXfer+0x16e2>
 8006aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10c      	bne.n	8006acc <USB_EPStartXfer+0xee4>
 8006ab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ac8:	801a      	strh	r2, [r3, #0]
 8006aca:	e3fe      	b.n	80072ca <USB_EPStartXfer+0x16e2>
 8006acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ad0:	085b      	lsrs	r3, r3, #1
 8006ad2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d004      	beq.n	8006aec <USB_EPStartXfer+0xf04>
 8006ae2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006aec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	029b      	lsls	r3, r3, #10
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	4313      	orrs	r3, r2
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b06:	801a      	strh	r2, [r3, #0]
 8006b08:	e3df      	b.n	80072ca <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	78db      	ldrb	r3, [r3, #3]
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	f040 8218 	bne.w	8006f4c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006b1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	785b      	ldrb	r3, [r3, #1]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f040 809d 	bne.w	8006c68 <USB_EPStartXfer+0x1080>
 8006b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b52:	4413      	add	r3, r2
 8006b54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	011a      	lsls	r2, r3, #4
 8006b66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b78:	881b      	ldrh	r3, [r3, #0]
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b86:	801a      	strh	r2, [r3, #0]
 8006b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	2b3e      	cmp	r3, #62	; 0x3e
 8006b96:	d92b      	bls.n	8006bf0 <USB_EPStartXfer+0x1008>
 8006b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	095b      	lsrs	r3, r3, #5
 8006ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	f003 031f 	and.w	r3, r3, #31
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d104      	bne.n	8006bc8 <USB_EPStartXfer+0xfe0>
 8006bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006bc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	029b      	lsls	r3, r3, #10
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006be2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006bec:	801a      	strh	r2, [r3, #0]
 8006bee:	e070      	b.n	8006cd2 <USB_EPStartXfer+0x10ea>
 8006bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10c      	bne.n	8006c1a <USB_EPStartXfer+0x1032>
 8006c00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c16:	801a      	strh	r2, [r3, #0]
 8006c18:	e05b      	b.n	8006cd2 <USB_EPStartXfer+0x10ea>
 8006c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	085b      	lsrs	r3, r3, #1
 8006c28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	f003 0301 	and.w	r3, r3, #1
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d004      	beq.n	8006c4a <USB_EPStartXfer+0x1062>
 8006c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c44:	3301      	adds	r3, #1
 8006c46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	029b      	lsls	r3, r3, #10
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c64:	801a      	strh	r2, [r3, #0]
 8006c66:	e034      	b.n	8006cd2 <USB_EPStartXfer+0x10ea>
 8006c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	785b      	ldrb	r3, [r3, #1]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d12c      	bne.n	8006cd2 <USB_EPStartXfer+0x10ea>
 8006c78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	461a      	mov	r2, r3
 8006c98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	011a      	lsls	r2, r3, #4
 8006cb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006cd0:	801a      	strh	r2, [r3, #0]
 8006cd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	785b      	ldrb	r3, [r3, #1]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f040 809d 	bne.w	8006e2c <USB_EPStartXfer+0x1244>
 8006cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	461a      	mov	r2, r3
 8006d12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d16:	4413      	add	r3, r2
 8006d18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	011a      	lsls	r2, r3, #4
 8006d2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d2e:	4413      	add	r3, r2
 8006d30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006d38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d4a:	801a      	strh	r2, [r3, #0]
 8006d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	2b3e      	cmp	r3, #62	; 0x3e
 8006d5a:	d92b      	bls.n	8006db4 <USB_EPStartXfer+0x11cc>
 8006d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	095b      	lsrs	r3, r3, #5
 8006d6a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	f003 031f 	and.w	r3, r3, #31
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d104      	bne.n	8006d8c <USB_EPStartXfer+0x11a4>
 8006d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d86:	3b01      	subs	r3, #1
 8006d88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d90:	881b      	ldrh	r3, [r3, #0]
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	029b      	lsls	r3, r3, #10
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006db0:	801a      	strh	r2, [r3, #0]
 8006db2:	e069      	b.n	8006e88 <USB_EPStartXfer+0x12a0>
 8006db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10c      	bne.n	8006dde <USB_EPStartXfer+0x11f6>
 8006dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006dc8:	881b      	ldrh	r3, [r3, #0]
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006dda:	801a      	strh	r2, [r3, #0]
 8006ddc:	e054      	b.n	8006e88 <USB_EPStartXfer+0x12a0>
 8006dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	085b      	lsrs	r3, r3, #1
 8006dec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	f003 0301 	and.w	r3, r3, #1
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d004      	beq.n	8006e0e <USB_EPStartXfer+0x1226>
 8006e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e08:	3301      	adds	r3, #1
 8006e0a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e12:	881b      	ldrh	r3, [r3, #0]
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	029b      	lsls	r3, r3, #10
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	4313      	orrs	r3, r2
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e28:	801a      	strh	r2, [r3, #0]
 8006e2a:	e02d      	b.n	8006e88 <USB_EPStartXfer+0x12a0>
 8006e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	785b      	ldrb	r3, [r3, #1]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d125      	bne.n	8006e88 <USB_EPStartXfer+0x12a0>
 8006e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006e52:	4413      	add	r3, r2
 8006e54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	011a      	lsls	r2, r3, #4
 8006e66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e86:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006e88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	69db      	ldr	r3, [r3, #28]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 8218 	beq.w	80072ca <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006eba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d005      	beq.n	8006ed2 <USB_EPStartXfer+0x12ea>
 8006ec6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10d      	bne.n	8006eee <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006ed2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f040 81f5 	bne.w	80072ca <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006ee0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f040 81ee 	bne.w	80072ca <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f14:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	441a      	add	r2, r3
 8006f32:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	8013      	strh	r3, [r2, #0]
 8006f4a:	e1be      	b.n	80072ca <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	78db      	ldrb	r3, [r3, #3]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	f040 81b4 	bne.w	80072c6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	699a      	ldr	r2, [r3, #24]
 8006f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d917      	bls.n	8006faa <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	699a      	ldr	r2, [r3, #24]
 8006f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f9a:	1ad2      	subs	r2, r2, r3
 8006f9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	619a      	str	r2, [r3, #24]
 8006fa8:	e00e      	b.n	8006fc8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	785b      	ldrb	r3, [r3, #1]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f040 8085 	bne.w	80070e4 <USB_EPStartXfer+0x14fc>
 8006fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ffe:	4413      	add	r3, r2
 8007000:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	011a      	lsls	r2, r3, #4
 8007012:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007016:	4413      	add	r3, r2
 8007018:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800701c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007020:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	b29b      	uxth	r3, r3
 8007028:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800702c:	b29a      	uxth	r2, r3
 800702e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007032:	801a      	strh	r2, [r3, #0]
 8007034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007038:	2b3e      	cmp	r3, #62	; 0x3e
 800703a:	d923      	bls.n	8007084 <USB_EPStartXfer+0x149c>
 800703c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007040:	095b      	lsrs	r3, r3, #5
 8007042:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800704a:	f003 031f 	and.w	r3, r3, #31
 800704e:	2b00      	cmp	r3, #0
 8007050:	d104      	bne.n	800705c <USB_EPStartXfer+0x1474>
 8007052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007056:	3b01      	subs	r3, #1
 8007058:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800705c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007060:	881b      	ldrh	r3, [r3, #0]
 8007062:	b29a      	uxth	r2, r3
 8007064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007068:	b29b      	uxth	r3, r3
 800706a:	029b      	lsls	r3, r3, #10
 800706c:	b29b      	uxth	r3, r3
 800706e:	4313      	orrs	r3, r2
 8007070:	b29b      	uxth	r3, r3
 8007072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800707a:	b29a      	uxth	r2, r3
 800707c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007080:	801a      	strh	r2, [r3, #0]
 8007082:	e060      	b.n	8007146 <USB_EPStartXfer+0x155e>
 8007084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10c      	bne.n	80070a6 <USB_EPStartXfer+0x14be>
 800708c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007090:	881b      	ldrh	r3, [r3, #0]
 8007092:	b29b      	uxth	r3, r3
 8007094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800709c:	b29a      	uxth	r2, r3
 800709e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070a2:	801a      	strh	r2, [r3, #0]
 80070a4:	e04f      	b.n	8007146 <USB_EPStartXfer+0x155e>
 80070a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070aa:	085b      	lsrs	r3, r3, #1
 80070ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80070b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070b4:	f003 0301 	and.w	r3, r3, #1
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d004      	beq.n	80070c6 <USB_EPStartXfer+0x14de>
 80070bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070c0:	3301      	adds	r3, #1
 80070c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80070c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	029b      	lsls	r3, r3, #10
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	4313      	orrs	r3, r2
 80070da:	b29a      	uxth	r2, r3
 80070dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070e0:	801a      	strh	r2, [r3, #0]
 80070e2:	e030      	b.n	8007146 <USB_EPStartXfer+0x155e>
 80070e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	785b      	ldrb	r3, [r3, #1]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d128      	bne.n	8007146 <USB_EPStartXfer+0x155e>
 80070f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007106:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007110:	b29b      	uxth	r3, r3
 8007112:	461a      	mov	r2, r3
 8007114:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007118:	4413      	add	r3, r2
 800711a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800711e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	011a      	lsls	r2, r3, #4
 800712c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007130:	4413      	add	r3, r2
 8007132:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007136:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800713a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800713e:	b29a      	uxth	r2, r3
 8007140:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007144:	801a      	strh	r2, [r3, #0]
 8007146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800714a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	785b      	ldrb	r3, [r3, #1]
 8007160:	2b00      	cmp	r3, #0
 8007162:	f040 8085 	bne.w	8007270 <USB_EPStartXfer+0x1688>
 8007166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800716a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007178:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007182:	b29b      	uxth	r3, r3
 8007184:	461a      	mov	r2, r3
 8007186:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800718a:	4413      	add	r3, r2
 800718c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	011a      	lsls	r2, r3, #4
 800719e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80071a2:	4413      	add	r3, r2
 80071a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80071a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80071be:	801a      	strh	r2, [r3, #0]
 80071c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071c4:	2b3e      	cmp	r3, #62	; 0x3e
 80071c6:	d923      	bls.n	8007210 <USB_EPStartXfer+0x1628>
 80071c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071cc:	095b      	lsrs	r3, r3, #5
 80071ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80071d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071d6:	f003 031f 	and.w	r3, r3, #31
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d104      	bne.n	80071e8 <USB_EPStartXfer+0x1600>
 80071de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071e2:	3b01      	subs	r3, #1
 80071e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80071e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80071ec:	881b      	ldrh	r3, [r3, #0]
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	029b      	lsls	r3, r3, #10
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	4313      	orrs	r3, r2
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007202:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007206:	b29a      	uxth	r2, r3
 8007208:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800720c:	801a      	strh	r2, [r3, #0]
 800720e:	e05c      	b.n	80072ca <USB_EPStartXfer+0x16e2>
 8007210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10c      	bne.n	8007232 <USB_EPStartXfer+0x164a>
 8007218:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800721c:	881b      	ldrh	r3, [r3, #0]
 800721e:	b29b      	uxth	r3, r3
 8007220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007228:	b29a      	uxth	r2, r3
 800722a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800722e:	801a      	strh	r2, [r3, #0]
 8007230:	e04b      	b.n	80072ca <USB_EPStartXfer+0x16e2>
 8007232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007236:	085b      	lsrs	r3, r3, #1
 8007238:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800723c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007240:	f003 0301 	and.w	r3, r3, #1
 8007244:	2b00      	cmp	r3, #0
 8007246:	d004      	beq.n	8007252 <USB_EPStartXfer+0x166a>
 8007248:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800724c:	3301      	adds	r3, #1
 800724e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007252:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007256:	881b      	ldrh	r3, [r3, #0]
 8007258:	b29a      	uxth	r2, r3
 800725a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800725e:	b29b      	uxth	r3, r3
 8007260:	029b      	lsls	r3, r3, #10
 8007262:	b29b      	uxth	r3, r3
 8007264:	4313      	orrs	r3, r2
 8007266:	b29a      	uxth	r2, r3
 8007268:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800726c:	801a      	strh	r2, [r3, #0]
 800726e:	e02c      	b.n	80072ca <USB_EPStartXfer+0x16e2>
 8007270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007274:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	785b      	ldrb	r3, [r3, #1]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d124      	bne.n	80072ca <USB_EPStartXfer+0x16e2>
 8007280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007284:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800728e:	b29b      	uxth	r3, r3
 8007290:	461a      	mov	r2, r3
 8007292:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007296:	4413      	add	r3, r2
 8007298:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800729c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	011a      	lsls	r2, r3, #4
 80072aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80072ae:	4413      	add	r3, r2
 80072b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072bc:	b29a      	uxth	r2, r3
 80072be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80072c2:	801a      	strh	r2, [r3, #0]
 80072c4:	e001      	b.n	80072ca <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e03a      	b.n	8007340 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80072ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	881b      	ldrh	r3, [r3, #0]
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80072f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80072f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80072fc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007300:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007304:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007308:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800730c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007310:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800731a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	441a      	add	r2, r3
 8007326:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800732a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800732e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800733a:	b29b      	uxth	r3, r3
 800733c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800734a:	b480      	push	{r7}
 800734c:	b085      	sub	sp, #20
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	785b      	ldrb	r3, [r3, #1]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d020      	beq.n	800739e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	881b      	ldrh	r3, [r3, #0]
 8007368:	b29b      	uxth	r3, r3
 800736a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800736e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007372:	81bb      	strh	r3, [r7, #12]
 8007374:	89bb      	ldrh	r3, [r7, #12]
 8007376:	f083 0310 	eor.w	r3, r3, #16
 800737a:	81bb      	strh	r3, [r7, #12]
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	441a      	add	r2, r3
 8007386:	89bb      	ldrh	r3, [r7, #12]
 8007388:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800738c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007398:	b29b      	uxth	r3, r3
 800739a:	8013      	strh	r3, [r2, #0]
 800739c:	e01f      	b.n	80073de <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4413      	add	r3, r2
 80073a8:	881b      	ldrh	r3, [r3, #0]
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073b4:	81fb      	strh	r3, [r7, #14]
 80073b6:	89fb      	ldrh	r3, [r7, #14]
 80073b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80073bc:	81fb      	strh	r3, [r7, #14]
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	441a      	add	r2, r3
 80073c8:	89fb      	ldrh	r3, [r7, #14]
 80073ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073da:	b29b      	uxth	r3, r3
 80073dc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bc80      	pop	{r7}
 80073e8:	4770      	bx	lr

080073ea <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b087      	sub	sp, #28
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
 80073f2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	7b1b      	ldrb	r3, [r3, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f040 809d 	bne.w	8007538 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	785b      	ldrb	r3, [r3, #1]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d04c      	beq.n	80074a0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	881b      	ldrh	r3, [r3, #0]
 8007412:	823b      	strh	r3, [r7, #16]
 8007414:	8a3b      	ldrh	r3, [r7, #16]
 8007416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800741a:	2b00      	cmp	r3, #0
 800741c:	d01b      	beq.n	8007456 <USB_EPClearStall+0x6c>
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	b29b      	uxth	r3, r3
 800742c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007434:	81fb      	strh	r3, [r7, #14]
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	441a      	add	r2, r3
 8007440:	89fb      	ldrh	r3, [r7, #14]
 8007442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800744a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800744e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007452:	b29b      	uxth	r3, r3
 8007454:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	78db      	ldrb	r3, [r3, #3]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d06c      	beq.n	8007538 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4413      	add	r3, r2
 8007468:	881b      	ldrh	r3, [r3, #0]
 800746a:	b29b      	uxth	r3, r3
 800746c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007474:	81bb      	strh	r3, [r7, #12]
 8007476:	89bb      	ldrh	r3, [r7, #12]
 8007478:	f083 0320 	eor.w	r3, r3, #32
 800747c:	81bb      	strh	r3, [r7, #12]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	441a      	add	r2, r3
 8007488:	89bb      	ldrh	r3, [r7, #12]
 800748a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800748e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800749a:	b29b      	uxth	r3, r3
 800749c:	8013      	strh	r3, [r2, #0]
 800749e:	e04b      	b.n	8007538 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	4413      	add	r3, r2
 80074aa:	881b      	ldrh	r3, [r3, #0]
 80074ac:	82fb      	strh	r3, [r7, #22]
 80074ae:	8afb      	ldrh	r3, [r7, #22]
 80074b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d01b      	beq.n	80074f0 <USB_EPClearStall+0x106>
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	881b      	ldrh	r3, [r3, #0]
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ce:	82bb      	strh	r3, [r7, #20]
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	441a      	add	r2, r3
 80074da:	8abb      	ldrh	r3, [r7, #20]
 80074dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	4413      	add	r3, r2
 80074fa:	881b      	ldrh	r3, [r3, #0]
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007506:	827b      	strh	r3, [r7, #18]
 8007508:	8a7b      	ldrh	r3, [r7, #18]
 800750a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800750e:	827b      	strh	r3, [r7, #18]
 8007510:	8a7b      	ldrh	r3, [r7, #18]
 8007512:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007516:	827b      	strh	r3, [r7, #18]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	441a      	add	r2, r3
 8007522:	8a7b      	ldrh	r3, [r7, #18]
 8007524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800752c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007534:	b29b      	uxth	r3, r3
 8007536:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	371c      	adds	r7, #28
 800753e:	46bd      	mov	sp, r7
 8007540:	bc80      	pop	{r7}
 8007542:	4770      	bx	lr

08007544 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	460b      	mov	r3, r1
 800754e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007550:	78fb      	ldrb	r3, [r7, #3]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d103      	bne.n	800755e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2280      	movs	r2, #128	; 0x80
 800755a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	bc80      	pop	{r7}
 8007568:	4770      	bx	lr

0800756a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800756a:	b480      	push	{r7}
 800756c:	b083      	sub	sp, #12
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	bc80      	pop	{r7}
 800757c:	4770      	bx	lr

0800757e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800757e:	b480      	push	{r7}
 8007580:	b083      	sub	sp, #12
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	bc80      	pop	{r7}
 8007590:	4770      	bx	lr

08007592 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007592:	b480      	push	{r7}
 8007594:	b085      	sub	sp, #20
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80075a4:	68fb      	ldr	r3, [r7, #12]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3714      	adds	r7, #20
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bc80      	pop	{r7}
 80075ae:	4770      	bx	lr

080075b0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bc80      	pop	{r7}
 80075c4:	4770      	bx	lr

080075c6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b08b      	sub	sp, #44	; 0x2c
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	60f8      	str	r0, [r7, #12]
 80075ce:	60b9      	str	r1, [r7, #8]
 80075d0:	4611      	mov	r1, r2
 80075d2:	461a      	mov	r2, r3
 80075d4:	460b      	mov	r3, r1
 80075d6:	80fb      	strh	r3, [r7, #6]
 80075d8:	4613      	mov	r3, r2
 80075da:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80075dc:	88bb      	ldrh	r3, [r7, #4]
 80075de:	3301      	adds	r3, #1
 80075e0:	085b      	lsrs	r3, r3, #1
 80075e2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80075ec:	88fb      	ldrh	r3, [r7, #6]
 80075ee:	005a      	lsls	r2, r3, #1
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075f8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	627b      	str	r3, [r7, #36]	; 0x24
 80075fe:	e01e      	b.n	800763e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	3301      	adds	r3, #1
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	021b      	lsls	r3, r3, #8
 800760e:	b21a      	sxth	r2, r3
 8007610:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007614:	4313      	orrs	r3, r2
 8007616:	b21b      	sxth	r3, r3
 8007618:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	8a7a      	ldrh	r2, [r7, #18]
 800761e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	3302      	adds	r3, #2
 8007624:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007626:	6a3b      	ldr	r3, [r7, #32]
 8007628:	3302      	adds	r3, #2
 800762a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	3301      	adds	r3, #1
 8007630:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	3301      	adds	r3, #1
 8007636:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763a:	3b01      	subs	r3, #1
 800763c:	627b      	str	r3, [r7, #36]	; 0x24
 800763e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1dd      	bne.n	8007600 <USB_WritePMA+0x3a>
  }
}
 8007644:	bf00      	nop
 8007646:	bf00      	nop
 8007648:	372c      	adds	r7, #44	; 0x2c
 800764a:	46bd      	mov	sp, r7
 800764c:	bc80      	pop	{r7}
 800764e:	4770      	bx	lr

08007650 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007650:	b480      	push	{r7}
 8007652:	b08b      	sub	sp, #44	; 0x2c
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	4611      	mov	r1, r2
 800765c:	461a      	mov	r2, r3
 800765e:	460b      	mov	r3, r1
 8007660:	80fb      	strh	r3, [r7, #6]
 8007662:	4613      	mov	r3, r2
 8007664:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007666:	88bb      	ldrh	r3, [r7, #4]
 8007668:	085b      	lsrs	r3, r3, #1
 800766a:	b29b      	uxth	r3, r3
 800766c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007676:	88fb      	ldrh	r3, [r7, #6]
 8007678:	005a      	lsls	r2, r3, #1
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	4413      	add	r3, r2
 800767e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007682:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	627b      	str	r3, [r7, #36]	; 0x24
 8007688:	e01b      	b.n	80076c2 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800768a:	6a3b      	ldr	r3, [r7, #32]
 800768c:	881b      	ldrh	r3, [r3, #0]
 800768e:	b29b      	uxth	r3, r3
 8007690:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007692:	6a3b      	ldr	r3, [r7, #32]
 8007694:	3302      	adds	r3, #2
 8007696:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	b2da      	uxtb	r2, r3
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	3301      	adds	r3, #1
 80076a4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	0a1b      	lsrs	r3, r3, #8
 80076aa:	b2da      	uxtb	r2, r3
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	3301      	adds	r3, #1
 80076b4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80076b6:	6a3b      	ldr	r3, [r7, #32]
 80076b8:	3302      	adds	r3, #2
 80076ba:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80076bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076be:	3b01      	subs	r3, #1
 80076c0:	627b      	str	r3, [r7, #36]	; 0x24
 80076c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1e0      	bne.n	800768a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80076c8:	88bb      	ldrh	r3, [r7, #4]
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d007      	beq.n	80076e4 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80076d4:	6a3b      	ldr	r3, [r7, #32]
 80076d6:	881b      	ldrh	r3, [r3, #0]
 80076d8:	b29b      	uxth	r3, r3
 80076da:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	b2da      	uxtb	r2, r3
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	701a      	strb	r2, [r3, #0]
  }
}
 80076e4:	bf00      	nop
 80076e6:	372c      	adds	r7, #44	; 0x2c
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bc80      	pop	{r7}
 80076ec:	4770      	bx	lr

080076ee <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b084      	sub	sp, #16
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
 80076f6:	460b      	mov	r3, r1
 80076f8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80076fa:	2300      	movs	r3, #0
 80076fc:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	7c1b      	ldrb	r3, [r3, #16]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d115      	bne.n	8007732 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007706:	f44f 7300 	mov.w	r3, #512	; 0x200
 800770a:	2202      	movs	r2, #2
 800770c:	2181      	movs	r1, #129	; 0x81
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f001 fe31 	bl	8009376 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800771a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800771e:	2202      	movs	r2, #2
 8007720:	2101      	movs	r1, #1
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f001 fe27 	bl	8009376 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007730:	e012      	b.n	8007758 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007732:	2340      	movs	r3, #64	; 0x40
 8007734:	2202      	movs	r2, #2
 8007736:	2181      	movs	r1, #129	; 0x81
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f001 fe1c 	bl	8009376 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007744:	2340      	movs	r3, #64	; 0x40
 8007746:	2202      	movs	r2, #2
 8007748:	2101      	movs	r1, #1
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f001 fe13 	bl	8009376 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007758:	2308      	movs	r3, #8
 800775a:	2203      	movs	r2, #3
 800775c:	2182      	movs	r1, #130	; 0x82
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f001 fe09 	bl	8009376 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800776a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800776e:	f001 ff29 	bl	80095c4 <USBD_static_malloc>
 8007772:	4602      	mov	r2, r0
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007780:	2b00      	cmp	r3, #0
 8007782:	d102      	bne.n	800778a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007784:	2301      	movs	r3, #1
 8007786:	73fb      	strb	r3, [r7, #15]
 8007788:	e026      	b.n	80077d8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007790:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	2200      	movs	r2, #0
 80077a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	7c1b      	ldrb	r3, [r3, #16]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d109      	bne.n	80077c8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077be:	2101      	movs	r1, #1
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f001 fec9 	bl	8009558 <USBD_LL_PrepareReceive>
 80077c6:	e007      	b.n	80077d8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077ce:	2340      	movs	r3, #64	; 0x40
 80077d0:	2101      	movs	r1, #1
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f001 fec0 	bl	8009558 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80077d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b084      	sub	sp, #16
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
 80077ea:	460b      	mov	r3, r1
 80077ec:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80077f2:	2181      	movs	r1, #129	; 0x81
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f001 fde4 	bl	80093c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007800:	2101      	movs	r1, #1
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f001 fddd 	bl	80093c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007810:	2182      	movs	r1, #130	; 0x82
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f001 fdd5 	bl	80093c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00e      	beq.n	8007846 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007838:	4618      	mov	r0, r3
 800783a:	f001 fecf 	bl	80095dc <USBD_static_free>
    pdev->pClassData = NULL;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007846:	7bfb      	ldrb	r3, [r7, #15]
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b086      	sub	sp, #24
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007860:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007862:	2300      	movs	r3, #0
 8007864:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007866:	2300      	movs	r3, #0
 8007868:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007876:	2b00      	cmp	r3, #0
 8007878:	d039      	beq.n	80078ee <USBD_CDC_Setup+0x9e>
 800787a:	2b20      	cmp	r3, #32
 800787c:	d17f      	bne.n	800797e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	88db      	ldrh	r3, [r3, #6]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d029      	beq.n	80078da <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	b25b      	sxtb	r3, r3
 800788c:	2b00      	cmp	r3, #0
 800788e:	da11      	bge.n	80078b4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	683a      	ldr	r2, [r7, #0]
 800789a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800789c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	88d2      	ldrh	r2, [r2, #6]
 80078a2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80078a4:	6939      	ldr	r1, [r7, #16]
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	88db      	ldrh	r3, [r3, #6]
 80078aa:	461a      	mov	r2, r3
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f001 f9da 	bl	8008c66 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80078b2:	e06b      	b.n	800798c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	785a      	ldrb	r2, [r3, #1]
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	88db      	ldrh	r3, [r3, #6]
 80078c2:	b2da      	uxtb	r2, r3
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80078ca:	6939      	ldr	r1, [r7, #16]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	88db      	ldrh	r3, [r3, #6]
 80078d0:	461a      	mov	r2, r3
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f001 f9f5 	bl	8008cc2 <USBD_CtlPrepareRx>
      break;
 80078d8:	e058      	b.n	800798c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	7850      	ldrb	r0, [r2, #1]
 80078e6:	2200      	movs	r2, #0
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	4798      	blx	r3
      break;
 80078ec:	e04e      	b.n	800798c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	785b      	ldrb	r3, [r3, #1]
 80078f2:	2b0b      	cmp	r3, #11
 80078f4:	d02e      	beq.n	8007954 <USBD_CDC_Setup+0x104>
 80078f6:	2b0b      	cmp	r3, #11
 80078f8:	dc38      	bgt.n	800796c <USBD_CDC_Setup+0x11c>
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d002      	beq.n	8007904 <USBD_CDC_Setup+0xb4>
 80078fe:	2b0a      	cmp	r3, #10
 8007900:	d014      	beq.n	800792c <USBD_CDC_Setup+0xdc>
 8007902:	e033      	b.n	800796c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800790a:	2b03      	cmp	r3, #3
 800790c:	d107      	bne.n	800791e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800790e:	f107 030c 	add.w	r3, r7, #12
 8007912:	2202      	movs	r2, #2
 8007914:	4619      	mov	r1, r3
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f001 f9a5 	bl	8008c66 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800791c:	e02e      	b.n	800797c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f001 f936 	bl	8008b92 <USBD_CtlError>
            ret = USBD_FAIL;
 8007926:	2302      	movs	r3, #2
 8007928:	75fb      	strb	r3, [r7, #23]
          break;
 800792a:	e027      	b.n	800797c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007932:	2b03      	cmp	r3, #3
 8007934:	d107      	bne.n	8007946 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007936:	f107 030f 	add.w	r3, r7, #15
 800793a:	2201      	movs	r2, #1
 800793c:	4619      	mov	r1, r3
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f001 f991 	bl	8008c66 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007944:	e01a      	b.n	800797c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f001 f922 	bl	8008b92 <USBD_CtlError>
            ret = USBD_FAIL;
 800794e:	2302      	movs	r3, #2
 8007950:	75fb      	strb	r3, [r7, #23]
          break;
 8007952:	e013      	b.n	800797c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800795a:	2b03      	cmp	r3, #3
 800795c:	d00d      	beq.n	800797a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f001 f916 	bl	8008b92 <USBD_CtlError>
            ret = USBD_FAIL;
 8007966:	2302      	movs	r3, #2
 8007968:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800796a:	e006      	b.n	800797a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800796c:	6839      	ldr	r1, [r7, #0]
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f001 f90f 	bl	8008b92 <USBD_CtlError>
          ret = USBD_FAIL;
 8007974:	2302      	movs	r3, #2
 8007976:	75fb      	strb	r3, [r7, #23]
          break;
 8007978:	e000      	b.n	800797c <USBD_CDC_Setup+0x12c>
          break;
 800797a:	bf00      	nop
      }
      break;
 800797c:	e006      	b.n	800798c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800797e:	6839      	ldr	r1, [r7, #0]
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f001 f906 	bl	8008b92 <USBD_CtlError>
      ret = USBD_FAIL;
 8007986:	2302      	movs	r3, #2
 8007988:	75fb      	strb	r3, [r7, #23]
      break;
 800798a:	bf00      	nop
  }

  return ret;
 800798c:	7dfb      	ldrb	r3, [r7, #23]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3718      	adds	r7, #24
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b084      	sub	sp, #16
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	460b      	mov	r3, r1
 80079a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079a8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079b0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d03a      	beq.n	8007a32 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80079bc:	78fa      	ldrb	r2, [r7, #3]
 80079be:	6879      	ldr	r1, [r7, #4]
 80079c0:	4613      	mov	r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	4413      	add	r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	440b      	add	r3, r1
 80079ca:	331c      	adds	r3, #28
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d029      	beq.n	8007a26 <USBD_CDC_DataIn+0x90>
 80079d2:	78fa      	ldrb	r2, [r7, #3]
 80079d4:	6879      	ldr	r1, [r7, #4]
 80079d6:	4613      	mov	r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	4413      	add	r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	440b      	add	r3, r1
 80079e0:	331c      	adds	r3, #28
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	78f9      	ldrb	r1, [r7, #3]
 80079e6:	68b8      	ldr	r0, [r7, #8]
 80079e8:	460b      	mov	r3, r1
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	440b      	add	r3, r1
 80079ee:	00db      	lsls	r3, r3, #3
 80079f0:	4403      	add	r3, r0
 80079f2:	3338      	adds	r3, #56	; 0x38
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	fbb2 f1f3 	udiv	r1, r2, r3
 80079fa:	fb01 f303 	mul.w	r3, r1, r3
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d110      	bne.n	8007a26 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007a04:	78fa      	ldrb	r2, [r7, #3]
 8007a06:	6879      	ldr	r1, [r7, #4]
 8007a08:	4613      	mov	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	440b      	add	r3, r1
 8007a12:	331c      	adds	r3, #28
 8007a14:	2200      	movs	r2, #0
 8007a16:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007a18:	78f9      	ldrb	r1, [r7, #3]
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f001 fd77 	bl	8009512 <USBD_LL_Transmit>
 8007a24:	e003      	b.n	8007a2e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	e000      	b.n	8007a34 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007a32:	2302      	movs	r3, #2
  }
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3710      	adds	r7, #16
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	460b      	mov	r3, r1
 8007a46:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007a50:	78fb      	ldrb	r3, [r7, #3]
 8007a52:	4619      	mov	r1, r3
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f001 fda2 	bl	800959e <USBD_LL_GetRxDataSize>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00d      	beq.n	8007a88 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007a80:	4611      	mov	r1, r2
 8007a82:	4798      	blx	r3

    return USBD_OK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	e000      	b.n	8007a8a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007a88:	2302      	movs	r3, #2
  }
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b084      	sub	sp, #16
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d015      	beq.n	8007ad8 <USBD_CDC_EP0_RxReady+0x46>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007ab2:	2bff      	cmp	r3, #255	; 0xff
 8007ab4:	d010      	beq.n	8007ad8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007ac4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007acc:	b292      	uxth	r2, r2
 8007ace:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	22ff      	movs	r2, #255	; 0xff
 8007ad4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
	...

08007ae4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2243      	movs	r2, #67	; 0x43
 8007af0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007af2:	4b03      	ldr	r3, [pc, #12]	; (8007b00 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bc80      	pop	{r7}
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	2000019c 	.word	0x2000019c

08007b04 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2243      	movs	r2, #67	; 0x43
 8007b10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007b12:	4b03      	ldr	r3, [pc, #12]	; (8007b20 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bc80      	pop	{r7}
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	20000158 	.word	0x20000158

08007b24 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2243      	movs	r2, #67	; 0x43
 8007b30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007b32:	4b03      	ldr	r3, [pc, #12]	; (8007b40 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bc80      	pop	{r7}
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	200001e0 	.word	0x200001e0

08007b44 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	220a      	movs	r2, #10
 8007b50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007b52:	4b03      	ldr	r3, [pc, #12]	; (8007b60 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bc80      	pop	{r7}
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	20000114 	.word	0x20000114

08007b64 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007b6e:	2302      	movs	r3, #2
 8007b70:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d005      	beq.n	8007b84 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	683a      	ldr	r2, [r7, #0]
 8007b7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007b80:	2300      	movs	r3, #0
 8007b82:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3714      	adds	r7, #20
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bc80      	pop	{r7}
 8007b8e:	4770      	bx	lr

08007b90 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b087      	sub	sp, #28
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	68ba      	ldr	r2, [r7, #8]
 8007baa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007bae:	88fa      	ldrh	r2, [r7, #6]
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	371c      	adds	r7, #28
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bc80      	pop	{r7}
 8007bc0:	4770      	bx	lr

08007bc2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007bc2:	b480      	push	{r7}
 8007bc4:	b085      	sub	sp, #20
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
 8007bca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bd2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bc80      	pop	{r7}
 8007be6:	4770      	bx	lr

08007be8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf6:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d017      	beq.n	8007c32 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	7c1b      	ldrb	r3, [r3, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d109      	bne.n	8007c1e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c14:	2101      	movs	r1, #1
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f001 fc9e 	bl	8009558 <USBD_LL_PrepareReceive>
 8007c1c:	e007      	b.n	8007c2e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c24:	2340      	movs	r3, #64	; 0x40
 8007c26:	2101      	movs	r1, #1
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f001 fc95 	bl	8009558 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	e000      	b.n	8007c34 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007c32:	2302      	movs	r3, #2
  }
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	4613      	mov	r3, r2
 8007c48:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d101      	bne.n	8007c54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007c50:	2302      	movs	r3, #2
 8007c52:	e01a      	b.n	8007c8a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d003      	beq.n	8007c66 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d003      	beq.n	8007c74 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	79fa      	ldrb	r2, [r7, #7]
 8007c80:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f001 fb02 	bl	800928c <USBD_LL_Init>

  return USBD_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c92:	b480      	push	{r7}
 8007c94:	b085      	sub	sp, #20
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
 8007c9a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d006      	beq.n	8007cb4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	683a      	ldr	r2, [r7, #0]
 8007caa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	73fb      	strb	r3, [r7, #15]
 8007cb2:	e001      	b.n	8007cb8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3714      	adds	r7, #20
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bc80      	pop	{r7}
 8007cc2:	4770      	bx	lr

08007cc4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f001 fb37 	bl	8009340 <USBD_LL_Start>

  return USBD_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	370c      	adds	r7, #12
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bc80      	pop	{r7}
 8007cee:	4770      	bx	lr

08007cf0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007cfc:	2302      	movs	r3, #2
 8007cfe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00c      	beq.n	8007d24 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	78fa      	ldrb	r2, [r7, #3]
 8007d14:	4611      	mov	r1, r2
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	4798      	blx	r3
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d101      	bne.n	8007d24 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b082      	sub	sp, #8
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
 8007d36:	460b      	mov	r3, r1
 8007d38:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	78fa      	ldrb	r2, [r7, #3]
 8007d44:	4611      	mov	r1, r2
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	4798      	blx	r3

  return USBD_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3708      	adds	r7, #8
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d64:	6839      	ldr	r1, [r7, #0]
 8007d66:	4618      	mov	r0, r3
 8007d68:	f000 fed7 	bl	8008b1a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007d88:	f003 031f 	and.w	r3, r3, #31
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d016      	beq.n	8007dbe <USBD_LL_SetupStage+0x6a>
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d81c      	bhi.n	8007dce <USBD_LL_SetupStage+0x7a>
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d002      	beq.n	8007d9e <USBD_LL_SetupStage+0x4a>
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d008      	beq.n	8007dae <USBD_LL_SetupStage+0x5a>
 8007d9c:	e017      	b.n	8007dce <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007da4:	4619      	mov	r1, r3
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f9ca 	bl	8008140 <USBD_StdDevReq>
      break;
 8007dac:	e01a      	b.n	8007de4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007db4:	4619      	mov	r1, r3
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fa2c 	bl	8008214 <USBD_StdItfReq>
      break;
 8007dbc:	e012      	b.n	8007de4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fa6c 	bl	80082a4 <USBD_StdEPReq>
      break;
 8007dcc:	e00a      	b.n	8007de4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007dd4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	4619      	mov	r1, r3
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f001 fb0f 	bl	8009400 <USBD_LL_StallEP>
      break;
 8007de2:	bf00      	nop
  }

  return USBD_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b086      	sub	sp, #24
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	60f8      	str	r0, [r7, #12]
 8007df6:	460b      	mov	r3, r1
 8007df8:	607a      	str	r2, [r7, #4]
 8007dfa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007dfc:	7afb      	ldrb	r3, [r7, #11]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d14b      	bne.n	8007e9a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007e08:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e10:	2b03      	cmp	r3, #3
 8007e12:	d134      	bne.n	8007e7e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	68da      	ldr	r2, [r3, #12]
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d919      	bls.n	8007e54 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	68da      	ldr	r2, [r3, #12]
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	1ad2      	subs	r2, r2, r3
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	68da      	ldr	r2, [r3, #12]
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d203      	bcs.n	8007e42 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	e002      	b.n	8007e48 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	461a      	mov	r2, r3
 8007e4a:	6879      	ldr	r1, [r7, #4]
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f000 ff56 	bl	8008cfe <USBD_CtlContinueRx>
 8007e52:	e038      	b.n	8007ec6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00a      	beq.n	8007e76 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	d105      	bne.n	8007e76 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f000 ff53 	bl	8008d22 <USBD_CtlSendStatus>
 8007e7c:	e023      	b.n	8007ec6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e84:	2b05      	cmp	r3, #5
 8007e86:	d11e      	bne.n	8007ec6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007e90:	2100      	movs	r1, #0
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f001 fab4 	bl	8009400 <USBD_LL_StallEP>
 8007e98:	e015      	b.n	8007ec6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ea0:	699b      	ldr	r3, [r3, #24]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00d      	beq.n	8007ec2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007eac:	2b03      	cmp	r3, #3
 8007eae:	d108      	bne.n	8007ec2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	7afa      	ldrb	r2, [r7, #11]
 8007eba:	4611      	mov	r1, r2
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	4798      	blx	r3
 8007ec0:	e001      	b.n	8007ec6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007ec2:	2302      	movs	r3, #2
 8007ec4:	e000      	b.n	8007ec8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3718      	adds	r7, #24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	460b      	mov	r3, r1
 8007eda:	607a      	str	r2, [r7, #4]
 8007edc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007ede:	7afb      	ldrb	r3, [r7, #11]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d17f      	bne.n	8007fe4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	3314      	adds	r3, #20
 8007ee8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d15c      	bne.n	8007fae <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	68da      	ldr	r2, [r3, #12]
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	691b      	ldr	r3, [r3, #16]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d915      	bls.n	8007f2c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	68da      	ldr	r2, [r3, #12]
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	1ad2      	subs	r2, r2, r3
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	461a      	mov	r2, r3
 8007f16:	6879      	ldr	r1, [r7, #4]
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f000 fec0 	bl	8008c9e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f1e:	2300      	movs	r3, #0
 8007f20:	2200      	movs	r2, #0
 8007f22:	2100      	movs	r1, #0
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	f001 fb17 	bl	8009558 <USBD_LL_PrepareReceive>
 8007f2a:	e04e      	b.n	8007fca <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	697a      	ldr	r2, [r7, #20]
 8007f32:	6912      	ldr	r2, [r2, #16]
 8007f34:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f38:	fb01 f202 	mul.w	r2, r1, r2
 8007f3c:	1a9b      	subs	r3, r3, r2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d11c      	bne.n	8007f7c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	689a      	ldr	r2, [r3, #8]
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d316      	bcc.n	8007f7c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	689a      	ldr	r2, [r3, #8]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d20f      	bcs.n	8007f7c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	2100      	movs	r1, #0
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f000 fe9c 	bl	8008c9e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f6e:	2300      	movs	r3, #0
 8007f70:	2200      	movs	r2, #0
 8007f72:	2100      	movs	r1, #0
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f001 faef 	bl	8009558 <USBD_LL_PrepareReceive>
 8007f7a:	e026      	b.n	8007fca <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00a      	beq.n	8007f9e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f8e:	2b03      	cmp	r3, #3
 8007f90:	d105      	bne.n	8007f9e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	68f8      	ldr	r0, [r7, #12]
 8007f9c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007f9e:	2180      	movs	r1, #128	; 0x80
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f001 fa2d 	bl	8009400 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f000 fece 	bl	8008d48 <USBD_CtlReceiveStatus>
 8007fac:	e00d      	b.n	8007fca <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007fb4:	2b04      	cmp	r3, #4
 8007fb6:	d004      	beq.n	8007fc2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d103      	bne.n	8007fca <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007fc2:	2180      	movs	r1, #128	; 0x80
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f001 fa1b 	bl	8009400 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d11d      	bne.n	8008010 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	f7ff fe81 	bl	8007cdc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007fe2:	e015      	b.n	8008010 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fea:	695b      	ldr	r3, [r3, #20]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00d      	beq.n	800800c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	d108      	bne.n	800800c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	7afa      	ldrb	r2, [r7, #11]
 8008004:	4611      	mov	r1, r2
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	4798      	blx	r3
 800800a:	e001      	b.n	8008010 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800800c:	2302      	movs	r3, #2
 800800e:	e000      	b.n	8008012 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b082      	sub	sp, #8
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008022:	2340      	movs	r3, #64	; 0x40
 8008024:	2200      	movs	r2, #0
 8008026:	2100      	movs	r1, #0
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f001 f9a4 	bl	8009376 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2201      	movs	r2, #1
 8008032:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2240      	movs	r2, #64	; 0x40
 800803a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800803e:	2340      	movs	r3, #64	; 0x40
 8008040:	2200      	movs	r2, #0
 8008042:	2180      	movs	r1, #128	; 0x80
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f001 f996 	bl	8009376 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2201      	movs	r2, #1
 800804e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2240      	movs	r2, #64	; 0x40
 8008054:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800807a:	2b00      	cmp	r3, #0
 800807c:	d009      	beq.n	8008092 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	6852      	ldr	r2, [r2, #4]
 800808a:	b2d2      	uxtb	r2, r2
 800808c:	4611      	mov	r1, r2
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	4798      	blx	r3
  }

  return USBD_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	460b      	mov	r3, r1
 80080a6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	78fa      	ldrb	r2, [r7, #3]
 80080ac:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bc80      	pop	{r7}
 80080b8:	4770      	bx	lr

080080ba <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80080ba:	b480      	push	{r7}
 80080bc:	b083      	sub	sp, #12
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2204      	movs	r2, #4
 80080d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	bc80      	pop	{r7}
 80080e0:	4770      	bx	lr

080080e2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80080e2:	b480      	push	{r7}
 80080e4:	b083      	sub	sp, #12
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080f0:	2b04      	cmp	r3, #4
 80080f2:	d105      	bne.n	8008100 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	370c      	adds	r7, #12
 8008106:	46bd      	mov	sp, r7
 8008108:	bc80      	pop	{r7}
 800810a:	4770      	bx	lr

0800810c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800811a:	2b03      	cmp	r3, #3
 800811c:	d10b      	bne.n	8008136 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008124:	69db      	ldr	r3, [r3, #28]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d005      	beq.n	8008136 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008130:	69db      	ldr	r3, [r3, #28]
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3708      	adds	r7, #8
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800814a:	2300      	movs	r3, #0
 800814c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008156:	2b40      	cmp	r3, #64	; 0x40
 8008158:	d005      	beq.n	8008166 <USBD_StdDevReq+0x26>
 800815a:	2b40      	cmp	r3, #64	; 0x40
 800815c:	d84f      	bhi.n	80081fe <USBD_StdDevReq+0xbe>
 800815e:	2b00      	cmp	r3, #0
 8008160:	d009      	beq.n	8008176 <USBD_StdDevReq+0x36>
 8008162:	2b20      	cmp	r3, #32
 8008164:	d14b      	bne.n	80081fe <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	4798      	blx	r3
      break;
 8008174:	e048      	b.n	8008208 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	785b      	ldrb	r3, [r3, #1]
 800817a:	2b09      	cmp	r3, #9
 800817c:	d839      	bhi.n	80081f2 <USBD_StdDevReq+0xb2>
 800817e:	a201      	add	r2, pc, #4	; (adr r2, 8008184 <USBD_StdDevReq+0x44>)
 8008180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008184:	080081d5 	.word	0x080081d5
 8008188:	080081e9 	.word	0x080081e9
 800818c:	080081f3 	.word	0x080081f3
 8008190:	080081df 	.word	0x080081df
 8008194:	080081f3 	.word	0x080081f3
 8008198:	080081b7 	.word	0x080081b7
 800819c:	080081ad 	.word	0x080081ad
 80081a0:	080081f3 	.word	0x080081f3
 80081a4:	080081cb 	.word	0x080081cb
 80081a8:	080081c1 	.word	0x080081c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80081ac:	6839      	ldr	r1, [r7, #0]
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 f9dc 	bl	800856c <USBD_GetDescriptor>
          break;
 80081b4:	e022      	b.n	80081fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80081b6:	6839      	ldr	r1, [r7, #0]
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 fb3f 	bl	800883c <USBD_SetAddress>
          break;
 80081be:	e01d      	b.n	80081fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80081c0:	6839      	ldr	r1, [r7, #0]
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fb7e 	bl	80088c4 <USBD_SetConfig>
          break;
 80081c8:	e018      	b.n	80081fc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80081ca:	6839      	ldr	r1, [r7, #0]
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fc07 	bl	80089e0 <USBD_GetConfig>
          break;
 80081d2:	e013      	b.n	80081fc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fc37 	bl	8008a4a <USBD_GetStatus>
          break;
 80081dc:	e00e      	b.n	80081fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80081de:	6839      	ldr	r1, [r7, #0]
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fc65 	bl	8008ab0 <USBD_SetFeature>
          break;
 80081e6:	e009      	b.n	80081fc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80081e8:	6839      	ldr	r1, [r7, #0]
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fc74 	bl	8008ad8 <USBD_ClrFeature>
          break;
 80081f0:	e004      	b.n	80081fc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fccc 	bl	8008b92 <USBD_CtlError>
          break;
 80081fa:	bf00      	nop
      }
      break;
 80081fc:	e004      	b.n	8008208 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fcc6 	bl	8008b92 <USBD_CtlError>
      break;
 8008206:	bf00      	nop
  }

  return ret;
 8008208:	7bfb      	ldrb	r3, [r7, #15]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop

08008214 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800822a:	2b40      	cmp	r3, #64	; 0x40
 800822c:	d005      	beq.n	800823a <USBD_StdItfReq+0x26>
 800822e:	2b40      	cmp	r3, #64	; 0x40
 8008230:	d82e      	bhi.n	8008290 <USBD_StdItfReq+0x7c>
 8008232:	2b00      	cmp	r3, #0
 8008234:	d001      	beq.n	800823a <USBD_StdItfReq+0x26>
 8008236:	2b20      	cmp	r3, #32
 8008238:	d12a      	bne.n	8008290 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008240:	3b01      	subs	r3, #1
 8008242:	2b02      	cmp	r3, #2
 8008244:	d81d      	bhi.n	8008282 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	889b      	ldrh	r3, [r3, #4]
 800824a:	b2db      	uxtb	r3, r3
 800824c:	2b01      	cmp	r3, #1
 800824e:	d813      	bhi.n	8008278 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	6839      	ldr	r1, [r7, #0]
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	4798      	blx	r3
 800825e:	4603      	mov	r3, r0
 8008260:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	88db      	ldrh	r3, [r3, #6]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d110      	bne.n	800828c <USBD_StdItfReq+0x78>
 800826a:	7bfb      	ldrb	r3, [r7, #15]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10d      	bne.n	800828c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fd56 	bl	8008d22 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008276:	e009      	b.n	800828c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008278:	6839      	ldr	r1, [r7, #0]
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fc89 	bl	8008b92 <USBD_CtlError>
          break;
 8008280:	e004      	b.n	800828c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fc84 	bl	8008b92 <USBD_CtlError>
          break;
 800828a:	e000      	b.n	800828e <USBD_StdItfReq+0x7a>
          break;
 800828c:	bf00      	nop
      }
      break;
 800828e:	e004      	b.n	800829a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008290:	6839      	ldr	r1, [r7, #0]
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 fc7d 	bl	8008b92 <USBD_CtlError>
      break;
 8008298:	bf00      	nop
  }

  return USBD_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	889b      	ldrh	r3, [r3, #4]
 80082b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082c0:	2b40      	cmp	r3, #64	; 0x40
 80082c2:	d007      	beq.n	80082d4 <USBD_StdEPReq+0x30>
 80082c4:	2b40      	cmp	r3, #64	; 0x40
 80082c6:	f200 8146 	bhi.w	8008556 <USBD_StdEPReq+0x2b2>
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00a      	beq.n	80082e4 <USBD_StdEPReq+0x40>
 80082ce:	2b20      	cmp	r3, #32
 80082d0:	f040 8141 	bne.w	8008556 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	6839      	ldr	r1, [r7, #0]
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	4798      	blx	r3
      break;
 80082e2:	e13d      	b.n	8008560 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082ec:	2b20      	cmp	r3, #32
 80082ee:	d10a      	bne.n	8008306 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	6839      	ldr	r1, [r7, #0]
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	4798      	blx	r3
 80082fe:	4603      	mov	r3, r0
 8008300:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008302:	7bfb      	ldrb	r3, [r7, #15]
 8008304:	e12d      	b.n	8008562 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	785b      	ldrb	r3, [r3, #1]
 800830a:	2b03      	cmp	r3, #3
 800830c:	d007      	beq.n	800831e <USBD_StdEPReq+0x7a>
 800830e:	2b03      	cmp	r3, #3
 8008310:	f300 811b 	bgt.w	800854a <USBD_StdEPReq+0x2a6>
 8008314:	2b00      	cmp	r3, #0
 8008316:	d072      	beq.n	80083fe <USBD_StdEPReq+0x15a>
 8008318:	2b01      	cmp	r3, #1
 800831a:	d03a      	beq.n	8008392 <USBD_StdEPReq+0xee>
 800831c:	e115      	b.n	800854a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008324:	2b02      	cmp	r3, #2
 8008326:	d002      	beq.n	800832e <USBD_StdEPReq+0x8a>
 8008328:	2b03      	cmp	r3, #3
 800832a:	d015      	beq.n	8008358 <USBD_StdEPReq+0xb4>
 800832c:	e02b      	b.n	8008386 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800832e:	7bbb      	ldrb	r3, [r7, #14]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00c      	beq.n	800834e <USBD_StdEPReq+0xaa>
 8008334:	7bbb      	ldrb	r3, [r7, #14]
 8008336:	2b80      	cmp	r3, #128	; 0x80
 8008338:	d009      	beq.n	800834e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800833a:	7bbb      	ldrb	r3, [r7, #14]
 800833c:	4619      	mov	r1, r3
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f001 f85e 	bl	8009400 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008344:	2180      	movs	r1, #128	; 0x80
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f001 f85a 	bl	8009400 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800834c:	e020      	b.n	8008390 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800834e:	6839      	ldr	r1, [r7, #0]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 fc1e 	bl	8008b92 <USBD_CtlError>
              break;
 8008356:	e01b      	b.n	8008390 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	885b      	ldrh	r3, [r3, #2]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10e      	bne.n	800837e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008360:	7bbb      	ldrb	r3, [r7, #14]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00b      	beq.n	800837e <USBD_StdEPReq+0xda>
 8008366:	7bbb      	ldrb	r3, [r7, #14]
 8008368:	2b80      	cmp	r3, #128	; 0x80
 800836a:	d008      	beq.n	800837e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	88db      	ldrh	r3, [r3, #6]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d104      	bne.n	800837e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008374:	7bbb      	ldrb	r3, [r7, #14]
 8008376:	4619      	mov	r1, r3
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f001 f841 	bl	8009400 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fccf 	bl	8008d22 <USBD_CtlSendStatus>

              break;
 8008384:	e004      	b.n	8008390 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fc02 	bl	8008b92 <USBD_CtlError>
              break;
 800838e:	bf00      	nop
          }
          break;
 8008390:	e0e0      	b.n	8008554 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008398:	2b02      	cmp	r3, #2
 800839a:	d002      	beq.n	80083a2 <USBD_StdEPReq+0xfe>
 800839c:	2b03      	cmp	r3, #3
 800839e:	d015      	beq.n	80083cc <USBD_StdEPReq+0x128>
 80083a0:	e026      	b.n	80083f0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083a2:	7bbb      	ldrb	r3, [r7, #14]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00c      	beq.n	80083c2 <USBD_StdEPReq+0x11e>
 80083a8:	7bbb      	ldrb	r3, [r7, #14]
 80083aa:	2b80      	cmp	r3, #128	; 0x80
 80083ac:	d009      	beq.n	80083c2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80083ae:	7bbb      	ldrb	r3, [r7, #14]
 80083b0:	4619      	mov	r1, r3
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f001 f824 	bl	8009400 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80083b8:	2180      	movs	r1, #128	; 0x80
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f001 f820 	bl	8009400 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083c0:	e01c      	b.n	80083fc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 fbe4 	bl	8008b92 <USBD_CtlError>
              break;
 80083ca:	e017      	b.n	80083fc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	885b      	ldrh	r3, [r3, #2]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d112      	bne.n	80083fa <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80083d4:	7bbb      	ldrb	r3, [r7, #14]
 80083d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d004      	beq.n	80083e8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80083de:	7bbb      	ldrb	r3, [r7, #14]
 80083e0:	4619      	mov	r1, r3
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f001 f82b 	bl	800943e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fc9a 	bl	8008d22 <USBD_CtlSendStatus>
              }
              break;
 80083ee:	e004      	b.n	80083fa <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fbcd 	bl	8008b92 <USBD_CtlError>
              break;
 80083f8:	e000      	b.n	80083fc <USBD_StdEPReq+0x158>
              break;
 80083fa:	bf00      	nop
          }
          break;
 80083fc:	e0aa      	b.n	8008554 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008404:	2b02      	cmp	r3, #2
 8008406:	d002      	beq.n	800840e <USBD_StdEPReq+0x16a>
 8008408:	2b03      	cmp	r3, #3
 800840a:	d032      	beq.n	8008472 <USBD_StdEPReq+0x1ce>
 800840c:	e097      	b.n	800853e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800840e:	7bbb      	ldrb	r3, [r7, #14]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d007      	beq.n	8008424 <USBD_StdEPReq+0x180>
 8008414:	7bbb      	ldrb	r3, [r7, #14]
 8008416:	2b80      	cmp	r3, #128	; 0x80
 8008418:	d004      	beq.n	8008424 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fbb8 	bl	8008b92 <USBD_CtlError>
                break;
 8008422:	e091      	b.n	8008548 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008424:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008428:	2b00      	cmp	r3, #0
 800842a:	da0b      	bge.n	8008444 <USBD_StdEPReq+0x1a0>
 800842c:	7bbb      	ldrb	r3, [r7, #14]
 800842e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008432:	4613      	mov	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4413      	add	r3, r2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	3310      	adds	r3, #16
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	4413      	add	r3, r2
 8008440:	3304      	adds	r3, #4
 8008442:	e00b      	b.n	800845c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008444:	7bbb      	ldrb	r3, [r7, #14]
 8008446:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800844a:	4613      	mov	r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4413      	add	r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	4413      	add	r3, r2
 800845a:	3304      	adds	r3, #4
 800845c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	2200      	movs	r2, #0
 8008462:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2202      	movs	r2, #2
 8008468:	4619      	mov	r1, r3
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fbfb 	bl	8008c66 <USBD_CtlSendData>
              break;
 8008470:	e06a      	b.n	8008548 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008472:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008476:	2b00      	cmp	r3, #0
 8008478:	da11      	bge.n	800849e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800847a:	7bbb      	ldrb	r3, [r7, #14]
 800847c:	f003 020f 	and.w	r2, r3, #15
 8008480:	6879      	ldr	r1, [r7, #4]
 8008482:	4613      	mov	r3, r2
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4413      	add	r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	440b      	add	r3, r1
 800848c:	3318      	adds	r3, #24
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d117      	bne.n	80084c4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fb7b 	bl	8008b92 <USBD_CtlError>
                  break;
 800849c:	e054      	b.n	8008548 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800849e:	7bbb      	ldrb	r3, [r7, #14]
 80084a0:	f003 020f 	and.w	r2, r3, #15
 80084a4:	6879      	ldr	r1, [r7, #4]
 80084a6:	4613      	mov	r3, r2
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	4413      	add	r3, r2
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	440b      	add	r3, r1
 80084b0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d104      	bne.n	80084c4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80084ba:	6839      	ldr	r1, [r7, #0]
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fb68 	bl	8008b92 <USBD_CtlError>
                  break;
 80084c2:	e041      	b.n	8008548 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	da0b      	bge.n	80084e4 <USBD_StdEPReq+0x240>
 80084cc:	7bbb      	ldrb	r3, [r7, #14]
 80084ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084d2:	4613      	mov	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	3310      	adds	r3, #16
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	4413      	add	r3, r2
 80084e0:	3304      	adds	r3, #4
 80084e2:	e00b      	b.n	80084fc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084e4:	7bbb      	ldrb	r3, [r7, #14]
 80084e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084ea:	4613      	mov	r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	4413      	add	r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	4413      	add	r3, r2
 80084fa:	3304      	adds	r3, #4
 80084fc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80084fe:	7bbb      	ldrb	r3, [r7, #14]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d002      	beq.n	800850a <USBD_StdEPReq+0x266>
 8008504:	7bbb      	ldrb	r3, [r7, #14]
 8008506:	2b80      	cmp	r3, #128	; 0x80
 8008508:	d103      	bne.n	8008512 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	2200      	movs	r2, #0
 800850e:	601a      	str	r2, [r3, #0]
 8008510:	e00e      	b.n	8008530 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008512:	7bbb      	ldrb	r3, [r7, #14]
 8008514:	4619      	mov	r1, r3
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 ffb0 	bl	800947c <USBD_LL_IsStallEP>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d003      	beq.n	800852a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	2201      	movs	r2, #1
 8008526:	601a      	str	r2, [r3, #0]
 8008528:	e002      	b.n	8008530 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	2200      	movs	r2, #0
 800852e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	2202      	movs	r2, #2
 8008534:	4619      	mov	r1, r3
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fb95 	bl	8008c66 <USBD_CtlSendData>
              break;
 800853c:	e004      	b.n	8008548 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fb26 	bl	8008b92 <USBD_CtlError>
              break;
 8008546:	bf00      	nop
          }
          break;
 8008548:	e004      	b.n	8008554 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fb20 	bl	8008b92 <USBD_CtlError>
          break;
 8008552:	bf00      	nop
      }
      break;
 8008554:	e004      	b.n	8008560 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008556:	6839      	ldr	r1, [r7, #0]
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fb1a 	bl	8008b92 <USBD_CtlError>
      break;
 800855e:	bf00      	nop
  }

  return ret;
 8008560:	7bfb      	ldrb	r3, [r7, #15]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
	...

0800856c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008576:	2300      	movs	r3, #0
 8008578:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800857a:	2300      	movs	r3, #0
 800857c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800857e:	2300      	movs	r3, #0
 8008580:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	885b      	ldrh	r3, [r3, #2]
 8008586:	0a1b      	lsrs	r3, r3, #8
 8008588:	b29b      	uxth	r3, r3
 800858a:	3b01      	subs	r3, #1
 800858c:	2b06      	cmp	r3, #6
 800858e:	f200 8128 	bhi.w	80087e2 <USBD_GetDescriptor+0x276>
 8008592:	a201      	add	r2, pc, #4	; (adr r2, 8008598 <USBD_GetDescriptor+0x2c>)
 8008594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008598:	080085b5 	.word	0x080085b5
 800859c:	080085cd 	.word	0x080085cd
 80085a0:	0800860d 	.word	0x0800860d
 80085a4:	080087e3 	.word	0x080087e3
 80085a8:	080087e3 	.word	0x080087e3
 80085ac:	08008783 	.word	0x08008783
 80085b0:	080087af 	.word	0x080087af
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	7c12      	ldrb	r2, [r2, #16]
 80085c0:	f107 0108 	add.w	r1, r7, #8
 80085c4:	4610      	mov	r0, r2
 80085c6:	4798      	blx	r3
 80085c8:	60f8      	str	r0, [r7, #12]
      break;
 80085ca:	e112      	b.n	80087f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	7c1b      	ldrb	r3, [r3, #16]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d10d      	bne.n	80085f0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085dc:	f107 0208 	add.w	r2, r7, #8
 80085e0:	4610      	mov	r0, r2
 80085e2:	4798      	blx	r3
 80085e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	3301      	adds	r3, #1
 80085ea:	2202      	movs	r2, #2
 80085ec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80085ee:	e100      	b.n	80087f2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f8:	f107 0208 	add.w	r2, r7, #8
 80085fc:	4610      	mov	r0, r2
 80085fe:	4798      	blx	r3
 8008600:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3301      	adds	r3, #1
 8008606:	2202      	movs	r2, #2
 8008608:	701a      	strb	r2, [r3, #0]
      break;
 800860a:	e0f2      	b.n	80087f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	885b      	ldrh	r3, [r3, #2]
 8008610:	b2db      	uxtb	r3, r3
 8008612:	2b05      	cmp	r3, #5
 8008614:	f200 80ac 	bhi.w	8008770 <USBD_GetDescriptor+0x204>
 8008618:	a201      	add	r2, pc, #4	; (adr r2, 8008620 <USBD_GetDescriptor+0xb4>)
 800861a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861e:	bf00      	nop
 8008620:	08008639 	.word	0x08008639
 8008624:	0800866d 	.word	0x0800866d
 8008628:	080086a1 	.word	0x080086a1
 800862c:	080086d5 	.word	0x080086d5
 8008630:	08008709 	.word	0x08008709
 8008634:	0800873d 	.word	0x0800873d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00b      	beq.n	800865c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	7c12      	ldrb	r2, [r2, #16]
 8008650:	f107 0108 	add.w	r1, r7, #8
 8008654:	4610      	mov	r0, r2
 8008656:	4798      	blx	r3
 8008658:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800865a:	e091      	b.n	8008780 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 fa97 	bl	8008b92 <USBD_CtlError>
            err++;
 8008664:	7afb      	ldrb	r3, [r7, #11]
 8008666:	3301      	adds	r3, #1
 8008668:	72fb      	strb	r3, [r7, #11]
          break;
 800866a:	e089      	b.n	8008780 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00b      	beq.n	8008690 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	7c12      	ldrb	r2, [r2, #16]
 8008684:	f107 0108 	add.w	r1, r7, #8
 8008688:	4610      	mov	r0, r2
 800868a:	4798      	blx	r3
 800868c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800868e:	e077      	b.n	8008780 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008690:	6839      	ldr	r1, [r7, #0]
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fa7d 	bl	8008b92 <USBD_CtlError>
            err++;
 8008698:	7afb      	ldrb	r3, [r7, #11]
 800869a:	3301      	adds	r3, #1
 800869c:	72fb      	strb	r3, [r7, #11]
          break;
 800869e:	e06f      	b.n	8008780 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00b      	beq.n	80086c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	7c12      	ldrb	r2, [r2, #16]
 80086b8:	f107 0108 	add.w	r1, r7, #8
 80086bc:	4610      	mov	r0, r2
 80086be:	4798      	blx	r3
 80086c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086c2:	e05d      	b.n	8008780 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086c4:	6839      	ldr	r1, [r7, #0]
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 fa63 	bl	8008b92 <USBD_CtlError>
            err++;
 80086cc:	7afb      	ldrb	r3, [r7, #11]
 80086ce:	3301      	adds	r3, #1
 80086d0:	72fb      	strb	r3, [r7, #11]
          break;
 80086d2:	e055      	b.n	8008780 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00b      	beq.n	80086f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086e6:	691b      	ldr	r3, [r3, #16]
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	7c12      	ldrb	r2, [r2, #16]
 80086ec:	f107 0108 	add.w	r1, r7, #8
 80086f0:	4610      	mov	r0, r2
 80086f2:	4798      	blx	r3
 80086f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086f6:	e043      	b.n	8008780 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086f8:	6839      	ldr	r1, [r7, #0]
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fa49 	bl	8008b92 <USBD_CtlError>
            err++;
 8008700:	7afb      	ldrb	r3, [r7, #11]
 8008702:	3301      	adds	r3, #1
 8008704:	72fb      	strb	r3, [r7, #11]
          break;
 8008706:	e03b      	b.n	8008780 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800870e:	695b      	ldr	r3, [r3, #20]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00b      	beq.n	800872c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800871a:	695b      	ldr	r3, [r3, #20]
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	7c12      	ldrb	r2, [r2, #16]
 8008720:	f107 0108 	add.w	r1, r7, #8
 8008724:	4610      	mov	r0, r2
 8008726:	4798      	blx	r3
 8008728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800872a:	e029      	b.n	8008780 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800872c:	6839      	ldr	r1, [r7, #0]
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fa2f 	bl	8008b92 <USBD_CtlError>
            err++;
 8008734:	7afb      	ldrb	r3, [r7, #11]
 8008736:	3301      	adds	r3, #1
 8008738:	72fb      	strb	r3, [r7, #11]
          break;
 800873a:	e021      	b.n	8008780 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00b      	beq.n	8008760 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800874e:	699b      	ldr	r3, [r3, #24]
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	7c12      	ldrb	r2, [r2, #16]
 8008754:	f107 0108 	add.w	r1, r7, #8
 8008758:	4610      	mov	r0, r2
 800875a:	4798      	blx	r3
 800875c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800875e:	e00f      	b.n	8008780 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fa15 	bl	8008b92 <USBD_CtlError>
            err++;
 8008768:	7afb      	ldrb	r3, [r7, #11]
 800876a:	3301      	adds	r3, #1
 800876c:	72fb      	strb	r3, [r7, #11]
          break;
 800876e:	e007      	b.n	8008780 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 fa0d 	bl	8008b92 <USBD_CtlError>
          err++;
 8008778:	7afb      	ldrb	r3, [r7, #11]
 800877a:	3301      	adds	r3, #1
 800877c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800877e:	e038      	b.n	80087f2 <USBD_GetDescriptor+0x286>
 8008780:	e037      	b.n	80087f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	7c1b      	ldrb	r3, [r3, #16]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d109      	bne.n	800879e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008792:	f107 0208 	add.w	r2, r7, #8
 8008796:	4610      	mov	r0, r2
 8008798:	4798      	blx	r3
 800879a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800879c:	e029      	b.n	80087f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800879e:	6839      	ldr	r1, [r7, #0]
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 f9f6 	bl	8008b92 <USBD_CtlError>
        err++;
 80087a6:	7afb      	ldrb	r3, [r7, #11]
 80087a8:	3301      	adds	r3, #1
 80087aa:	72fb      	strb	r3, [r7, #11]
      break;
 80087ac:	e021      	b.n	80087f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	7c1b      	ldrb	r3, [r3, #16]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10d      	bne.n	80087d2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087be:	f107 0208 	add.w	r2, r7, #8
 80087c2:	4610      	mov	r0, r2
 80087c4:	4798      	blx	r3
 80087c6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	3301      	adds	r3, #1
 80087cc:	2207      	movs	r2, #7
 80087ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087d0:	e00f      	b.n	80087f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80087d2:	6839      	ldr	r1, [r7, #0]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 f9dc 	bl	8008b92 <USBD_CtlError>
        err++;
 80087da:	7afb      	ldrb	r3, [r7, #11]
 80087dc:	3301      	adds	r3, #1
 80087de:	72fb      	strb	r3, [r7, #11]
      break;
 80087e0:	e007      	b.n	80087f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80087e2:	6839      	ldr	r1, [r7, #0]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 f9d4 	bl	8008b92 <USBD_CtlError>
      err++;
 80087ea:	7afb      	ldrb	r3, [r7, #11]
 80087ec:	3301      	adds	r3, #1
 80087ee:	72fb      	strb	r3, [r7, #11]
      break;
 80087f0:	bf00      	nop
  }

  if (err != 0U)
 80087f2:	7afb      	ldrb	r3, [r7, #11]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d11c      	bne.n	8008832 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80087f8:	893b      	ldrh	r3, [r7, #8]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d011      	beq.n	8008822 <USBD_GetDescriptor+0x2b6>
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	88db      	ldrh	r3, [r3, #6]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00d      	beq.n	8008822 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	88da      	ldrh	r2, [r3, #6]
 800880a:	893b      	ldrh	r3, [r7, #8]
 800880c:	4293      	cmp	r3, r2
 800880e:	bf28      	it	cs
 8008810:	4613      	movcs	r3, r2
 8008812:	b29b      	uxth	r3, r3
 8008814:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008816:	893b      	ldrh	r3, [r7, #8]
 8008818:	461a      	mov	r2, r3
 800881a:	68f9      	ldr	r1, [r7, #12]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fa22 	bl	8008c66 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	88db      	ldrh	r3, [r3, #6]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d104      	bne.n	8008834 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fa79 	bl	8008d22 <USBD_CtlSendStatus>
 8008830:	e000      	b.n	8008834 <USBD_GetDescriptor+0x2c8>
    return;
 8008832:	bf00      	nop
    }
  }
}
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop

0800883c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	889b      	ldrh	r3, [r3, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d130      	bne.n	80088b0 <USBD_SetAddress+0x74>
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	88db      	ldrh	r3, [r3, #6]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d12c      	bne.n	80088b0 <USBD_SetAddress+0x74>
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	885b      	ldrh	r3, [r3, #2]
 800885a:	2b7f      	cmp	r3, #127	; 0x7f
 800885c:	d828      	bhi.n	80088b0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	885b      	ldrh	r3, [r3, #2]
 8008862:	b2db      	uxtb	r3, r3
 8008864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008868:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008870:	2b03      	cmp	r3, #3
 8008872:	d104      	bne.n	800887e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008874:	6839      	ldr	r1, [r7, #0]
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f98b 	bl	8008b92 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800887c:	e01d      	b.n	80088ba <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	7bfa      	ldrb	r2, [r7, #15]
 8008882:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008886:	7bfb      	ldrb	r3, [r7, #15]
 8008888:	4619      	mov	r1, r3
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 fe22 	bl	80094d4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 fa46 	bl	8008d22 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008896:	7bfb      	ldrb	r3, [r7, #15]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d004      	beq.n	80088a6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2202      	movs	r2, #2
 80088a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088a4:	e009      	b.n	80088ba <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088ae:	e004      	b.n	80088ba <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80088b0:	6839      	ldr	r1, [r7, #0]
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 f96d 	bl	8008b92 <USBD_CtlError>
  }
}
 80088b8:	bf00      	nop
 80088ba:	bf00      	nop
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
	...

080088c4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	885b      	ldrh	r3, [r3, #2]
 80088d2:	b2da      	uxtb	r2, r3
 80088d4:	4b41      	ldr	r3, [pc, #260]	; (80089dc <USBD_SetConfig+0x118>)
 80088d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80088d8:	4b40      	ldr	r3, [pc, #256]	; (80089dc <USBD_SetConfig+0x118>)
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d904      	bls.n	80088ea <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80088e0:	6839      	ldr	r1, [r7, #0]
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 f955 	bl	8008b92 <USBD_CtlError>
 80088e8:	e075      	b.n	80089d6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d002      	beq.n	80088fa <USBD_SetConfig+0x36>
 80088f4:	2b03      	cmp	r3, #3
 80088f6:	d023      	beq.n	8008940 <USBD_SetConfig+0x7c>
 80088f8:	e062      	b.n	80089c0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80088fa:	4b38      	ldr	r3, [pc, #224]	; (80089dc <USBD_SetConfig+0x118>)
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d01a      	beq.n	8008938 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008902:	4b36      	ldr	r3, [pc, #216]	; (80089dc <USBD_SetConfig+0x118>)
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	461a      	mov	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2203      	movs	r2, #3
 8008910:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008914:	4b31      	ldr	r3, [pc, #196]	; (80089dc <USBD_SetConfig+0x118>)
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	4619      	mov	r1, r3
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f7ff f9e8 	bl	8007cf0 <USBD_SetClassConfig>
 8008920:	4603      	mov	r3, r0
 8008922:	2b02      	cmp	r3, #2
 8008924:	d104      	bne.n	8008930 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008926:	6839      	ldr	r1, [r7, #0]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f932 	bl	8008b92 <USBD_CtlError>
            return;
 800892e:	e052      	b.n	80089d6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f9f6 	bl	8008d22 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008936:	e04e      	b.n	80089d6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 f9f2 	bl	8008d22 <USBD_CtlSendStatus>
        break;
 800893e:	e04a      	b.n	80089d6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008940:	4b26      	ldr	r3, [pc, #152]	; (80089dc <USBD_SetConfig+0x118>)
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d112      	bne.n	800896e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2202      	movs	r2, #2
 800894c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008950:	4b22      	ldr	r3, [pc, #136]	; (80089dc <USBD_SetConfig+0x118>)
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	461a      	mov	r2, r3
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800895a:	4b20      	ldr	r3, [pc, #128]	; (80089dc <USBD_SetConfig+0x118>)
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	4619      	mov	r1, r3
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f7ff f9e4 	bl	8007d2e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f9db 	bl	8008d22 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800896c:	e033      	b.n	80089d6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800896e:	4b1b      	ldr	r3, [pc, #108]	; (80089dc <USBD_SetConfig+0x118>)
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	461a      	mov	r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	429a      	cmp	r2, r3
 800897a:	d01d      	beq.n	80089b8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	b2db      	uxtb	r3, r3
 8008982:	4619      	mov	r1, r3
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f7ff f9d2 	bl	8007d2e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800898a:	4b14      	ldr	r3, [pc, #80]	; (80089dc <USBD_SetConfig+0x118>)
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	461a      	mov	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008994:	4b11      	ldr	r3, [pc, #68]	; (80089dc <USBD_SetConfig+0x118>)
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	4619      	mov	r1, r3
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f7ff f9a8 	bl	8007cf0 <USBD_SetClassConfig>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	d104      	bne.n	80089b0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f8f2 	bl	8008b92 <USBD_CtlError>
            return;
 80089ae:	e012      	b.n	80089d6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 f9b6 	bl	8008d22 <USBD_CtlSendStatus>
        break;
 80089b6:	e00e      	b.n	80089d6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 f9b2 	bl	8008d22 <USBD_CtlSendStatus>
        break;
 80089be:	e00a      	b.n	80089d6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f8e5 	bl	8008b92 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80089c8:	4b04      	ldr	r3, [pc, #16]	; (80089dc <USBD_SetConfig+0x118>)
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	4619      	mov	r1, r3
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f7ff f9ad 	bl	8007d2e <USBD_ClrClassConfig>
        break;
 80089d4:	bf00      	nop
    }
  }
}
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	20000514 	.word	0x20000514

080089e0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	88db      	ldrh	r3, [r3, #6]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d004      	beq.n	80089fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80089f2:	6839      	ldr	r1, [r7, #0]
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 f8cc 	bl	8008b92 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80089fa:	e022      	b.n	8008a42 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	dc02      	bgt.n	8008a0c <USBD_GetConfig+0x2c>
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	dc03      	bgt.n	8008a12 <USBD_GetConfig+0x32>
 8008a0a:	e015      	b.n	8008a38 <USBD_GetConfig+0x58>
 8008a0c:	2b03      	cmp	r3, #3
 8008a0e:	d00b      	beq.n	8008a28 <USBD_GetConfig+0x48>
 8008a10:	e012      	b.n	8008a38 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	3308      	adds	r3, #8
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	4619      	mov	r1, r3
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f920 	bl	8008c66 <USBD_CtlSendData>
        break;
 8008a26:	e00c      	b.n	8008a42 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	3304      	adds	r3, #4
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	4619      	mov	r1, r3
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f918 	bl	8008c66 <USBD_CtlSendData>
        break;
 8008a36:	e004      	b.n	8008a42 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008a38:	6839      	ldr	r1, [r7, #0]
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 f8a9 	bl	8008b92 <USBD_CtlError>
        break;
 8008a40:	bf00      	nop
}
 8008a42:	bf00      	nop
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b082      	sub	sp, #8
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d81e      	bhi.n	8008a9e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	88db      	ldrh	r3, [r3, #6]
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d004      	beq.n	8008a72 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008a68:	6839      	ldr	r1, [r7, #0]
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 f891 	bl	8008b92 <USBD_CtlError>
        break;
 8008a70:	e01a      	b.n	8008aa8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2201      	movs	r2, #1
 8008a76:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d005      	beq.n	8008a8e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	f043 0202 	orr.w	r2, r3, #2
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	330c      	adds	r3, #12
 8008a92:	2202      	movs	r2, #2
 8008a94:	4619      	mov	r1, r3
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 f8e5 	bl	8008c66 <USBD_CtlSendData>
      break;
 8008a9c:	e004      	b.n	8008aa8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008a9e:	6839      	ldr	r1, [r7, #0]
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 f876 	bl	8008b92 <USBD_CtlError>
      break;
 8008aa6:	bf00      	nop
  }
}
 8008aa8:	bf00      	nop
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	885b      	ldrh	r3, [r3, #2]
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d106      	bne.n	8008ad0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f929 	bl	8008d22 <USBD_CtlSendStatus>
  }
}
 8008ad0:	bf00      	nop
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d80b      	bhi.n	8008b06 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	885b      	ldrh	r3, [r3, #2]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d10c      	bne.n	8008b10 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f90f 	bl	8008d22 <USBD_CtlSendStatus>
      }
      break;
 8008b04:	e004      	b.n	8008b10 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008b06:	6839      	ldr	r1, [r7, #0]
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 f842 	bl	8008b92 <USBD_CtlError>
      break;
 8008b0e:	e000      	b.n	8008b12 <USBD_ClrFeature+0x3a>
      break;
 8008b10:	bf00      	nop
  }
}
 8008b12:	bf00      	nop
 8008b14:	3708      	adds	r7, #8
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b083      	sub	sp, #12
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
 8008b22:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	781a      	ldrb	r2, [r3, #0]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	785a      	ldrb	r2, [r3, #1]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	3302      	adds	r3, #2
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	3303      	adds	r3, #3
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	021b      	lsls	r3, r3, #8
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	4413      	add	r3, r2
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	3304      	adds	r3, #4
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	3305      	adds	r3, #5
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	021b      	lsls	r3, r3, #8
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	4413      	add	r3, r2
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	3306      	adds	r3, #6
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	3307      	adds	r3, #7
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	021b      	lsls	r3, r3, #8
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	4413      	add	r3, r2
 8008b82:	b29a      	uxth	r2, r3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	80da      	strh	r2, [r3, #6]

}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bc80      	pop	{r7}
 8008b90:	4770      	bx	lr

08008b92 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b082      	sub	sp, #8
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008b9c:	2180      	movs	r1, #128	; 0x80
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 fc2e 	bl	8009400 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 fc2a 	bl	8009400 <USBD_LL_StallEP>
}
 8008bac:	bf00      	nop
 8008bae:	3708      	adds	r7, #8
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b086      	sub	sp, #24
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d032      	beq.n	8008c30 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f000 f834 	bl	8008c38 <USBD_GetLen>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	005b      	lsls	r3, r3, #1
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008bde:	7dfb      	ldrb	r3, [r7, #23]
 8008be0:	1c5a      	adds	r2, r3, #1
 8008be2:	75fa      	strb	r2, [r7, #23]
 8008be4:	461a      	mov	r2, r3
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	4413      	add	r3, r2
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	7812      	ldrb	r2, [r2, #0]
 8008bee:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008bf0:	7dfb      	ldrb	r3, [r7, #23]
 8008bf2:	1c5a      	adds	r2, r3, #1
 8008bf4:	75fa      	strb	r2, [r7, #23]
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	2203      	movs	r2, #3
 8008bfe:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008c00:	e012      	b.n	8008c28 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	1c5a      	adds	r2, r3, #1
 8008c06:	60fa      	str	r2, [r7, #12]
 8008c08:	7dfa      	ldrb	r2, [r7, #23]
 8008c0a:	1c51      	adds	r1, r2, #1
 8008c0c:	75f9      	strb	r1, [r7, #23]
 8008c0e:	4611      	mov	r1, r2
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	440a      	add	r2, r1
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008c18:	7dfb      	ldrb	r3, [r7, #23]
 8008c1a:	1c5a      	adds	r2, r3, #1
 8008c1c:	75fa      	strb	r2, [r7, #23]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	4413      	add	r3, r2
 8008c24:	2200      	movs	r2, #0
 8008c26:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d1e8      	bne.n	8008c02 <USBD_GetString+0x4e>
    }
  }
}
 8008c30:	bf00      	nop
 8008c32:	3718      	adds	r7, #24
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c40:	2300      	movs	r3, #0
 8008c42:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008c44:	e005      	b.n	8008c52 <USBD_GetLen+0x1a>
  {
    len++;
 8008c46:	7bfb      	ldrb	r3, [r7, #15]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1f5      	bne.n	8008c46 <USBD_GetLen+0xe>
  }

  return len;
 8008c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3714      	adds	r7, #20
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bc80      	pop	{r7}
 8008c64:	4770      	bx	lr

08008c66 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b084      	sub	sp, #16
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	60f8      	str	r0, [r7, #12]
 8008c6e:	60b9      	str	r1, [r7, #8]
 8008c70:	4613      	mov	r3, r2
 8008c72:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2202      	movs	r2, #2
 8008c78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008c7c:	88fa      	ldrh	r2, [r7, #6]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008c82:	88fa      	ldrh	r2, [r7, #6]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c88:	88fb      	ldrh	r3, [r7, #6]
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	f000 fc3f 	bl	8009512 <USBD_LL_Transmit>

  return USBD_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b084      	sub	sp, #16
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	60f8      	str	r0, [r7, #12]
 8008ca6:	60b9      	str	r1, [r7, #8]
 8008ca8:	4613      	mov	r3, r2
 8008caa:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008cac:	88fb      	ldrh	r3, [r7, #6]
 8008cae:	68ba      	ldr	r2, [r7, #8]
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f000 fc2d 	bl	8009512 <USBD_LL_Transmit>

  return USBD_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b084      	sub	sp, #16
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	60f8      	str	r0, [r7, #12]
 8008cca:	60b9      	str	r1, [r7, #8]
 8008ccc:	4613      	mov	r3, r2
 8008cce:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2203      	movs	r2, #3
 8008cd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008cd8:	88fa      	ldrh	r2, [r7, #6]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008ce0:	88fa      	ldrh	r2, [r7, #6]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ce8:	88fb      	ldrh	r3, [r7, #6]
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	2100      	movs	r1, #0
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f000 fc32 	bl	8009558 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b084      	sub	sp, #16
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	60f8      	str	r0, [r7, #12]
 8008d06:	60b9      	str	r1, [r7, #8]
 8008d08:	4613      	mov	r3, r2
 8008d0a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d0c:	88fb      	ldrh	r3, [r7, #6]
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	2100      	movs	r1, #0
 8008d12:	68f8      	ldr	r0, [r7, #12]
 8008d14:	f000 fc20 	bl	8009558 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b082      	sub	sp, #8
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2204      	movs	r2, #4
 8008d2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d32:	2300      	movs	r3, #0
 8008d34:	2200      	movs	r2, #0
 8008d36:	2100      	movs	r1, #0
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 fbea 	bl	8009512 <USBD_LL_Transmit>

  return USBD_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2205      	movs	r2, #5
 8008d54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d58:	2300      	movs	r3, #0
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fbfa 	bl	8009558 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
	...

08008d70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d74:	2200      	movs	r2, #0
 8008d76:	4912      	ldr	r1, [pc, #72]	; (8008dc0 <MX_USB_DEVICE_Init+0x50>)
 8008d78:	4812      	ldr	r0, [pc, #72]	; (8008dc4 <MX_USB_DEVICE_Init+0x54>)
 8008d7a:	f7fe ff5f 	bl	8007c3c <USBD_Init>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d001      	beq.n	8008d88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d84:	f7f7 ffc8 	bl	8000d18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d88:	490f      	ldr	r1, [pc, #60]	; (8008dc8 <MX_USB_DEVICE_Init+0x58>)
 8008d8a:	480e      	ldr	r0, [pc, #56]	; (8008dc4 <MX_USB_DEVICE_Init+0x54>)
 8008d8c:	f7fe ff81 	bl	8007c92 <USBD_RegisterClass>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d001      	beq.n	8008d9a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d96:	f7f7 ffbf 	bl	8000d18 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d9a:	490c      	ldr	r1, [pc, #48]	; (8008dcc <MX_USB_DEVICE_Init+0x5c>)
 8008d9c:	4809      	ldr	r0, [pc, #36]	; (8008dc4 <MX_USB_DEVICE_Init+0x54>)
 8008d9e:	f7fe fee1 	bl	8007b64 <USBD_CDC_RegisterInterface>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d001      	beq.n	8008dac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008da8:	f7f7 ffb6 	bl	8000d18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008dac:	4805      	ldr	r0, [pc, #20]	; (8008dc4 <MX_USB_DEVICE_Init+0x54>)
 8008dae:	f7fe ff89 	bl	8007cc4 <USBD_Start>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d001      	beq.n	8008dbc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008db8:	f7f7 ffae 	bl	8000d18 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008dbc:	bf00      	nop
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	20000234 	.word	0x20000234
 8008dc4:	20000518 	.word	0x20000518
 8008dc8:	20000120 	.word	0x20000120
 8008dcc:	20000224 	.word	0x20000224

08008dd0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	4905      	ldr	r1, [pc, #20]	; (8008dec <CDC_Init_FS+0x1c>)
 8008dd8:	4805      	ldr	r0, [pc, #20]	; (8008df0 <CDC_Init_FS+0x20>)
 8008dda:	f7fe fed9 	bl	8007b90 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008dde:	4905      	ldr	r1, [pc, #20]	; (8008df4 <CDC_Init_FS+0x24>)
 8008de0:	4803      	ldr	r0, [pc, #12]	; (8008df0 <CDC_Init_FS+0x20>)
 8008de2:	f7fe feee 	bl	8007bc2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008de6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	20000bdc 	.word	0x20000bdc
 8008df0:	20000518 	.word	0x20000518
 8008df4:	200007dc 	.word	0x200007dc

08008df8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008dfc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bc80      	pop	{r7}
 8008e04:	4770      	bx	lr
	...

08008e08 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	4603      	mov	r3, r0
 8008e10:	6039      	str	r1, [r7, #0]
 8008e12:	71fb      	strb	r3, [r7, #7]
 8008e14:	4613      	mov	r3, r2
 8008e16:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008e18:	79fb      	ldrb	r3, [r7, #7]
 8008e1a:	2b23      	cmp	r3, #35	; 0x23
 8008e1c:	d84a      	bhi.n	8008eb4 <CDC_Control_FS+0xac>
 8008e1e:	a201      	add	r2, pc, #4	; (adr r2, 8008e24 <CDC_Control_FS+0x1c>)
 8008e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e24:	08008eb5 	.word	0x08008eb5
 8008e28:	08008eb5 	.word	0x08008eb5
 8008e2c:	08008eb5 	.word	0x08008eb5
 8008e30:	08008eb5 	.word	0x08008eb5
 8008e34:	08008eb5 	.word	0x08008eb5
 8008e38:	08008eb5 	.word	0x08008eb5
 8008e3c:	08008eb5 	.word	0x08008eb5
 8008e40:	08008eb5 	.word	0x08008eb5
 8008e44:	08008eb5 	.word	0x08008eb5
 8008e48:	08008eb5 	.word	0x08008eb5
 8008e4c:	08008eb5 	.word	0x08008eb5
 8008e50:	08008eb5 	.word	0x08008eb5
 8008e54:	08008eb5 	.word	0x08008eb5
 8008e58:	08008eb5 	.word	0x08008eb5
 8008e5c:	08008eb5 	.word	0x08008eb5
 8008e60:	08008eb5 	.word	0x08008eb5
 8008e64:	08008eb5 	.word	0x08008eb5
 8008e68:	08008eb5 	.word	0x08008eb5
 8008e6c:	08008eb5 	.word	0x08008eb5
 8008e70:	08008eb5 	.word	0x08008eb5
 8008e74:	08008eb5 	.word	0x08008eb5
 8008e78:	08008eb5 	.word	0x08008eb5
 8008e7c:	08008eb5 	.word	0x08008eb5
 8008e80:	08008eb5 	.word	0x08008eb5
 8008e84:	08008eb5 	.word	0x08008eb5
 8008e88:	08008eb5 	.word	0x08008eb5
 8008e8c:	08008eb5 	.word	0x08008eb5
 8008e90:	08008eb5 	.word	0x08008eb5
 8008e94:	08008eb5 	.word	0x08008eb5
 8008e98:	08008eb5 	.word	0x08008eb5
 8008e9c:	08008eb5 	.word	0x08008eb5
 8008ea0:	08008eb5 	.word	0x08008eb5
 8008ea4:	08008eb5 	.word	0x08008eb5
 8008ea8:	08008eb5 	.word	0x08008eb5
 8008eac:	08008eb5 	.word	0x08008eb5
 8008eb0:	08008eb5 	.word	0x08008eb5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008eb4:	bf00      	nop
  }

  return (USBD_OK);
 8008eb6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bc80      	pop	{r7}
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop

08008ec4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008ece:	6879      	ldr	r1, [r7, #4]
 8008ed0:	4805      	ldr	r0, [pc, #20]	; (8008ee8 <CDC_Receive_FS+0x24>)
 8008ed2:	f7fe fe76 	bl	8007bc2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008ed6:	4804      	ldr	r0, [pc, #16]	; (8008ee8 <CDC_Receive_FS+0x24>)
 8008ed8:	f7fe fe86 	bl	8007be8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008edc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	20000518 	.word	0x20000518

08008eec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	6039      	str	r1, [r7, #0]
 8008ef6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	2212      	movs	r2, #18
 8008efc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008efe:	4b03      	ldr	r3, [pc, #12]	; (8008f0c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bc80      	pop	{r7}
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	20000250 	.word	0x20000250

08008f10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	4603      	mov	r3, r0
 8008f18:	6039      	str	r1, [r7, #0]
 8008f1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	2204      	movs	r2, #4
 8008f20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008f22:	4b03      	ldr	r3, [pc, #12]	; (8008f30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bc80      	pop	{r7}
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	20000264 	.word	0x20000264

08008f34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	6039      	str	r1, [r7, #0]
 8008f3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f40:	79fb      	ldrb	r3, [r7, #7]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d105      	bne.n	8008f52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f46:	683a      	ldr	r2, [r7, #0]
 8008f48:	4907      	ldr	r1, [pc, #28]	; (8008f68 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f4a:	4808      	ldr	r0, [pc, #32]	; (8008f6c <USBD_FS_ProductStrDescriptor+0x38>)
 8008f4c:	f7ff fe32 	bl	8008bb4 <USBD_GetString>
 8008f50:	e004      	b.n	8008f5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f52:	683a      	ldr	r2, [r7, #0]
 8008f54:	4904      	ldr	r1, [pc, #16]	; (8008f68 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f56:	4805      	ldr	r0, [pc, #20]	; (8008f6c <USBD_FS_ProductStrDescriptor+0x38>)
 8008f58:	f7ff fe2c 	bl	8008bb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f5c:	4b02      	ldr	r3, [pc, #8]	; (8008f68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	20000fdc 	.word	0x20000fdc
 8008f6c:	0800c380 	.word	0x0800c380

08008f70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	4603      	mov	r3, r0
 8008f78:	6039      	str	r1, [r7, #0]
 8008f7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008f7c:	683a      	ldr	r2, [r7, #0]
 8008f7e:	4904      	ldr	r1, [pc, #16]	; (8008f90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008f80:	4804      	ldr	r0, [pc, #16]	; (8008f94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008f82:	f7ff fe17 	bl	8008bb4 <USBD_GetString>
  return USBD_StrDesc;
 8008f86:	4b02      	ldr	r3, [pc, #8]	; (8008f90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	20000fdc 	.word	0x20000fdc
 8008f94:	0800c398 	.word	0x0800c398

08008f98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	6039      	str	r1, [r7, #0]
 8008fa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	221a      	movs	r2, #26
 8008fa8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008faa:	f000 f843 	bl	8009034 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008fae:	4b02      	ldr	r3, [pc, #8]	; (8008fb8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3708      	adds	r7, #8
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	20000268 	.word	0x20000268

08008fbc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	6039      	str	r1, [r7, #0]
 8008fc6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008fc8:	79fb      	ldrb	r3, [r7, #7]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d105      	bne.n	8008fda <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008fce:	683a      	ldr	r2, [r7, #0]
 8008fd0:	4907      	ldr	r1, [pc, #28]	; (8008ff0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008fd2:	4808      	ldr	r0, [pc, #32]	; (8008ff4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008fd4:	f7ff fdee 	bl	8008bb4 <USBD_GetString>
 8008fd8:	e004      	b.n	8008fe4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008fda:	683a      	ldr	r2, [r7, #0]
 8008fdc:	4904      	ldr	r1, [pc, #16]	; (8008ff0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008fde:	4805      	ldr	r0, [pc, #20]	; (8008ff4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008fe0:	f7ff fde8 	bl	8008bb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fe4:	4b02      	ldr	r3, [pc, #8]	; (8008ff0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	20000fdc 	.word	0x20000fdc
 8008ff4:	0800c3ac 	.word	0x0800c3ac

08008ff8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	4603      	mov	r3, r0
 8009000:	6039      	str	r1, [r7, #0]
 8009002:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009004:	79fb      	ldrb	r3, [r7, #7]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d105      	bne.n	8009016 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	4907      	ldr	r1, [pc, #28]	; (800902c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800900e:	4808      	ldr	r0, [pc, #32]	; (8009030 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009010:	f7ff fdd0 	bl	8008bb4 <USBD_GetString>
 8009014:	e004      	b.n	8009020 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009016:	683a      	ldr	r2, [r7, #0]
 8009018:	4904      	ldr	r1, [pc, #16]	; (800902c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800901a:	4805      	ldr	r0, [pc, #20]	; (8009030 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800901c:	f7ff fdca 	bl	8008bb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009020:	4b02      	ldr	r3, [pc, #8]	; (800902c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009022:	4618      	mov	r0, r3
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	20000fdc 	.word	0x20000fdc
 8009030:	0800c3b8 	.word	0x0800c3b8

08009034 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800903a:	4b0f      	ldr	r3, [pc, #60]	; (8009078 <Get_SerialNum+0x44>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009040:	4b0e      	ldr	r3, [pc, #56]	; (800907c <Get_SerialNum+0x48>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009046:	4b0e      	ldr	r3, [pc, #56]	; (8009080 <Get_SerialNum+0x4c>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4413      	add	r3, r2
 8009052:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d009      	beq.n	800906e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800905a:	2208      	movs	r2, #8
 800905c:	4909      	ldr	r1, [pc, #36]	; (8009084 <Get_SerialNum+0x50>)
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f000 f814 	bl	800908c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009064:	2204      	movs	r2, #4
 8009066:	4908      	ldr	r1, [pc, #32]	; (8009088 <Get_SerialNum+0x54>)
 8009068:	68b8      	ldr	r0, [r7, #8]
 800906a:	f000 f80f 	bl	800908c <IntToUnicode>
  }
}
 800906e:	bf00      	nop
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	1ffff7e8 	.word	0x1ffff7e8
 800907c:	1ffff7ec 	.word	0x1ffff7ec
 8009080:	1ffff7f0 	.word	0x1ffff7f0
 8009084:	2000026a 	.word	0x2000026a
 8009088:	2000027a 	.word	0x2000027a

0800908c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800908c:	b480      	push	{r7}
 800908e:	b087      	sub	sp, #28
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	4613      	mov	r3, r2
 8009098:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800909a:	2300      	movs	r3, #0
 800909c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800909e:	2300      	movs	r3, #0
 80090a0:	75fb      	strb	r3, [r7, #23]
 80090a2:	e027      	b.n	80090f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	0f1b      	lsrs	r3, r3, #28
 80090a8:	2b09      	cmp	r3, #9
 80090aa:	d80b      	bhi.n	80090c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	0f1b      	lsrs	r3, r3, #28
 80090b0:	b2da      	uxtb	r2, r3
 80090b2:	7dfb      	ldrb	r3, [r7, #23]
 80090b4:	005b      	lsls	r3, r3, #1
 80090b6:	4619      	mov	r1, r3
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	440b      	add	r3, r1
 80090bc:	3230      	adds	r2, #48	; 0x30
 80090be:	b2d2      	uxtb	r2, r2
 80090c0:	701a      	strb	r2, [r3, #0]
 80090c2:	e00a      	b.n	80090da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	0f1b      	lsrs	r3, r3, #28
 80090c8:	b2da      	uxtb	r2, r3
 80090ca:	7dfb      	ldrb	r3, [r7, #23]
 80090cc:	005b      	lsls	r3, r3, #1
 80090ce:	4619      	mov	r1, r3
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	440b      	add	r3, r1
 80090d4:	3237      	adds	r2, #55	; 0x37
 80090d6:	b2d2      	uxtb	r2, r2
 80090d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	011b      	lsls	r3, r3, #4
 80090de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80090e0:	7dfb      	ldrb	r3, [r7, #23]
 80090e2:	005b      	lsls	r3, r3, #1
 80090e4:	3301      	adds	r3, #1
 80090e6:	68ba      	ldr	r2, [r7, #8]
 80090e8:	4413      	add	r3, r2
 80090ea:	2200      	movs	r2, #0
 80090ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80090ee:	7dfb      	ldrb	r3, [r7, #23]
 80090f0:	3301      	adds	r3, #1
 80090f2:	75fb      	strb	r3, [r7, #23]
 80090f4:	7dfa      	ldrb	r2, [r7, #23]
 80090f6:	79fb      	ldrb	r3, [r7, #7]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d3d3      	bcc.n	80090a4 <IntToUnicode+0x18>
  }
}
 80090fc:	bf00      	nop
 80090fe:	bf00      	nop
 8009100:	371c      	adds	r7, #28
 8009102:	46bd      	mov	sp, r7
 8009104:	bc80      	pop	{r7}
 8009106:	4770      	bx	lr

08009108 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a0d      	ldr	r2, [pc, #52]	; (800914c <HAL_PCD_MspInit+0x44>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d113      	bne.n	8009142 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800911a:	4b0d      	ldr	r3, [pc, #52]	; (8009150 <HAL_PCD_MspInit+0x48>)
 800911c:	69db      	ldr	r3, [r3, #28]
 800911e:	4a0c      	ldr	r2, [pc, #48]	; (8009150 <HAL_PCD_MspInit+0x48>)
 8009120:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009124:	61d3      	str	r3, [r2, #28]
 8009126:	4b0a      	ldr	r3, [pc, #40]	; (8009150 <HAL_PCD_MspInit+0x48>)
 8009128:	69db      	ldr	r3, [r3, #28]
 800912a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800912e:	60fb      	str	r3, [r7, #12]
 8009130:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009132:	2200      	movs	r2, #0
 8009134:	2100      	movs	r1, #0
 8009136:	2014      	movs	r0, #20
 8009138:	f7f9 f8c9 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800913c:	2014      	movs	r0, #20
 800913e:	f7f9 f8e2 	bl	8002306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009142:	bf00      	nop
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	40005c00 	.word	0x40005c00
 8009150:	40021000 	.word	0x40021000

08009154 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009168:	4619      	mov	r1, r3
 800916a:	4610      	mov	r0, r2
 800916c:	f7fe fdf2 	bl	8007d54 <USBD_LL_SetupStage>
}
 8009170:	bf00      	nop
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	460b      	mov	r3, r1
 8009182:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800918a:	78fa      	ldrb	r2, [r7, #3]
 800918c:	6879      	ldr	r1, [r7, #4]
 800918e:	4613      	mov	r3, r2
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	4413      	add	r3, r2
 8009194:	00db      	lsls	r3, r3, #3
 8009196:	440b      	add	r3, r1
 8009198:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	78fb      	ldrb	r3, [r7, #3]
 80091a0:	4619      	mov	r1, r3
 80091a2:	f7fe fe24 	bl	8007dee <USBD_LL_DataOutStage>
}
 80091a6:	bf00      	nop
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b082      	sub	sp, #8
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	460b      	mov	r3, r1
 80091b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80091c0:	78fa      	ldrb	r2, [r7, #3]
 80091c2:	6879      	ldr	r1, [r7, #4]
 80091c4:	4613      	mov	r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	4413      	add	r3, r2
 80091ca:	00db      	lsls	r3, r3, #3
 80091cc:	440b      	add	r3, r1
 80091ce:	333c      	adds	r3, #60	; 0x3c
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	78fb      	ldrb	r3, [r7, #3]
 80091d4:	4619      	mov	r1, r3
 80091d6:	f7fe fe7b 	bl	8007ed0 <USBD_LL_DataInStage>
}
 80091da:	bf00      	nop
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b082      	sub	sp, #8
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7fe ff8b 	bl	800810c <USBD_LL_SOF>
}
 80091f6:	bf00      	nop
 80091f8:	3708      	adds	r7, #8
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b084      	sub	sp, #16
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009206:	2301      	movs	r3, #1
 8009208:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	2b02      	cmp	r3, #2
 8009210:	d001      	beq.n	8009216 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009212:	f7f7 fd81 	bl	8000d18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800921c:	7bfa      	ldrb	r2, [r7, #15]
 800921e:	4611      	mov	r1, r2
 8009220:	4618      	mov	r0, r3
 8009222:	f7fe ff3b 	bl	800809c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800922c:	4618      	mov	r0, r3
 800922e:	f7fe fef4 	bl	800801a <USBD_LL_Reset>
}
 8009232:	bf00      	nop
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
	...

0800923c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800924a:	4618      	mov	r0, r3
 800924c:	f7fe ff35 	bl	80080ba <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	699b      	ldr	r3, [r3, #24]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d005      	beq.n	8009264 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009258:	4b04      	ldr	r3, [pc, #16]	; (800926c <HAL_PCD_SuspendCallback+0x30>)
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	4a03      	ldr	r2, [pc, #12]	; (800926c <HAL_PCD_SuspendCallback+0x30>)
 800925e:	f043 0306 	orr.w	r3, r3, #6
 8009262:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009264:	bf00      	nop
 8009266:	3708      	adds	r7, #8
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	e000ed00 	.word	0xe000ed00

08009270 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800927e:	4618      	mov	r0, r3
 8009280:	f7fe ff2f 	bl	80080e2 <USBD_LL_Resume>
}
 8009284:	bf00      	nop
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009294:	4a28      	ldr	r2, [pc, #160]	; (8009338 <USBD_LL_Init+0xac>)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a26      	ldr	r2, [pc, #152]	; (8009338 <USBD_LL_Init+0xac>)
 80092a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80092a4:	4b24      	ldr	r3, [pc, #144]	; (8009338 <USBD_LL_Init+0xac>)
 80092a6:	4a25      	ldr	r2, [pc, #148]	; (800933c <USBD_LL_Init+0xb0>)
 80092a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80092aa:	4b23      	ldr	r3, [pc, #140]	; (8009338 <USBD_LL_Init+0xac>)
 80092ac:	2208      	movs	r2, #8
 80092ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80092b0:	4b21      	ldr	r3, [pc, #132]	; (8009338 <USBD_LL_Init+0xac>)
 80092b2:	2202      	movs	r2, #2
 80092b4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80092b6:	4b20      	ldr	r3, [pc, #128]	; (8009338 <USBD_LL_Init+0xac>)
 80092b8:	2200      	movs	r2, #0
 80092ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80092bc:	4b1e      	ldr	r3, [pc, #120]	; (8009338 <USBD_LL_Init+0xac>)
 80092be:	2200      	movs	r2, #0
 80092c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80092c2:	4b1d      	ldr	r3, [pc, #116]	; (8009338 <USBD_LL_Init+0xac>)
 80092c4:	2200      	movs	r2, #0
 80092c6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80092c8:	481b      	ldr	r0, [pc, #108]	; (8009338 <USBD_LL_Init+0xac>)
 80092ca:	f7f9 fa03 	bl	80026d4 <HAL_PCD_Init>
 80092ce:	4603      	mov	r3, r0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d001      	beq.n	80092d8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80092d4:	f7f7 fd20 	bl	8000d18 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092de:	2318      	movs	r3, #24
 80092e0:	2200      	movs	r2, #0
 80092e2:	2100      	movs	r1, #0
 80092e4:	f7fa ff22 	bl	800412c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092ee:	2358      	movs	r3, #88	; 0x58
 80092f0:	2200      	movs	r2, #0
 80092f2:	2180      	movs	r1, #128	; 0x80
 80092f4:	f7fa ff1a 	bl	800412c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092fe:	23c0      	movs	r3, #192	; 0xc0
 8009300:	2200      	movs	r2, #0
 8009302:	2181      	movs	r1, #129	; 0x81
 8009304:	f7fa ff12 	bl	800412c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800930e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009312:	2200      	movs	r2, #0
 8009314:	2101      	movs	r1, #1
 8009316:	f7fa ff09 	bl	800412c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009320:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009324:	2200      	movs	r2, #0
 8009326:	2182      	movs	r1, #130	; 0x82
 8009328:	f7fa ff00 	bl	800412c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3708      	adds	r7, #8
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	200011dc 	.word	0x200011dc
 800933c:	40005c00 	.word	0x40005c00

08009340 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009348:	2300      	movs	r3, #0
 800934a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800934c:	2300      	movs	r3, #0
 800934e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009356:	4618      	mov	r0, r3
 8009358:	f7f9 fabb 	bl	80028d2 <HAL_PCD_Start>
 800935c:	4603      	mov	r3, r0
 800935e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009360:	7bfb      	ldrb	r3, [r7, #15]
 8009362:	4618      	mov	r0, r3
 8009364:	f000 f94e 	bl	8009604 <USBD_Get_USB_Status>
 8009368:	4603      	mov	r3, r0
 800936a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800936c:	7bbb      	ldrb	r3, [r7, #14]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b084      	sub	sp, #16
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
 800937e:	4608      	mov	r0, r1
 8009380:	4611      	mov	r1, r2
 8009382:	461a      	mov	r2, r3
 8009384:	4603      	mov	r3, r0
 8009386:	70fb      	strb	r3, [r7, #3]
 8009388:	460b      	mov	r3, r1
 800938a:	70bb      	strb	r3, [r7, #2]
 800938c:	4613      	mov	r3, r2
 800938e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009390:	2300      	movs	r3, #0
 8009392:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009394:	2300      	movs	r3, #0
 8009396:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800939e:	78bb      	ldrb	r3, [r7, #2]
 80093a0:	883a      	ldrh	r2, [r7, #0]
 80093a2:	78f9      	ldrb	r1, [r7, #3]
 80093a4:	f7f9 fc10 	bl	8002bc8 <HAL_PCD_EP_Open>
 80093a8:	4603      	mov	r3, r0
 80093aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093ac:	7bfb      	ldrb	r3, [r7, #15]
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 f928 	bl	8009604 <USBD_Get_USB_Status>
 80093b4:	4603      	mov	r3, r0
 80093b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b084      	sub	sp, #16
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
 80093ca:	460b      	mov	r3, r1
 80093cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093ce:	2300      	movs	r3, #0
 80093d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093d2:	2300      	movs	r3, #0
 80093d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093dc:	78fa      	ldrb	r2, [r7, #3]
 80093de:	4611      	mov	r1, r2
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7f9 fc4e 	bl	8002c82 <HAL_PCD_EP_Close>
 80093e6:	4603      	mov	r3, r0
 80093e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093ea:	7bfb      	ldrb	r3, [r7, #15]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f000 f909 	bl	8009604 <USBD_Get_USB_Status>
 80093f2:	4603      	mov	r3, r0
 80093f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	460b      	mov	r3, r1
 800940a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800940c:	2300      	movs	r3, #0
 800940e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009410:	2300      	movs	r3, #0
 8009412:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800941a:	78fa      	ldrb	r2, [r7, #3]
 800941c:	4611      	mov	r1, r2
 800941e:	4618      	mov	r0, r3
 8009420:	f7f9 fcf6 	bl	8002e10 <HAL_PCD_EP_SetStall>
 8009424:	4603      	mov	r3, r0
 8009426:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009428:	7bfb      	ldrb	r3, [r7, #15]
 800942a:	4618      	mov	r0, r3
 800942c:	f000 f8ea 	bl	8009604 <USBD_Get_USB_Status>
 8009430:	4603      	mov	r3, r0
 8009432:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009434:	7bbb      	ldrb	r3, [r7, #14]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800943e:	b580      	push	{r7, lr}
 8009440:	b084      	sub	sp, #16
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
 8009446:	460b      	mov	r3, r1
 8009448:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800944a:	2300      	movs	r3, #0
 800944c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800944e:	2300      	movs	r3, #0
 8009450:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009458:	78fa      	ldrb	r2, [r7, #3]
 800945a:	4611      	mov	r1, r2
 800945c:	4618      	mov	r0, r3
 800945e:	f7f9 fd37 	bl	8002ed0 <HAL_PCD_EP_ClrStall>
 8009462:	4603      	mov	r3, r0
 8009464:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009466:	7bfb      	ldrb	r3, [r7, #15]
 8009468:	4618      	mov	r0, r3
 800946a:	f000 f8cb 	bl	8009604 <USBD_Get_USB_Status>
 800946e:	4603      	mov	r3, r0
 8009470:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009472:	7bbb      	ldrb	r3, [r7, #14]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3710      	adds	r7, #16
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800947c:	b480      	push	{r7}
 800947e:	b085      	sub	sp, #20
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	460b      	mov	r3, r1
 8009486:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800948e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009490:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009494:	2b00      	cmp	r3, #0
 8009496:	da0c      	bge.n	80094b2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009498:	78fb      	ldrb	r3, [r7, #3]
 800949a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800949e:	68f9      	ldr	r1, [r7, #12]
 80094a0:	1c5a      	adds	r2, r3, #1
 80094a2:	4613      	mov	r3, r2
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	4413      	add	r3, r2
 80094a8:	00db      	lsls	r3, r3, #3
 80094aa:	440b      	add	r3, r1
 80094ac:	3302      	adds	r3, #2
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	e00b      	b.n	80094ca <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80094b2:	78fb      	ldrb	r3, [r7, #3]
 80094b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094b8:	68f9      	ldr	r1, [r7, #12]
 80094ba:	4613      	mov	r3, r2
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	4413      	add	r3, r2
 80094c0:	00db      	lsls	r3, r3, #3
 80094c2:	440b      	add	r3, r1
 80094c4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80094c8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3714      	adds	r7, #20
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bc80      	pop	{r7}
 80094d2:	4770      	bx	lr

080094d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	460b      	mov	r3, r1
 80094de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094e0:	2300      	movs	r3, #0
 80094e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094ee:	78fa      	ldrb	r2, [r7, #3]
 80094f0:	4611      	mov	r1, r2
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7f9 fb43 	bl	8002b7e <HAL_PCD_SetAddress>
 80094f8:	4603      	mov	r3, r0
 80094fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094fc:	7bfb      	ldrb	r3, [r7, #15]
 80094fe:	4618      	mov	r0, r3
 8009500:	f000 f880 	bl	8009604 <USBD_Get_USB_Status>
 8009504:	4603      	mov	r3, r0
 8009506:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009508:	7bbb      	ldrb	r3, [r7, #14]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b086      	sub	sp, #24
 8009516:	af00      	add	r7, sp, #0
 8009518:	60f8      	str	r0, [r7, #12]
 800951a:	607a      	str	r2, [r7, #4]
 800951c:	461a      	mov	r2, r3
 800951e:	460b      	mov	r3, r1
 8009520:	72fb      	strb	r3, [r7, #11]
 8009522:	4613      	mov	r3, r2
 8009524:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800952a:	2300      	movs	r3, #0
 800952c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009534:	893b      	ldrh	r3, [r7, #8]
 8009536:	7af9      	ldrb	r1, [r7, #11]
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	f7f9 fc32 	bl	8002da2 <HAL_PCD_EP_Transmit>
 800953e:	4603      	mov	r3, r0
 8009540:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009542:	7dfb      	ldrb	r3, [r7, #23]
 8009544:	4618      	mov	r0, r3
 8009546:	f000 f85d 	bl	8009604 <USBD_Get_USB_Status>
 800954a:	4603      	mov	r3, r0
 800954c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800954e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009550:	4618      	mov	r0, r3
 8009552:	3718      	adds	r7, #24
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b086      	sub	sp, #24
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	607a      	str	r2, [r7, #4]
 8009562:	461a      	mov	r2, r3
 8009564:	460b      	mov	r3, r1
 8009566:	72fb      	strb	r3, [r7, #11]
 8009568:	4613      	mov	r3, r2
 800956a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800956c:	2300      	movs	r3, #0
 800956e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009570:	2300      	movs	r3, #0
 8009572:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800957a:	893b      	ldrh	r3, [r7, #8]
 800957c:	7af9      	ldrb	r1, [r7, #11]
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	f7f9 fbc7 	bl	8002d12 <HAL_PCD_EP_Receive>
 8009584:	4603      	mov	r3, r0
 8009586:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009588:	7dfb      	ldrb	r3, [r7, #23]
 800958a:	4618      	mov	r0, r3
 800958c:	f000 f83a 	bl	8009604 <USBD_Get_USB_Status>
 8009590:	4603      	mov	r3, r0
 8009592:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009594:	7dbb      	ldrb	r3, [r7, #22]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3718      	adds	r7, #24
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b082      	sub	sp, #8
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
 80095a6:	460b      	mov	r3, r1
 80095a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095b0:	78fa      	ldrb	r2, [r7, #3]
 80095b2:	4611      	mov	r1, r2
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7f9 fbdd 	bl	8002d74 <HAL_PCD_EP_GetRxCount>
 80095ba:	4603      	mov	r3, r0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80095cc:	4b02      	ldr	r3, [pc, #8]	; (80095d8 <USBD_static_malloc+0x14>)
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	370c      	adds	r7, #12
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bc80      	pop	{r7}
 80095d6:	4770      	bx	lr
 80095d8:	200014cc 	.word	0x200014cc

080095dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]

}
 80095e4:	bf00      	nop
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bc80      	pop	{r7}
 80095ec:	4770      	bx	lr

080095ee <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ee:	b480      	push	{r7}
 80095f0:	b083      	sub	sp, #12
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
 80095f6:	460b      	mov	r3, r1
 80095f8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80095fa:	bf00      	nop
 80095fc:	370c      	adds	r7, #12
 80095fe:	46bd      	mov	sp, r7
 8009600:	bc80      	pop	{r7}
 8009602:	4770      	bx	lr

08009604 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009604:	b480      	push	{r7}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
 800960a:	4603      	mov	r3, r0
 800960c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800960e:	2300      	movs	r3, #0
 8009610:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009612:	79fb      	ldrb	r3, [r7, #7]
 8009614:	2b03      	cmp	r3, #3
 8009616:	d817      	bhi.n	8009648 <USBD_Get_USB_Status+0x44>
 8009618:	a201      	add	r2, pc, #4	; (adr r2, 8009620 <USBD_Get_USB_Status+0x1c>)
 800961a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961e:	bf00      	nop
 8009620:	08009631 	.word	0x08009631
 8009624:	08009637 	.word	0x08009637
 8009628:	0800963d 	.word	0x0800963d
 800962c:	08009643 	.word	0x08009643
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009630:	2300      	movs	r3, #0
 8009632:	73fb      	strb	r3, [r7, #15]
    break;
 8009634:	e00b      	b.n	800964e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009636:	2302      	movs	r3, #2
 8009638:	73fb      	strb	r3, [r7, #15]
    break;
 800963a:	e008      	b.n	800964e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800963c:	2301      	movs	r3, #1
 800963e:	73fb      	strb	r3, [r7, #15]
    break;
 8009640:	e005      	b.n	800964e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009642:	2302      	movs	r3, #2
 8009644:	73fb      	strb	r3, [r7, #15]
    break;
 8009646:	e002      	b.n	800964e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009648:	2302      	movs	r3, #2
 800964a:	73fb      	strb	r3, [r7, #15]
    break;
 800964c:	bf00      	nop
  }
  return usb_status;
 800964e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	bc80      	pop	{r7}
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop

0800965c <malloc>:
 800965c:	4b02      	ldr	r3, [pc, #8]	; (8009668 <malloc+0xc>)
 800965e:	4601      	mov	r1, r0
 8009660:	6818      	ldr	r0, [r3, #0]
 8009662:	f000 b82b 	b.w	80096bc <_malloc_r>
 8009666:	bf00      	nop
 8009668:	200002dc 	.word	0x200002dc

0800966c <free>:
 800966c:	4b02      	ldr	r3, [pc, #8]	; (8009678 <free+0xc>)
 800966e:	4601      	mov	r1, r0
 8009670:	6818      	ldr	r0, [r3, #0]
 8009672:	f001 bd2d 	b.w	800b0d0 <_free_r>
 8009676:	bf00      	nop
 8009678:	200002dc 	.word	0x200002dc

0800967c <sbrk_aligned>:
 800967c:	b570      	push	{r4, r5, r6, lr}
 800967e:	4e0e      	ldr	r6, [pc, #56]	; (80096b8 <sbrk_aligned+0x3c>)
 8009680:	460c      	mov	r4, r1
 8009682:	6831      	ldr	r1, [r6, #0]
 8009684:	4605      	mov	r5, r0
 8009686:	b911      	cbnz	r1, 800968e <sbrk_aligned+0x12>
 8009688:	f000 fe56 	bl	800a338 <_sbrk_r>
 800968c:	6030      	str	r0, [r6, #0]
 800968e:	4621      	mov	r1, r4
 8009690:	4628      	mov	r0, r5
 8009692:	f000 fe51 	bl	800a338 <_sbrk_r>
 8009696:	1c43      	adds	r3, r0, #1
 8009698:	d00a      	beq.n	80096b0 <sbrk_aligned+0x34>
 800969a:	1cc4      	adds	r4, r0, #3
 800969c:	f024 0403 	bic.w	r4, r4, #3
 80096a0:	42a0      	cmp	r0, r4
 80096a2:	d007      	beq.n	80096b4 <sbrk_aligned+0x38>
 80096a4:	1a21      	subs	r1, r4, r0
 80096a6:	4628      	mov	r0, r5
 80096a8:	f000 fe46 	bl	800a338 <_sbrk_r>
 80096ac:	3001      	adds	r0, #1
 80096ae:	d101      	bne.n	80096b4 <sbrk_aligned+0x38>
 80096b0:	f04f 34ff 	mov.w	r4, #4294967295
 80096b4:	4620      	mov	r0, r4
 80096b6:	bd70      	pop	{r4, r5, r6, pc}
 80096b8:	200016f0 	.word	0x200016f0

080096bc <_malloc_r>:
 80096bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096c0:	1ccd      	adds	r5, r1, #3
 80096c2:	f025 0503 	bic.w	r5, r5, #3
 80096c6:	3508      	adds	r5, #8
 80096c8:	2d0c      	cmp	r5, #12
 80096ca:	bf38      	it	cc
 80096cc:	250c      	movcc	r5, #12
 80096ce:	2d00      	cmp	r5, #0
 80096d0:	4607      	mov	r7, r0
 80096d2:	db01      	blt.n	80096d8 <_malloc_r+0x1c>
 80096d4:	42a9      	cmp	r1, r5
 80096d6:	d905      	bls.n	80096e4 <_malloc_r+0x28>
 80096d8:	230c      	movs	r3, #12
 80096da:	2600      	movs	r6, #0
 80096dc:	603b      	str	r3, [r7, #0]
 80096de:	4630      	mov	r0, r6
 80096e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80097b8 <_malloc_r+0xfc>
 80096e8:	f000 f868 	bl	80097bc <__malloc_lock>
 80096ec:	f8d8 3000 	ldr.w	r3, [r8]
 80096f0:	461c      	mov	r4, r3
 80096f2:	bb5c      	cbnz	r4, 800974c <_malloc_r+0x90>
 80096f4:	4629      	mov	r1, r5
 80096f6:	4638      	mov	r0, r7
 80096f8:	f7ff ffc0 	bl	800967c <sbrk_aligned>
 80096fc:	1c43      	adds	r3, r0, #1
 80096fe:	4604      	mov	r4, r0
 8009700:	d155      	bne.n	80097ae <_malloc_r+0xf2>
 8009702:	f8d8 4000 	ldr.w	r4, [r8]
 8009706:	4626      	mov	r6, r4
 8009708:	2e00      	cmp	r6, #0
 800970a:	d145      	bne.n	8009798 <_malloc_r+0xdc>
 800970c:	2c00      	cmp	r4, #0
 800970e:	d048      	beq.n	80097a2 <_malloc_r+0xe6>
 8009710:	6823      	ldr	r3, [r4, #0]
 8009712:	4631      	mov	r1, r6
 8009714:	4638      	mov	r0, r7
 8009716:	eb04 0903 	add.w	r9, r4, r3
 800971a:	f000 fe0d 	bl	800a338 <_sbrk_r>
 800971e:	4581      	cmp	r9, r0
 8009720:	d13f      	bne.n	80097a2 <_malloc_r+0xe6>
 8009722:	6821      	ldr	r1, [r4, #0]
 8009724:	4638      	mov	r0, r7
 8009726:	1a6d      	subs	r5, r5, r1
 8009728:	4629      	mov	r1, r5
 800972a:	f7ff ffa7 	bl	800967c <sbrk_aligned>
 800972e:	3001      	adds	r0, #1
 8009730:	d037      	beq.n	80097a2 <_malloc_r+0xe6>
 8009732:	6823      	ldr	r3, [r4, #0]
 8009734:	442b      	add	r3, r5
 8009736:	6023      	str	r3, [r4, #0]
 8009738:	f8d8 3000 	ldr.w	r3, [r8]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d038      	beq.n	80097b2 <_malloc_r+0xf6>
 8009740:	685a      	ldr	r2, [r3, #4]
 8009742:	42a2      	cmp	r2, r4
 8009744:	d12b      	bne.n	800979e <_malloc_r+0xe2>
 8009746:	2200      	movs	r2, #0
 8009748:	605a      	str	r2, [r3, #4]
 800974a:	e00f      	b.n	800976c <_malloc_r+0xb0>
 800974c:	6822      	ldr	r2, [r4, #0]
 800974e:	1b52      	subs	r2, r2, r5
 8009750:	d41f      	bmi.n	8009792 <_malloc_r+0xd6>
 8009752:	2a0b      	cmp	r2, #11
 8009754:	d917      	bls.n	8009786 <_malloc_r+0xca>
 8009756:	1961      	adds	r1, r4, r5
 8009758:	42a3      	cmp	r3, r4
 800975a:	6025      	str	r5, [r4, #0]
 800975c:	bf18      	it	ne
 800975e:	6059      	strne	r1, [r3, #4]
 8009760:	6863      	ldr	r3, [r4, #4]
 8009762:	bf08      	it	eq
 8009764:	f8c8 1000 	streq.w	r1, [r8]
 8009768:	5162      	str	r2, [r4, r5]
 800976a:	604b      	str	r3, [r1, #4]
 800976c:	4638      	mov	r0, r7
 800976e:	f104 060b 	add.w	r6, r4, #11
 8009772:	f000 f829 	bl	80097c8 <__malloc_unlock>
 8009776:	f026 0607 	bic.w	r6, r6, #7
 800977a:	1d23      	adds	r3, r4, #4
 800977c:	1af2      	subs	r2, r6, r3
 800977e:	d0ae      	beq.n	80096de <_malloc_r+0x22>
 8009780:	1b9b      	subs	r3, r3, r6
 8009782:	50a3      	str	r3, [r4, r2]
 8009784:	e7ab      	b.n	80096de <_malloc_r+0x22>
 8009786:	42a3      	cmp	r3, r4
 8009788:	6862      	ldr	r2, [r4, #4]
 800978a:	d1dd      	bne.n	8009748 <_malloc_r+0x8c>
 800978c:	f8c8 2000 	str.w	r2, [r8]
 8009790:	e7ec      	b.n	800976c <_malloc_r+0xb0>
 8009792:	4623      	mov	r3, r4
 8009794:	6864      	ldr	r4, [r4, #4]
 8009796:	e7ac      	b.n	80096f2 <_malloc_r+0x36>
 8009798:	4634      	mov	r4, r6
 800979a:	6876      	ldr	r6, [r6, #4]
 800979c:	e7b4      	b.n	8009708 <_malloc_r+0x4c>
 800979e:	4613      	mov	r3, r2
 80097a0:	e7cc      	b.n	800973c <_malloc_r+0x80>
 80097a2:	230c      	movs	r3, #12
 80097a4:	4638      	mov	r0, r7
 80097a6:	603b      	str	r3, [r7, #0]
 80097a8:	f000 f80e 	bl	80097c8 <__malloc_unlock>
 80097ac:	e797      	b.n	80096de <_malloc_r+0x22>
 80097ae:	6025      	str	r5, [r4, #0]
 80097b0:	e7dc      	b.n	800976c <_malloc_r+0xb0>
 80097b2:	605b      	str	r3, [r3, #4]
 80097b4:	deff      	udf	#255	; 0xff
 80097b6:	bf00      	nop
 80097b8:	200016ec 	.word	0x200016ec

080097bc <__malloc_lock>:
 80097bc:	4801      	ldr	r0, [pc, #4]	; (80097c4 <__malloc_lock+0x8>)
 80097be:	f000 be07 	b.w	800a3d0 <__retarget_lock_acquire_recursive>
 80097c2:	bf00      	nop
 80097c4:	20001834 	.word	0x20001834

080097c8 <__malloc_unlock>:
 80097c8:	4801      	ldr	r0, [pc, #4]	; (80097d0 <__malloc_unlock+0x8>)
 80097ca:	f000 be02 	b.w	800a3d2 <__retarget_lock_release_recursive>
 80097ce:	bf00      	nop
 80097d0:	20001834 	.word	0x20001834

080097d4 <__cvt>:
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097da:	461f      	mov	r7, r3
 80097dc:	bfbb      	ittet	lt
 80097de:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80097e2:	461f      	movlt	r7, r3
 80097e4:	2300      	movge	r3, #0
 80097e6:	232d      	movlt	r3, #45	; 0x2d
 80097e8:	b088      	sub	sp, #32
 80097ea:	4614      	mov	r4, r2
 80097ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80097ee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80097f0:	7013      	strb	r3, [r2, #0]
 80097f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80097f4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80097f8:	f023 0820 	bic.w	r8, r3, #32
 80097fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009800:	d005      	beq.n	800980e <__cvt+0x3a>
 8009802:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009806:	d100      	bne.n	800980a <__cvt+0x36>
 8009808:	3501      	adds	r5, #1
 800980a:	2302      	movs	r3, #2
 800980c:	e000      	b.n	8009810 <__cvt+0x3c>
 800980e:	2303      	movs	r3, #3
 8009810:	aa07      	add	r2, sp, #28
 8009812:	9204      	str	r2, [sp, #16]
 8009814:	aa06      	add	r2, sp, #24
 8009816:	e9cd a202 	strd	sl, r2, [sp, #8]
 800981a:	e9cd 3500 	strd	r3, r5, [sp]
 800981e:	4622      	mov	r2, r4
 8009820:	463b      	mov	r3, r7
 8009822:	f000 fe71 	bl	800a508 <_dtoa_r>
 8009826:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800982a:	4606      	mov	r6, r0
 800982c:	d102      	bne.n	8009834 <__cvt+0x60>
 800982e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009830:	07db      	lsls	r3, r3, #31
 8009832:	d522      	bpl.n	800987a <__cvt+0xa6>
 8009834:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009838:	eb06 0905 	add.w	r9, r6, r5
 800983c:	d110      	bne.n	8009860 <__cvt+0x8c>
 800983e:	7833      	ldrb	r3, [r6, #0]
 8009840:	2b30      	cmp	r3, #48	; 0x30
 8009842:	d10a      	bne.n	800985a <__cvt+0x86>
 8009844:	2200      	movs	r2, #0
 8009846:	2300      	movs	r3, #0
 8009848:	4620      	mov	r0, r4
 800984a:	4639      	mov	r1, r7
 800984c:	f7f7 f8ac 	bl	80009a8 <__aeabi_dcmpeq>
 8009850:	b918      	cbnz	r0, 800985a <__cvt+0x86>
 8009852:	f1c5 0501 	rsb	r5, r5, #1
 8009856:	f8ca 5000 	str.w	r5, [sl]
 800985a:	f8da 3000 	ldr.w	r3, [sl]
 800985e:	4499      	add	r9, r3
 8009860:	2200      	movs	r2, #0
 8009862:	2300      	movs	r3, #0
 8009864:	4620      	mov	r0, r4
 8009866:	4639      	mov	r1, r7
 8009868:	f7f7 f89e 	bl	80009a8 <__aeabi_dcmpeq>
 800986c:	b108      	cbz	r0, 8009872 <__cvt+0x9e>
 800986e:	f8cd 901c 	str.w	r9, [sp, #28]
 8009872:	2230      	movs	r2, #48	; 0x30
 8009874:	9b07      	ldr	r3, [sp, #28]
 8009876:	454b      	cmp	r3, r9
 8009878:	d307      	bcc.n	800988a <__cvt+0xb6>
 800987a:	4630      	mov	r0, r6
 800987c:	9b07      	ldr	r3, [sp, #28]
 800987e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009880:	1b9b      	subs	r3, r3, r6
 8009882:	6013      	str	r3, [r2, #0]
 8009884:	b008      	add	sp, #32
 8009886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800988a:	1c59      	adds	r1, r3, #1
 800988c:	9107      	str	r1, [sp, #28]
 800988e:	701a      	strb	r2, [r3, #0]
 8009890:	e7f0      	b.n	8009874 <__cvt+0xa0>

08009892 <__exponent>:
 8009892:	4603      	mov	r3, r0
 8009894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009896:	2900      	cmp	r1, #0
 8009898:	f803 2b02 	strb.w	r2, [r3], #2
 800989c:	bfb6      	itet	lt
 800989e:	222d      	movlt	r2, #45	; 0x2d
 80098a0:	222b      	movge	r2, #43	; 0x2b
 80098a2:	4249      	neglt	r1, r1
 80098a4:	2909      	cmp	r1, #9
 80098a6:	7042      	strb	r2, [r0, #1]
 80098a8:	dd2a      	ble.n	8009900 <__exponent+0x6e>
 80098aa:	f10d 0207 	add.w	r2, sp, #7
 80098ae:	4617      	mov	r7, r2
 80098b0:	260a      	movs	r6, #10
 80098b2:	fb91 f5f6 	sdiv	r5, r1, r6
 80098b6:	4694      	mov	ip, r2
 80098b8:	fb06 1415 	mls	r4, r6, r5, r1
 80098bc:	3430      	adds	r4, #48	; 0x30
 80098be:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80098c2:	460c      	mov	r4, r1
 80098c4:	2c63      	cmp	r4, #99	; 0x63
 80098c6:	4629      	mov	r1, r5
 80098c8:	f102 32ff 	add.w	r2, r2, #4294967295
 80098cc:	dcf1      	bgt.n	80098b2 <__exponent+0x20>
 80098ce:	3130      	adds	r1, #48	; 0x30
 80098d0:	f1ac 0402 	sub.w	r4, ip, #2
 80098d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80098d8:	4622      	mov	r2, r4
 80098da:	1c41      	adds	r1, r0, #1
 80098dc:	42ba      	cmp	r2, r7
 80098de:	d30a      	bcc.n	80098f6 <__exponent+0x64>
 80098e0:	f10d 0209 	add.w	r2, sp, #9
 80098e4:	eba2 020c 	sub.w	r2, r2, ip
 80098e8:	42bc      	cmp	r4, r7
 80098ea:	bf88      	it	hi
 80098ec:	2200      	movhi	r2, #0
 80098ee:	4413      	add	r3, r2
 80098f0:	1a18      	subs	r0, r3, r0
 80098f2:	b003      	add	sp, #12
 80098f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098f6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80098fa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80098fe:	e7ed      	b.n	80098dc <__exponent+0x4a>
 8009900:	2330      	movs	r3, #48	; 0x30
 8009902:	3130      	adds	r1, #48	; 0x30
 8009904:	7083      	strb	r3, [r0, #2]
 8009906:	70c1      	strb	r1, [r0, #3]
 8009908:	1d03      	adds	r3, r0, #4
 800990a:	e7f1      	b.n	80098f0 <__exponent+0x5e>

0800990c <_printf_float>:
 800990c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009910:	b091      	sub	sp, #68	; 0x44
 8009912:	460c      	mov	r4, r1
 8009914:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009918:	4616      	mov	r6, r2
 800991a:	461f      	mov	r7, r3
 800991c:	4605      	mov	r5, r0
 800991e:	f000 fcd3 	bl	800a2c8 <_localeconv_r>
 8009922:	6803      	ldr	r3, [r0, #0]
 8009924:	4618      	mov	r0, r3
 8009926:	9309      	str	r3, [sp, #36]	; 0x24
 8009928:	f7f6 fc12 	bl	8000150 <strlen>
 800992c:	2300      	movs	r3, #0
 800992e:	930e      	str	r3, [sp, #56]	; 0x38
 8009930:	f8d8 3000 	ldr.w	r3, [r8]
 8009934:	900a      	str	r0, [sp, #40]	; 0x28
 8009936:	3307      	adds	r3, #7
 8009938:	f023 0307 	bic.w	r3, r3, #7
 800993c:	f103 0208 	add.w	r2, r3, #8
 8009940:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009944:	f8d4 b000 	ldr.w	fp, [r4]
 8009948:	f8c8 2000 	str.w	r2, [r8]
 800994c:	e9d3 a800 	ldrd	sl, r8, [r3]
 8009950:	4652      	mov	r2, sl
 8009952:	4643      	mov	r3, r8
 8009954:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009958:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800995c:	930b      	str	r3, [sp, #44]	; 0x2c
 800995e:	f04f 32ff 	mov.w	r2, #4294967295
 8009962:	4650      	mov	r0, sl
 8009964:	4b9c      	ldr	r3, [pc, #624]	; (8009bd8 <_printf_float+0x2cc>)
 8009966:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009968:	f7f7 f850 	bl	8000a0c <__aeabi_dcmpun>
 800996c:	bb70      	cbnz	r0, 80099cc <_printf_float+0xc0>
 800996e:	f04f 32ff 	mov.w	r2, #4294967295
 8009972:	4650      	mov	r0, sl
 8009974:	4b98      	ldr	r3, [pc, #608]	; (8009bd8 <_printf_float+0x2cc>)
 8009976:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009978:	f7f7 f82a 	bl	80009d0 <__aeabi_dcmple>
 800997c:	bb30      	cbnz	r0, 80099cc <_printf_float+0xc0>
 800997e:	2200      	movs	r2, #0
 8009980:	2300      	movs	r3, #0
 8009982:	4650      	mov	r0, sl
 8009984:	4641      	mov	r1, r8
 8009986:	f7f7 f819 	bl	80009bc <__aeabi_dcmplt>
 800998a:	b110      	cbz	r0, 8009992 <_printf_float+0x86>
 800998c:	232d      	movs	r3, #45	; 0x2d
 800998e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009992:	4a92      	ldr	r2, [pc, #584]	; (8009bdc <_printf_float+0x2d0>)
 8009994:	4b92      	ldr	r3, [pc, #584]	; (8009be0 <_printf_float+0x2d4>)
 8009996:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800999a:	bf94      	ite	ls
 800999c:	4690      	movls	r8, r2
 800999e:	4698      	movhi	r8, r3
 80099a0:	2303      	movs	r3, #3
 80099a2:	f04f 0a00 	mov.w	sl, #0
 80099a6:	6123      	str	r3, [r4, #16]
 80099a8:	f02b 0304 	bic.w	r3, fp, #4
 80099ac:	6023      	str	r3, [r4, #0]
 80099ae:	4633      	mov	r3, r6
 80099b0:	4621      	mov	r1, r4
 80099b2:	4628      	mov	r0, r5
 80099b4:	9700      	str	r7, [sp, #0]
 80099b6:	aa0f      	add	r2, sp, #60	; 0x3c
 80099b8:	f000 f9d6 	bl	8009d68 <_printf_common>
 80099bc:	3001      	adds	r0, #1
 80099be:	f040 8090 	bne.w	8009ae2 <_printf_float+0x1d6>
 80099c2:	f04f 30ff 	mov.w	r0, #4294967295
 80099c6:	b011      	add	sp, #68	; 0x44
 80099c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099cc:	4652      	mov	r2, sl
 80099ce:	4643      	mov	r3, r8
 80099d0:	4650      	mov	r0, sl
 80099d2:	4641      	mov	r1, r8
 80099d4:	f7f7 f81a 	bl	8000a0c <__aeabi_dcmpun>
 80099d8:	b148      	cbz	r0, 80099ee <_printf_float+0xe2>
 80099da:	f1b8 0f00 	cmp.w	r8, #0
 80099de:	bfb8      	it	lt
 80099e0:	232d      	movlt	r3, #45	; 0x2d
 80099e2:	4a80      	ldr	r2, [pc, #512]	; (8009be4 <_printf_float+0x2d8>)
 80099e4:	bfb8      	it	lt
 80099e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80099ea:	4b7f      	ldr	r3, [pc, #508]	; (8009be8 <_printf_float+0x2dc>)
 80099ec:	e7d3      	b.n	8009996 <_printf_float+0x8a>
 80099ee:	6863      	ldr	r3, [r4, #4]
 80099f0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80099f4:	1c5a      	adds	r2, r3, #1
 80099f6:	d142      	bne.n	8009a7e <_printf_float+0x172>
 80099f8:	2306      	movs	r3, #6
 80099fa:	6063      	str	r3, [r4, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	9206      	str	r2, [sp, #24]
 8009a00:	aa0e      	add	r2, sp, #56	; 0x38
 8009a02:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009a06:	aa0d      	add	r2, sp, #52	; 0x34
 8009a08:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009a0c:	9203      	str	r2, [sp, #12]
 8009a0e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009a12:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009a16:	6023      	str	r3, [r4, #0]
 8009a18:	6863      	ldr	r3, [r4, #4]
 8009a1a:	4652      	mov	r2, sl
 8009a1c:	9300      	str	r3, [sp, #0]
 8009a1e:	4628      	mov	r0, r5
 8009a20:	4643      	mov	r3, r8
 8009a22:	910b      	str	r1, [sp, #44]	; 0x2c
 8009a24:	f7ff fed6 	bl	80097d4 <__cvt>
 8009a28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a2a:	4680      	mov	r8, r0
 8009a2c:	2947      	cmp	r1, #71	; 0x47
 8009a2e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009a30:	d108      	bne.n	8009a44 <_printf_float+0x138>
 8009a32:	1cc8      	adds	r0, r1, #3
 8009a34:	db02      	blt.n	8009a3c <_printf_float+0x130>
 8009a36:	6863      	ldr	r3, [r4, #4]
 8009a38:	4299      	cmp	r1, r3
 8009a3a:	dd40      	ble.n	8009abe <_printf_float+0x1b2>
 8009a3c:	f1a9 0902 	sub.w	r9, r9, #2
 8009a40:	fa5f f989 	uxtb.w	r9, r9
 8009a44:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009a48:	d81f      	bhi.n	8009a8a <_printf_float+0x17e>
 8009a4a:	464a      	mov	r2, r9
 8009a4c:	3901      	subs	r1, #1
 8009a4e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a52:	910d      	str	r1, [sp, #52]	; 0x34
 8009a54:	f7ff ff1d 	bl	8009892 <__exponent>
 8009a58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a5a:	4682      	mov	sl, r0
 8009a5c:	1813      	adds	r3, r2, r0
 8009a5e:	2a01      	cmp	r2, #1
 8009a60:	6123      	str	r3, [r4, #16]
 8009a62:	dc02      	bgt.n	8009a6a <_printf_float+0x15e>
 8009a64:	6822      	ldr	r2, [r4, #0]
 8009a66:	07d2      	lsls	r2, r2, #31
 8009a68:	d501      	bpl.n	8009a6e <_printf_float+0x162>
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	6123      	str	r3, [r4, #16]
 8009a6e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d09b      	beq.n	80099ae <_printf_float+0xa2>
 8009a76:	232d      	movs	r3, #45	; 0x2d
 8009a78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a7c:	e797      	b.n	80099ae <_printf_float+0xa2>
 8009a7e:	2947      	cmp	r1, #71	; 0x47
 8009a80:	d1bc      	bne.n	80099fc <_printf_float+0xf0>
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1ba      	bne.n	80099fc <_printf_float+0xf0>
 8009a86:	2301      	movs	r3, #1
 8009a88:	e7b7      	b.n	80099fa <_printf_float+0xee>
 8009a8a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009a8e:	d118      	bne.n	8009ac2 <_printf_float+0x1b6>
 8009a90:	2900      	cmp	r1, #0
 8009a92:	6863      	ldr	r3, [r4, #4]
 8009a94:	dd0b      	ble.n	8009aae <_printf_float+0x1a2>
 8009a96:	6121      	str	r1, [r4, #16]
 8009a98:	b913      	cbnz	r3, 8009aa0 <_printf_float+0x194>
 8009a9a:	6822      	ldr	r2, [r4, #0]
 8009a9c:	07d0      	lsls	r0, r2, #31
 8009a9e:	d502      	bpl.n	8009aa6 <_printf_float+0x19a>
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	440b      	add	r3, r1
 8009aa4:	6123      	str	r3, [r4, #16]
 8009aa6:	f04f 0a00 	mov.w	sl, #0
 8009aaa:	65a1      	str	r1, [r4, #88]	; 0x58
 8009aac:	e7df      	b.n	8009a6e <_printf_float+0x162>
 8009aae:	b913      	cbnz	r3, 8009ab6 <_printf_float+0x1aa>
 8009ab0:	6822      	ldr	r2, [r4, #0]
 8009ab2:	07d2      	lsls	r2, r2, #31
 8009ab4:	d501      	bpl.n	8009aba <_printf_float+0x1ae>
 8009ab6:	3302      	adds	r3, #2
 8009ab8:	e7f4      	b.n	8009aa4 <_printf_float+0x198>
 8009aba:	2301      	movs	r3, #1
 8009abc:	e7f2      	b.n	8009aa4 <_printf_float+0x198>
 8009abe:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009ac2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ac4:	4299      	cmp	r1, r3
 8009ac6:	db05      	blt.n	8009ad4 <_printf_float+0x1c8>
 8009ac8:	6823      	ldr	r3, [r4, #0]
 8009aca:	6121      	str	r1, [r4, #16]
 8009acc:	07d8      	lsls	r0, r3, #31
 8009ace:	d5ea      	bpl.n	8009aa6 <_printf_float+0x19a>
 8009ad0:	1c4b      	adds	r3, r1, #1
 8009ad2:	e7e7      	b.n	8009aa4 <_printf_float+0x198>
 8009ad4:	2900      	cmp	r1, #0
 8009ad6:	bfcc      	ite	gt
 8009ad8:	2201      	movgt	r2, #1
 8009ada:	f1c1 0202 	rsble	r2, r1, #2
 8009ade:	4413      	add	r3, r2
 8009ae0:	e7e0      	b.n	8009aa4 <_printf_float+0x198>
 8009ae2:	6823      	ldr	r3, [r4, #0]
 8009ae4:	055a      	lsls	r2, r3, #21
 8009ae6:	d407      	bmi.n	8009af8 <_printf_float+0x1ec>
 8009ae8:	6923      	ldr	r3, [r4, #16]
 8009aea:	4642      	mov	r2, r8
 8009aec:	4631      	mov	r1, r6
 8009aee:	4628      	mov	r0, r5
 8009af0:	47b8      	blx	r7
 8009af2:	3001      	adds	r0, #1
 8009af4:	d12b      	bne.n	8009b4e <_printf_float+0x242>
 8009af6:	e764      	b.n	80099c2 <_printf_float+0xb6>
 8009af8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009afc:	f240 80dd 	bls.w	8009cba <_printf_float+0x3ae>
 8009b00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b04:	2200      	movs	r2, #0
 8009b06:	2300      	movs	r3, #0
 8009b08:	f7f6 ff4e 	bl	80009a8 <__aeabi_dcmpeq>
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	d033      	beq.n	8009b78 <_printf_float+0x26c>
 8009b10:	2301      	movs	r3, #1
 8009b12:	4631      	mov	r1, r6
 8009b14:	4628      	mov	r0, r5
 8009b16:	4a35      	ldr	r2, [pc, #212]	; (8009bec <_printf_float+0x2e0>)
 8009b18:	47b8      	blx	r7
 8009b1a:	3001      	adds	r0, #1
 8009b1c:	f43f af51 	beq.w	80099c2 <_printf_float+0xb6>
 8009b20:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009b24:	429a      	cmp	r2, r3
 8009b26:	db02      	blt.n	8009b2e <_printf_float+0x222>
 8009b28:	6823      	ldr	r3, [r4, #0]
 8009b2a:	07d8      	lsls	r0, r3, #31
 8009b2c:	d50f      	bpl.n	8009b4e <_printf_float+0x242>
 8009b2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b32:	4631      	mov	r1, r6
 8009b34:	4628      	mov	r0, r5
 8009b36:	47b8      	blx	r7
 8009b38:	3001      	adds	r0, #1
 8009b3a:	f43f af42 	beq.w	80099c2 <_printf_float+0xb6>
 8009b3e:	f04f 0800 	mov.w	r8, #0
 8009b42:	f104 091a 	add.w	r9, r4, #26
 8009b46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	4543      	cmp	r3, r8
 8009b4c:	dc09      	bgt.n	8009b62 <_printf_float+0x256>
 8009b4e:	6823      	ldr	r3, [r4, #0]
 8009b50:	079b      	lsls	r3, r3, #30
 8009b52:	f100 8104 	bmi.w	8009d5e <_printf_float+0x452>
 8009b56:	68e0      	ldr	r0, [r4, #12]
 8009b58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b5a:	4298      	cmp	r0, r3
 8009b5c:	bfb8      	it	lt
 8009b5e:	4618      	movlt	r0, r3
 8009b60:	e731      	b.n	80099c6 <_printf_float+0xba>
 8009b62:	2301      	movs	r3, #1
 8009b64:	464a      	mov	r2, r9
 8009b66:	4631      	mov	r1, r6
 8009b68:	4628      	mov	r0, r5
 8009b6a:	47b8      	blx	r7
 8009b6c:	3001      	adds	r0, #1
 8009b6e:	f43f af28 	beq.w	80099c2 <_printf_float+0xb6>
 8009b72:	f108 0801 	add.w	r8, r8, #1
 8009b76:	e7e6      	b.n	8009b46 <_printf_float+0x23a>
 8009b78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	dc38      	bgt.n	8009bf0 <_printf_float+0x2e4>
 8009b7e:	2301      	movs	r3, #1
 8009b80:	4631      	mov	r1, r6
 8009b82:	4628      	mov	r0, r5
 8009b84:	4a19      	ldr	r2, [pc, #100]	; (8009bec <_printf_float+0x2e0>)
 8009b86:	47b8      	blx	r7
 8009b88:	3001      	adds	r0, #1
 8009b8a:	f43f af1a 	beq.w	80099c2 <_printf_float+0xb6>
 8009b8e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009b92:	4313      	orrs	r3, r2
 8009b94:	d102      	bne.n	8009b9c <_printf_float+0x290>
 8009b96:	6823      	ldr	r3, [r4, #0]
 8009b98:	07d9      	lsls	r1, r3, #31
 8009b9a:	d5d8      	bpl.n	8009b4e <_printf_float+0x242>
 8009b9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ba0:	4631      	mov	r1, r6
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	47b8      	blx	r7
 8009ba6:	3001      	adds	r0, #1
 8009ba8:	f43f af0b 	beq.w	80099c2 <_printf_float+0xb6>
 8009bac:	f04f 0900 	mov.w	r9, #0
 8009bb0:	f104 0a1a 	add.w	sl, r4, #26
 8009bb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bb6:	425b      	negs	r3, r3
 8009bb8:	454b      	cmp	r3, r9
 8009bba:	dc01      	bgt.n	8009bc0 <_printf_float+0x2b4>
 8009bbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bbe:	e794      	b.n	8009aea <_printf_float+0x1de>
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	4652      	mov	r2, sl
 8009bc4:	4631      	mov	r1, r6
 8009bc6:	4628      	mov	r0, r5
 8009bc8:	47b8      	blx	r7
 8009bca:	3001      	adds	r0, #1
 8009bcc:	f43f aef9 	beq.w	80099c2 <_printf_float+0xb6>
 8009bd0:	f109 0901 	add.w	r9, r9, #1
 8009bd4:	e7ee      	b.n	8009bb4 <_printf_float+0x2a8>
 8009bd6:	bf00      	nop
 8009bd8:	7fefffff 	.word	0x7fefffff
 8009bdc:	0800cbce 	.word	0x0800cbce
 8009be0:	0800cbd2 	.word	0x0800cbd2
 8009be4:	0800cbd6 	.word	0x0800cbd6
 8009be8:	0800cbda 	.word	0x0800cbda
 8009bec:	0800cbde 	.word	0x0800cbde
 8009bf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bf2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	bfa8      	it	ge
 8009bf8:	461a      	movge	r2, r3
 8009bfa:	2a00      	cmp	r2, #0
 8009bfc:	4691      	mov	r9, r2
 8009bfe:	dc37      	bgt.n	8009c70 <_printf_float+0x364>
 8009c00:	f04f 0b00 	mov.w	fp, #0
 8009c04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c08:	f104 021a 	add.w	r2, r4, #26
 8009c0c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009c10:	ebaa 0309 	sub.w	r3, sl, r9
 8009c14:	455b      	cmp	r3, fp
 8009c16:	dc33      	bgt.n	8009c80 <_printf_float+0x374>
 8009c18:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	db3b      	blt.n	8009c98 <_printf_float+0x38c>
 8009c20:	6823      	ldr	r3, [r4, #0]
 8009c22:	07da      	lsls	r2, r3, #31
 8009c24:	d438      	bmi.n	8009c98 <_printf_float+0x38c>
 8009c26:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009c2a:	eba2 0903 	sub.w	r9, r2, r3
 8009c2e:	eba2 020a 	sub.w	r2, r2, sl
 8009c32:	4591      	cmp	r9, r2
 8009c34:	bfa8      	it	ge
 8009c36:	4691      	movge	r9, r2
 8009c38:	f1b9 0f00 	cmp.w	r9, #0
 8009c3c:	dc34      	bgt.n	8009ca8 <_printf_float+0x39c>
 8009c3e:	f04f 0800 	mov.w	r8, #0
 8009c42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c46:	f104 0a1a 	add.w	sl, r4, #26
 8009c4a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009c4e:	1a9b      	subs	r3, r3, r2
 8009c50:	eba3 0309 	sub.w	r3, r3, r9
 8009c54:	4543      	cmp	r3, r8
 8009c56:	f77f af7a 	ble.w	8009b4e <_printf_float+0x242>
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	4652      	mov	r2, sl
 8009c5e:	4631      	mov	r1, r6
 8009c60:	4628      	mov	r0, r5
 8009c62:	47b8      	blx	r7
 8009c64:	3001      	adds	r0, #1
 8009c66:	f43f aeac 	beq.w	80099c2 <_printf_float+0xb6>
 8009c6a:	f108 0801 	add.w	r8, r8, #1
 8009c6e:	e7ec      	b.n	8009c4a <_printf_float+0x33e>
 8009c70:	4613      	mov	r3, r2
 8009c72:	4631      	mov	r1, r6
 8009c74:	4642      	mov	r2, r8
 8009c76:	4628      	mov	r0, r5
 8009c78:	47b8      	blx	r7
 8009c7a:	3001      	adds	r0, #1
 8009c7c:	d1c0      	bne.n	8009c00 <_printf_float+0x2f4>
 8009c7e:	e6a0      	b.n	80099c2 <_printf_float+0xb6>
 8009c80:	2301      	movs	r3, #1
 8009c82:	4631      	mov	r1, r6
 8009c84:	4628      	mov	r0, r5
 8009c86:	920b      	str	r2, [sp, #44]	; 0x2c
 8009c88:	47b8      	blx	r7
 8009c8a:	3001      	adds	r0, #1
 8009c8c:	f43f ae99 	beq.w	80099c2 <_printf_float+0xb6>
 8009c90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c92:	f10b 0b01 	add.w	fp, fp, #1
 8009c96:	e7b9      	b.n	8009c0c <_printf_float+0x300>
 8009c98:	4631      	mov	r1, r6
 8009c9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	47b8      	blx	r7
 8009ca2:	3001      	adds	r0, #1
 8009ca4:	d1bf      	bne.n	8009c26 <_printf_float+0x31a>
 8009ca6:	e68c      	b.n	80099c2 <_printf_float+0xb6>
 8009ca8:	464b      	mov	r3, r9
 8009caa:	4631      	mov	r1, r6
 8009cac:	4628      	mov	r0, r5
 8009cae:	eb08 020a 	add.w	r2, r8, sl
 8009cb2:	47b8      	blx	r7
 8009cb4:	3001      	adds	r0, #1
 8009cb6:	d1c2      	bne.n	8009c3e <_printf_float+0x332>
 8009cb8:	e683      	b.n	80099c2 <_printf_float+0xb6>
 8009cba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cbc:	2a01      	cmp	r2, #1
 8009cbe:	dc01      	bgt.n	8009cc4 <_printf_float+0x3b8>
 8009cc0:	07db      	lsls	r3, r3, #31
 8009cc2:	d539      	bpl.n	8009d38 <_printf_float+0x42c>
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	4642      	mov	r2, r8
 8009cc8:	4631      	mov	r1, r6
 8009cca:	4628      	mov	r0, r5
 8009ccc:	47b8      	blx	r7
 8009cce:	3001      	adds	r0, #1
 8009cd0:	f43f ae77 	beq.w	80099c2 <_printf_float+0xb6>
 8009cd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cd8:	4631      	mov	r1, r6
 8009cda:	4628      	mov	r0, r5
 8009cdc:	47b8      	blx	r7
 8009cde:	3001      	adds	r0, #1
 8009ce0:	f43f ae6f 	beq.w	80099c2 <_printf_float+0xb6>
 8009ce4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ce8:	2200      	movs	r2, #0
 8009cea:	2300      	movs	r3, #0
 8009cec:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8009cf0:	f7f6 fe5a 	bl	80009a8 <__aeabi_dcmpeq>
 8009cf4:	b9d8      	cbnz	r0, 8009d2e <_printf_float+0x422>
 8009cf6:	f109 33ff 	add.w	r3, r9, #4294967295
 8009cfa:	f108 0201 	add.w	r2, r8, #1
 8009cfe:	4631      	mov	r1, r6
 8009d00:	4628      	mov	r0, r5
 8009d02:	47b8      	blx	r7
 8009d04:	3001      	adds	r0, #1
 8009d06:	d10e      	bne.n	8009d26 <_printf_float+0x41a>
 8009d08:	e65b      	b.n	80099c2 <_printf_float+0xb6>
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	464a      	mov	r2, r9
 8009d0e:	4631      	mov	r1, r6
 8009d10:	4628      	mov	r0, r5
 8009d12:	47b8      	blx	r7
 8009d14:	3001      	adds	r0, #1
 8009d16:	f43f ae54 	beq.w	80099c2 <_printf_float+0xb6>
 8009d1a:	f108 0801 	add.w	r8, r8, #1
 8009d1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d20:	3b01      	subs	r3, #1
 8009d22:	4543      	cmp	r3, r8
 8009d24:	dcf1      	bgt.n	8009d0a <_printf_float+0x3fe>
 8009d26:	4653      	mov	r3, sl
 8009d28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d2c:	e6de      	b.n	8009aec <_printf_float+0x1e0>
 8009d2e:	f04f 0800 	mov.w	r8, #0
 8009d32:	f104 091a 	add.w	r9, r4, #26
 8009d36:	e7f2      	b.n	8009d1e <_printf_float+0x412>
 8009d38:	2301      	movs	r3, #1
 8009d3a:	4642      	mov	r2, r8
 8009d3c:	e7df      	b.n	8009cfe <_printf_float+0x3f2>
 8009d3e:	2301      	movs	r3, #1
 8009d40:	464a      	mov	r2, r9
 8009d42:	4631      	mov	r1, r6
 8009d44:	4628      	mov	r0, r5
 8009d46:	47b8      	blx	r7
 8009d48:	3001      	adds	r0, #1
 8009d4a:	f43f ae3a 	beq.w	80099c2 <_printf_float+0xb6>
 8009d4e:	f108 0801 	add.w	r8, r8, #1
 8009d52:	68e3      	ldr	r3, [r4, #12]
 8009d54:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009d56:	1a5b      	subs	r3, r3, r1
 8009d58:	4543      	cmp	r3, r8
 8009d5a:	dcf0      	bgt.n	8009d3e <_printf_float+0x432>
 8009d5c:	e6fb      	b.n	8009b56 <_printf_float+0x24a>
 8009d5e:	f04f 0800 	mov.w	r8, #0
 8009d62:	f104 0919 	add.w	r9, r4, #25
 8009d66:	e7f4      	b.n	8009d52 <_printf_float+0x446>

08009d68 <_printf_common>:
 8009d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d6c:	4616      	mov	r6, r2
 8009d6e:	4699      	mov	r9, r3
 8009d70:	688a      	ldr	r2, [r1, #8]
 8009d72:	690b      	ldr	r3, [r1, #16]
 8009d74:	4607      	mov	r7, r0
 8009d76:	4293      	cmp	r3, r2
 8009d78:	bfb8      	it	lt
 8009d7a:	4613      	movlt	r3, r2
 8009d7c:	6033      	str	r3, [r6, #0]
 8009d7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d82:	460c      	mov	r4, r1
 8009d84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d88:	b10a      	cbz	r2, 8009d8e <_printf_common+0x26>
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	6033      	str	r3, [r6, #0]
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	0699      	lsls	r1, r3, #26
 8009d92:	bf42      	ittt	mi
 8009d94:	6833      	ldrmi	r3, [r6, #0]
 8009d96:	3302      	addmi	r3, #2
 8009d98:	6033      	strmi	r3, [r6, #0]
 8009d9a:	6825      	ldr	r5, [r4, #0]
 8009d9c:	f015 0506 	ands.w	r5, r5, #6
 8009da0:	d106      	bne.n	8009db0 <_printf_common+0x48>
 8009da2:	f104 0a19 	add.w	sl, r4, #25
 8009da6:	68e3      	ldr	r3, [r4, #12]
 8009da8:	6832      	ldr	r2, [r6, #0]
 8009daa:	1a9b      	subs	r3, r3, r2
 8009dac:	42ab      	cmp	r3, r5
 8009dae:	dc2b      	bgt.n	8009e08 <_printf_common+0xa0>
 8009db0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009db4:	1e13      	subs	r3, r2, #0
 8009db6:	6822      	ldr	r2, [r4, #0]
 8009db8:	bf18      	it	ne
 8009dba:	2301      	movne	r3, #1
 8009dbc:	0692      	lsls	r2, r2, #26
 8009dbe:	d430      	bmi.n	8009e22 <_printf_common+0xba>
 8009dc0:	4649      	mov	r1, r9
 8009dc2:	4638      	mov	r0, r7
 8009dc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009dc8:	47c0      	blx	r8
 8009dca:	3001      	adds	r0, #1
 8009dcc:	d023      	beq.n	8009e16 <_printf_common+0xae>
 8009dce:	6823      	ldr	r3, [r4, #0]
 8009dd0:	6922      	ldr	r2, [r4, #16]
 8009dd2:	f003 0306 	and.w	r3, r3, #6
 8009dd6:	2b04      	cmp	r3, #4
 8009dd8:	bf14      	ite	ne
 8009dda:	2500      	movne	r5, #0
 8009ddc:	6833      	ldreq	r3, [r6, #0]
 8009dde:	f04f 0600 	mov.w	r6, #0
 8009de2:	bf08      	it	eq
 8009de4:	68e5      	ldreq	r5, [r4, #12]
 8009de6:	f104 041a 	add.w	r4, r4, #26
 8009dea:	bf08      	it	eq
 8009dec:	1aed      	subeq	r5, r5, r3
 8009dee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009df2:	bf08      	it	eq
 8009df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	bfc4      	itt	gt
 8009dfc:	1a9b      	subgt	r3, r3, r2
 8009dfe:	18ed      	addgt	r5, r5, r3
 8009e00:	42b5      	cmp	r5, r6
 8009e02:	d11a      	bne.n	8009e3a <_printf_common+0xd2>
 8009e04:	2000      	movs	r0, #0
 8009e06:	e008      	b.n	8009e1a <_printf_common+0xb2>
 8009e08:	2301      	movs	r3, #1
 8009e0a:	4652      	mov	r2, sl
 8009e0c:	4649      	mov	r1, r9
 8009e0e:	4638      	mov	r0, r7
 8009e10:	47c0      	blx	r8
 8009e12:	3001      	adds	r0, #1
 8009e14:	d103      	bne.n	8009e1e <_printf_common+0xb6>
 8009e16:	f04f 30ff 	mov.w	r0, #4294967295
 8009e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e1e:	3501      	adds	r5, #1
 8009e20:	e7c1      	b.n	8009da6 <_printf_common+0x3e>
 8009e22:	2030      	movs	r0, #48	; 0x30
 8009e24:	18e1      	adds	r1, r4, r3
 8009e26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e2a:	1c5a      	adds	r2, r3, #1
 8009e2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e30:	4422      	add	r2, r4
 8009e32:	3302      	adds	r3, #2
 8009e34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e38:	e7c2      	b.n	8009dc0 <_printf_common+0x58>
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	4622      	mov	r2, r4
 8009e3e:	4649      	mov	r1, r9
 8009e40:	4638      	mov	r0, r7
 8009e42:	47c0      	blx	r8
 8009e44:	3001      	adds	r0, #1
 8009e46:	d0e6      	beq.n	8009e16 <_printf_common+0xae>
 8009e48:	3601      	adds	r6, #1
 8009e4a:	e7d9      	b.n	8009e00 <_printf_common+0x98>

08009e4c <_printf_i>:
 8009e4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e50:	7e0f      	ldrb	r7, [r1, #24]
 8009e52:	4691      	mov	r9, r2
 8009e54:	2f78      	cmp	r7, #120	; 0x78
 8009e56:	4680      	mov	r8, r0
 8009e58:	460c      	mov	r4, r1
 8009e5a:	469a      	mov	sl, r3
 8009e5c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e62:	d807      	bhi.n	8009e74 <_printf_i+0x28>
 8009e64:	2f62      	cmp	r7, #98	; 0x62
 8009e66:	d80a      	bhi.n	8009e7e <_printf_i+0x32>
 8009e68:	2f00      	cmp	r7, #0
 8009e6a:	f000 80d5 	beq.w	800a018 <_printf_i+0x1cc>
 8009e6e:	2f58      	cmp	r7, #88	; 0x58
 8009e70:	f000 80c1 	beq.w	8009ff6 <_printf_i+0x1aa>
 8009e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e7c:	e03a      	b.n	8009ef4 <_printf_i+0xa8>
 8009e7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e82:	2b15      	cmp	r3, #21
 8009e84:	d8f6      	bhi.n	8009e74 <_printf_i+0x28>
 8009e86:	a101      	add	r1, pc, #4	; (adr r1, 8009e8c <_printf_i+0x40>)
 8009e88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e8c:	08009ee5 	.word	0x08009ee5
 8009e90:	08009ef9 	.word	0x08009ef9
 8009e94:	08009e75 	.word	0x08009e75
 8009e98:	08009e75 	.word	0x08009e75
 8009e9c:	08009e75 	.word	0x08009e75
 8009ea0:	08009e75 	.word	0x08009e75
 8009ea4:	08009ef9 	.word	0x08009ef9
 8009ea8:	08009e75 	.word	0x08009e75
 8009eac:	08009e75 	.word	0x08009e75
 8009eb0:	08009e75 	.word	0x08009e75
 8009eb4:	08009e75 	.word	0x08009e75
 8009eb8:	08009fff 	.word	0x08009fff
 8009ebc:	08009f25 	.word	0x08009f25
 8009ec0:	08009fb9 	.word	0x08009fb9
 8009ec4:	08009e75 	.word	0x08009e75
 8009ec8:	08009e75 	.word	0x08009e75
 8009ecc:	0800a021 	.word	0x0800a021
 8009ed0:	08009e75 	.word	0x08009e75
 8009ed4:	08009f25 	.word	0x08009f25
 8009ed8:	08009e75 	.word	0x08009e75
 8009edc:	08009e75 	.word	0x08009e75
 8009ee0:	08009fc1 	.word	0x08009fc1
 8009ee4:	682b      	ldr	r3, [r5, #0]
 8009ee6:	1d1a      	adds	r2, r3, #4
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	602a      	str	r2, [r5, #0]
 8009eec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ef0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e0a0      	b.n	800a03a <_printf_i+0x1ee>
 8009ef8:	6820      	ldr	r0, [r4, #0]
 8009efa:	682b      	ldr	r3, [r5, #0]
 8009efc:	0607      	lsls	r7, r0, #24
 8009efe:	f103 0104 	add.w	r1, r3, #4
 8009f02:	6029      	str	r1, [r5, #0]
 8009f04:	d501      	bpl.n	8009f0a <_printf_i+0xbe>
 8009f06:	681e      	ldr	r6, [r3, #0]
 8009f08:	e003      	b.n	8009f12 <_printf_i+0xc6>
 8009f0a:	0646      	lsls	r6, r0, #25
 8009f0c:	d5fb      	bpl.n	8009f06 <_printf_i+0xba>
 8009f0e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009f12:	2e00      	cmp	r6, #0
 8009f14:	da03      	bge.n	8009f1e <_printf_i+0xd2>
 8009f16:	232d      	movs	r3, #45	; 0x2d
 8009f18:	4276      	negs	r6, r6
 8009f1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f1e:	230a      	movs	r3, #10
 8009f20:	4859      	ldr	r0, [pc, #356]	; (800a088 <_printf_i+0x23c>)
 8009f22:	e012      	b.n	8009f4a <_printf_i+0xfe>
 8009f24:	682b      	ldr	r3, [r5, #0]
 8009f26:	6820      	ldr	r0, [r4, #0]
 8009f28:	1d19      	adds	r1, r3, #4
 8009f2a:	6029      	str	r1, [r5, #0]
 8009f2c:	0605      	lsls	r5, r0, #24
 8009f2e:	d501      	bpl.n	8009f34 <_printf_i+0xe8>
 8009f30:	681e      	ldr	r6, [r3, #0]
 8009f32:	e002      	b.n	8009f3a <_printf_i+0xee>
 8009f34:	0641      	lsls	r1, r0, #25
 8009f36:	d5fb      	bpl.n	8009f30 <_printf_i+0xe4>
 8009f38:	881e      	ldrh	r6, [r3, #0]
 8009f3a:	2f6f      	cmp	r7, #111	; 0x6f
 8009f3c:	bf0c      	ite	eq
 8009f3e:	2308      	moveq	r3, #8
 8009f40:	230a      	movne	r3, #10
 8009f42:	4851      	ldr	r0, [pc, #324]	; (800a088 <_printf_i+0x23c>)
 8009f44:	2100      	movs	r1, #0
 8009f46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f4a:	6865      	ldr	r5, [r4, #4]
 8009f4c:	2d00      	cmp	r5, #0
 8009f4e:	bfa8      	it	ge
 8009f50:	6821      	ldrge	r1, [r4, #0]
 8009f52:	60a5      	str	r5, [r4, #8]
 8009f54:	bfa4      	itt	ge
 8009f56:	f021 0104 	bicge.w	r1, r1, #4
 8009f5a:	6021      	strge	r1, [r4, #0]
 8009f5c:	b90e      	cbnz	r6, 8009f62 <_printf_i+0x116>
 8009f5e:	2d00      	cmp	r5, #0
 8009f60:	d04b      	beq.n	8009ffa <_printf_i+0x1ae>
 8009f62:	4615      	mov	r5, r2
 8009f64:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f68:	fb03 6711 	mls	r7, r3, r1, r6
 8009f6c:	5dc7      	ldrb	r7, [r0, r7]
 8009f6e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f72:	4637      	mov	r7, r6
 8009f74:	42bb      	cmp	r3, r7
 8009f76:	460e      	mov	r6, r1
 8009f78:	d9f4      	bls.n	8009f64 <_printf_i+0x118>
 8009f7a:	2b08      	cmp	r3, #8
 8009f7c:	d10b      	bne.n	8009f96 <_printf_i+0x14a>
 8009f7e:	6823      	ldr	r3, [r4, #0]
 8009f80:	07de      	lsls	r6, r3, #31
 8009f82:	d508      	bpl.n	8009f96 <_printf_i+0x14a>
 8009f84:	6923      	ldr	r3, [r4, #16]
 8009f86:	6861      	ldr	r1, [r4, #4]
 8009f88:	4299      	cmp	r1, r3
 8009f8a:	bfde      	ittt	le
 8009f8c:	2330      	movle	r3, #48	; 0x30
 8009f8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f92:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f96:	1b52      	subs	r2, r2, r5
 8009f98:	6122      	str	r2, [r4, #16]
 8009f9a:	464b      	mov	r3, r9
 8009f9c:	4621      	mov	r1, r4
 8009f9e:	4640      	mov	r0, r8
 8009fa0:	f8cd a000 	str.w	sl, [sp]
 8009fa4:	aa03      	add	r2, sp, #12
 8009fa6:	f7ff fedf 	bl	8009d68 <_printf_common>
 8009faa:	3001      	adds	r0, #1
 8009fac:	d14a      	bne.n	800a044 <_printf_i+0x1f8>
 8009fae:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb2:	b004      	add	sp, #16
 8009fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fb8:	6823      	ldr	r3, [r4, #0]
 8009fba:	f043 0320 	orr.w	r3, r3, #32
 8009fbe:	6023      	str	r3, [r4, #0]
 8009fc0:	2778      	movs	r7, #120	; 0x78
 8009fc2:	4832      	ldr	r0, [pc, #200]	; (800a08c <_printf_i+0x240>)
 8009fc4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009fc8:	6823      	ldr	r3, [r4, #0]
 8009fca:	6829      	ldr	r1, [r5, #0]
 8009fcc:	061f      	lsls	r7, r3, #24
 8009fce:	f851 6b04 	ldr.w	r6, [r1], #4
 8009fd2:	d402      	bmi.n	8009fda <_printf_i+0x18e>
 8009fd4:	065f      	lsls	r7, r3, #25
 8009fd6:	bf48      	it	mi
 8009fd8:	b2b6      	uxthmi	r6, r6
 8009fda:	07df      	lsls	r7, r3, #31
 8009fdc:	bf48      	it	mi
 8009fde:	f043 0320 	orrmi.w	r3, r3, #32
 8009fe2:	6029      	str	r1, [r5, #0]
 8009fe4:	bf48      	it	mi
 8009fe6:	6023      	strmi	r3, [r4, #0]
 8009fe8:	b91e      	cbnz	r6, 8009ff2 <_printf_i+0x1a6>
 8009fea:	6823      	ldr	r3, [r4, #0]
 8009fec:	f023 0320 	bic.w	r3, r3, #32
 8009ff0:	6023      	str	r3, [r4, #0]
 8009ff2:	2310      	movs	r3, #16
 8009ff4:	e7a6      	b.n	8009f44 <_printf_i+0xf8>
 8009ff6:	4824      	ldr	r0, [pc, #144]	; (800a088 <_printf_i+0x23c>)
 8009ff8:	e7e4      	b.n	8009fc4 <_printf_i+0x178>
 8009ffa:	4615      	mov	r5, r2
 8009ffc:	e7bd      	b.n	8009f7a <_printf_i+0x12e>
 8009ffe:	682b      	ldr	r3, [r5, #0]
 800a000:	6826      	ldr	r6, [r4, #0]
 800a002:	1d18      	adds	r0, r3, #4
 800a004:	6961      	ldr	r1, [r4, #20]
 800a006:	6028      	str	r0, [r5, #0]
 800a008:	0635      	lsls	r5, r6, #24
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	d501      	bpl.n	800a012 <_printf_i+0x1c6>
 800a00e:	6019      	str	r1, [r3, #0]
 800a010:	e002      	b.n	800a018 <_printf_i+0x1cc>
 800a012:	0670      	lsls	r0, r6, #25
 800a014:	d5fb      	bpl.n	800a00e <_printf_i+0x1c2>
 800a016:	8019      	strh	r1, [r3, #0]
 800a018:	2300      	movs	r3, #0
 800a01a:	4615      	mov	r5, r2
 800a01c:	6123      	str	r3, [r4, #16]
 800a01e:	e7bc      	b.n	8009f9a <_printf_i+0x14e>
 800a020:	682b      	ldr	r3, [r5, #0]
 800a022:	2100      	movs	r1, #0
 800a024:	1d1a      	adds	r2, r3, #4
 800a026:	602a      	str	r2, [r5, #0]
 800a028:	681d      	ldr	r5, [r3, #0]
 800a02a:	6862      	ldr	r2, [r4, #4]
 800a02c:	4628      	mov	r0, r5
 800a02e:	f000 f9d1 	bl	800a3d4 <memchr>
 800a032:	b108      	cbz	r0, 800a038 <_printf_i+0x1ec>
 800a034:	1b40      	subs	r0, r0, r5
 800a036:	6060      	str	r0, [r4, #4]
 800a038:	6863      	ldr	r3, [r4, #4]
 800a03a:	6123      	str	r3, [r4, #16]
 800a03c:	2300      	movs	r3, #0
 800a03e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a042:	e7aa      	b.n	8009f9a <_printf_i+0x14e>
 800a044:	462a      	mov	r2, r5
 800a046:	4649      	mov	r1, r9
 800a048:	4640      	mov	r0, r8
 800a04a:	6923      	ldr	r3, [r4, #16]
 800a04c:	47d0      	blx	sl
 800a04e:	3001      	adds	r0, #1
 800a050:	d0ad      	beq.n	8009fae <_printf_i+0x162>
 800a052:	6823      	ldr	r3, [r4, #0]
 800a054:	079b      	lsls	r3, r3, #30
 800a056:	d413      	bmi.n	800a080 <_printf_i+0x234>
 800a058:	68e0      	ldr	r0, [r4, #12]
 800a05a:	9b03      	ldr	r3, [sp, #12]
 800a05c:	4298      	cmp	r0, r3
 800a05e:	bfb8      	it	lt
 800a060:	4618      	movlt	r0, r3
 800a062:	e7a6      	b.n	8009fb2 <_printf_i+0x166>
 800a064:	2301      	movs	r3, #1
 800a066:	4632      	mov	r2, r6
 800a068:	4649      	mov	r1, r9
 800a06a:	4640      	mov	r0, r8
 800a06c:	47d0      	blx	sl
 800a06e:	3001      	adds	r0, #1
 800a070:	d09d      	beq.n	8009fae <_printf_i+0x162>
 800a072:	3501      	adds	r5, #1
 800a074:	68e3      	ldr	r3, [r4, #12]
 800a076:	9903      	ldr	r1, [sp, #12]
 800a078:	1a5b      	subs	r3, r3, r1
 800a07a:	42ab      	cmp	r3, r5
 800a07c:	dcf2      	bgt.n	800a064 <_printf_i+0x218>
 800a07e:	e7eb      	b.n	800a058 <_printf_i+0x20c>
 800a080:	2500      	movs	r5, #0
 800a082:	f104 0619 	add.w	r6, r4, #25
 800a086:	e7f5      	b.n	800a074 <_printf_i+0x228>
 800a088:	0800cbe0 	.word	0x0800cbe0
 800a08c:	0800cbf1 	.word	0x0800cbf1

0800a090 <std>:
 800a090:	2300      	movs	r3, #0
 800a092:	b510      	push	{r4, lr}
 800a094:	4604      	mov	r4, r0
 800a096:	e9c0 3300 	strd	r3, r3, [r0]
 800a09a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a09e:	6083      	str	r3, [r0, #8]
 800a0a0:	8181      	strh	r1, [r0, #12]
 800a0a2:	6643      	str	r3, [r0, #100]	; 0x64
 800a0a4:	81c2      	strh	r2, [r0, #14]
 800a0a6:	6183      	str	r3, [r0, #24]
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	2208      	movs	r2, #8
 800a0ac:	305c      	adds	r0, #92	; 0x5c
 800a0ae:	f000 f902 	bl	800a2b6 <memset>
 800a0b2:	4b05      	ldr	r3, [pc, #20]	; (800a0c8 <std+0x38>)
 800a0b4:	6224      	str	r4, [r4, #32]
 800a0b6:	6263      	str	r3, [r4, #36]	; 0x24
 800a0b8:	4b04      	ldr	r3, [pc, #16]	; (800a0cc <std+0x3c>)
 800a0ba:	62a3      	str	r3, [r4, #40]	; 0x28
 800a0bc:	4b04      	ldr	r3, [pc, #16]	; (800a0d0 <std+0x40>)
 800a0be:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a0c0:	4b04      	ldr	r3, [pc, #16]	; (800a0d4 <std+0x44>)
 800a0c2:	6323      	str	r3, [r4, #48]	; 0x30
 800a0c4:	bd10      	pop	{r4, pc}
 800a0c6:	bf00      	nop
 800a0c8:	0800a231 	.word	0x0800a231
 800a0cc:	0800a253 	.word	0x0800a253
 800a0d0:	0800a28b 	.word	0x0800a28b
 800a0d4:	0800a2af 	.word	0x0800a2af

0800a0d8 <stdio_exit_handler>:
 800a0d8:	4a02      	ldr	r2, [pc, #8]	; (800a0e4 <stdio_exit_handler+0xc>)
 800a0da:	4903      	ldr	r1, [pc, #12]	; (800a0e8 <stdio_exit_handler+0x10>)
 800a0dc:	4803      	ldr	r0, [pc, #12]	; (800a0ec <stdio_exit_handler+0x14>)
 800a0de:	f000 b869 	b.w	800a1b4 <_fwalk_sglue>
 800a0e2:	bf00      	nop
 800a0e4:	20000284 	.word	0x20000284
 800a0e8:	0800bc05 	.word	0x0800bc05
 800a0ec:	20000290 	.word	0x20000290

0800a0f0 <cleanup_stdio>:
 800a0f0:	6841      	ldr	r1, [r0, #4]
 800a0f2:	4b0c      	ldr	r3, [pc, #48]	; (800a124 <cleanup_stdio+0x34>)
 800a0f4:	b510      	push	{r4, lr}
 800a0f6:	4299      	cmp	r1, r3
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	d001      	beq.n	800a100 <cleanup_stdio+0x10>
 800a0fc:	f001 fd82 	bl	800bc04 <_fflush_r>
 800a100:	68a1      	ldr	r1, [r4, #8]
 800a102:	4b09      	ldr	r3, [pc, #36]	; (800a128 <cleanup_stdio+0x38>)
 800a104:	4299      	cmp	r1, r3
 800a106:	d002      	beq.n	800a10e <cleanup_stdio+0x1e>
 800a108:	4620      	mov	r0, r4
 800a10a:	f001 fd7b 	bl	800bc04 <_fflush_r>
 800a10e:	68e1      	ldr	r1, [r4, #12]
 800a110:	4b06      	ldr	r3, [pc, #24]	; (800a12c <cleanup_stdio+0x3c>)
 800a112:	4299      	cmp	r1, r3
 800a114:	d004      	beq.n	800a120 <cleanup_stdio+0x30>
 800a116:	4620      	mov	r0, r4
 800a118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a11c:	f001 bd72 	b.w	800bc04 <_fflush_r>
 800a120:	bd10      	pop	{r4, pc}
 800a122:	bf00      	nop
 800a124:	200016f4 	.word	0x200016f4
 800a128:	2000175c 	.word	0x2000175c
 800a12c:	200017c4 	.word	0x200017c4

0800a130 <global_stdio_init.part.0>:
 800a130:	b510      	push	{r4, lr}
 800a132:	4b0b      	ldr	r3, [pc, #44]	; (800a160 <global_stdio_init.part.0+0x30>)
 800a134:	4c0b      	ldr	r4, [pc, #44]	; (800a164 <global_stdio_init.part.0+0x34>)
 800a136:	4a0c      	ldr	r2, [pc, #48]	; (800a168 <global_stdio_init.part.0+0x38>)
 800a138:	4620      	mov	r0, r4
 800a13a:	601a      	str	r2, [r3, #0]
 800a13c:	2104      	movs	r1, #4
 800a13e:	2200      	movs	r2, #0
 800a140:	f7ff ffa6 	bl	800a090 <std>
 800a144:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a148:	2201      	movs	r2, #1
 800a14a:	2109      	movs	r1, #9
 800a14c:	f7ff ffa0 	bl	800a090 <std>
 800a150:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a154:	2202      	movs	r2, #2
 800a156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a15a:	2112      	movs	r1, #18
 800a15c:	f7ff bf98 	b.w	800a090 <std>
 800a160:	2000182c 	.word	0x2000182c
 800a164:	200016f4 	.word	0x200016f4
 800a168:	0800a0d9 	.word	0x0800a0d9

0800a16c <__sfp_lock_acquire>:
 800a16c:	4801      	ldr	r0, [pc, #4]	; (800a174 <__sfp_lock_acquire+0x8>)
 800a16e:	f000 b92f 	b.w	800a3d0 <__retarget_lock_acquire_recursive>
 800a172:	bf00      	nop
 800a174:	20001835 	.word	0x20001835

0800a178 <__sfp_lock_release>:
 800a178:	4801      	ldr	r0, [pc, #4]	; (800a180 <__sfp_lock_release+0x8>)
 800a17a:	f000 b92a 	b.w	800a3d2 <__retarget_lock_release_recursive>
 800a17e:	bf00      	nop
 800a180:	20001835 	.word	0x20001835

0800a184 <__sinit>:
 800a184:	b510      	push	{r4, lr}
 800a186:	4604      	mov	r4, r0
 800a188:	f7ff fff0 	bl	800a16c <__sfp_lock_acquire>
 800a18c:	6a23      	ldr	r3, [r4, #32]
 800a18e:	b11b      	cbz	r3, 800a198 <__sinit+0x14>
 800a190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a194:	f7ff bff0 	b.w	800a178 <__sfp_lock_release>
 800a198:	4b04      	ldr	r3, [pc, #16]	; (800a1ac <__sinit+0x28>)
 800a19a:	6223      	str	r3, [r4, #32]
 800a19c:	4b04      	ldr	r3, [pc, #16]	; (800a1b0 <__sinit+0x2c>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d1f5      	bne.n	800a190 <__sinit+0xc>
 800a1a4:	f7ff ffc4 	bl	800a130 <global_stdio_init.part.0>
 800a1a8:	e7f2      	b.n	800a190 <__sinit+0xc>
 800a1aa:	bf00      	nop
 800a1ac:	0800a0f1 	.word	0x0800a0f1
 800a1b0:	2000182c 	.word	0x2000182c

0800a1b4 <_fwalk_sglue>:
 800a1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1b8:	4607      	mov	r7, r0
 800a1ba:	4688      	mov	r8, r1
 800a1bc:	4614      	mov	r4, r2
 800a1be:	2600      	movs	r6, #0
 800a1c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a1c4:	f1b9 0901 	subs.w	r9, r9, #1
 800a1c8:	d505      	bpl.n	800a1d6 <_fwalk_sglue+0x22>
 800a1ca:	6824      	ldr	r4, [r4, #0]
 800a1cc:	2c00      	cmp	r4, #0
 800a1ce:	d1f7      	bne.n	800a1c0 <_fwalk_sglue+0xc>
 800a1d0:	4630      	mov	r0, r6
 800a1d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1d6:	89ab      	ldrh	r3, [r5, #12]
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d907      	bls.n	800a1ec <_fwalk_sglue+0x38>
 800a1dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	d003      	beq.n	800a1ec <_fwalk_sglue+0x38>
 800a1e4:	4629      	mov	r1, r5
 800a1e6:	4638      	mov	r0, r7
 800a1e8:	47c0      	blx	r8
 800a1ea:	4306      	orrs	r6, r0
 800a1ec:	3568      	adds	r5, #104	; 0x68
 800a1ee:	e7e9      	b.n	800a1c4 <_fwalk_sglue+0x10>

0800a1f0 <siprintf>:
 800a1f0:	b40e      	push	{r1, r2, r3}
 800a1f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a1f6:	b500      	push	{lr}
 800a1f8:	b09c      	sub	sp, #112	; 0x70
 800a1fa:	ab1d      	add	r3, sp, #116	; 0x74
 800a1fc:	9002      	str	r0, [sp, #8]
 800a1fe:	9006      	str	r0, [sp, #24]
 800a200:	9107      	str	r1, [sp, #28]
 800a202:	9104      	str	r1, [sp, #16]
 800a204:	4808      	ldr	r0, [pc, #32]	; (800a228 <siprintf+0x38>)
 800a206:	4909      	ldr	r1, [pc, #36]	; (800a22c <siprintf+0x3c>)
 800a208:	f853 2b04 	ldr.w	r2, [r3], #4
 800a20c:	9105      	str	r1, [sp, #20]
 800a20e:	6800      	ldr	r0, [r0, #0]
 800a210:	a902      	add	r1, sp, #8
 800a212:	9301      	str	r3, [sp, #4]
 800a214:	f001 fb76 	bl	800b904 <_svfiprintf_r>
 800a218:	2200      	movs	r2, #0
 800a21a:	9b02      	ldr	r3, [sp, #8]
 800a21c:	701a      	strb	r2, [r3, #0]
 800a21e:	b01c      	add	sp, #112	; 0x70
 800a220:	f85d eb04 	ldr.w	lr, [sp], #4
 800a224:	b003      	add	sp, #12
 800a226:	4770      	bx	lr
 800a228:	200002dc 	.word	0x200002dc
 800a22c:	ffff0208 	.word	0xffff0208

0800a230 <__sread>:
 800a230:	b510      	push	{r4, lr}
 800a232:	460c      	mov	r4, r1
 800a234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a238:	f000 f86c 	bl	800a314 <_read_r>
 800a23c:	2800      	cmp	r0, #0
 800a23e:	bfab      	itete	ge
 800a240:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a242:	89a3      	ldrhlt	r3, [r4, #12]
 800a244:	181b      	addge	r3, r3, r0
 800a246:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a24a:	bfac      	ite	ge
 800a24c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a24e:	81a3      	strhlt	r3, [r4, #12]
 800a250:	bd10      	pop	{r4, pc}

0800a252 <__swrite>:
 800a252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a256:	461f      	mov	r7, r3
 800a258:	898b      	ldrh	r3, [r1, #12]
 800a25a:	4605      	mov	r5, r0
 800a25c:	05db      	lsls	r3, r3, #23
 800a25e:	460c      	mov	r4, r1
 800a260:	4616      	mov	r6, r2
 800a262:	d505      	bpl.n	800a270 <__swrite+0x1e>
 800a264:	2302      	movs	r3, #2
 800a266:	2200      	movs	r2, #0
 800a268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a26c:	f000 f840 	bl	800a2f0 <_lseek_r>
 800a270:	89a3      	ldrh	r3, [r4, #12]
 800a272:	4632      	mov	r2, r6
 800a274:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a278:	81a3      	strh	r3, [r4, #12]
 800a27a:	4628      	mov	r0, r5
 800a27c:	463b      	mov	r3, r7
 800a27e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a286:	f000 b867 	b.w	800a358 <_write_r>

0800a28a <__sseek>:
 800a28a:	b510      	push	{r4, lr}
 800a28c:	460c      	mov	r4, r1
 800a28e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a292:	f000 f82d 	bl	800a2f0 <_lseek_r>
 800a296:	1c43      	adds	r3, r0, #1
 800a298:	89a3      	ldrh	r3, [r4, #12]
 800a29a:	bf15      	itete	ne
 800a29c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a29e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a2a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a2a6:	81a3      	strheq	r3, [r4, #12]
 800a2a8:	bf18      	it	ne
 800a2aa:	81a3      	strhne	r3, [r4, #12]
 800a2ac:	bd10      	pop	{r4, pc}

0800a2ae <__sclose>:
 800a2ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2b2:	f000 b80d 	b.w	800a2d0 <_close_r>

0800a2b6 <memset>:
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	4402      	add	r2, r0
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d100      	bne.n	800a2c0 <memset+0xa>
 800a2be:	4770      	bx	lr
 800a2c0:	f803 1b01 	strb.w	r1, [r3], #1
 800a2c4:	e7f9      	b.n	800a2ba <memset+0x4>
	...

0800a2c8 <_localeconv_r>:
 800a2c8:	4800      	ldr	r0, [pc, #0]	; (800a2cc <_localeconv_r+0x4>)
 800a2ca:	4770      	bx	lr
 800a2cc:	200003d0 	.word	0x200003d0

0800a2d0 <_close_r>:
 800a2d0:	b538      	push	{r3, r4, r5, lr}
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	4d05      	ldr	r5, [pc, #20]	; (800a2ec <_close_r+0x1c>)
 800a2d6:	4604      	mov	r4, r0
 800a2d8:	4608      	mov	r0, r1
 800a2da:	602b      	str	r3, [r5, #0]
 800a2dc:	f7f6 fe67 	bl	8000fae <_close>
 800a2e0:	1c43      	adds	r3, r0, #1
 800a2e2:	d102      	bne.n	800a2ea <_close_r+0x1a>
 800a2e4:	682b      	ldr	r3, [r5, #0]
 800a2e6:	b103      	cbz	r3, 800a2ea <_close_r+0x1a>
 800a2e8:	6023      	str	r3, [r4, #0]
 800a2ea:	bd38      	pop	{r3, r4, r5, pc}
 800a2ec:	20001830 	.word	0x20001830

0800a2f0 <_lseek_r>:
 800a2f0:	b538      	push	{r3, r4, r5, lr}
 800a2f2:	4604      	mov	r4, r0
 800a2f4:	4608      	mov	r0, r1
 800a2f6:	4611      	mov	r1, r2
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	4d05      	ldr	r5, [pc, #20]	; (800a310 <_lseek_r+0x20>)
 800a2fc:	602a      	str	r2, [r5, #0]
 800a2fe:	461a      	mov	r2, r3
 800a300:	f7f6 fe79 	bl	8000ff6 <_lseek>
 800a304:	1c43      	adds	r3, r0, #1
 800a306:	d102      	bne.n	800a30e <_lseek_r+0x1e>
 800a308:	682b      	ldr	r3, [r5, #0]
 800a30a:	b103      	cbz	r3, 800a30e <_lseek_r+0x1e>
 800a30c:	6023      	str	r3, [r4, #0]
 800a30e:	bd38      	pop	{r3, r4, r5, pc}
 800a310:	20001830 	.word	0x20001830

0800a314 <_read_r>:
 800a314:	b538      	push	{r3, r4, r5, lr}
 800a316:	4604      	mov	r4, r0
 800a318:	4608      	mov	r0, r1
 800a31a:	4611      	mov	r1, r2
 800a31c:	2200      	movs	r2, #0
 800a31e:	4d05      	ldr	r5, [pc, #20]	; (800a334 <_read_r+0x20>)
 800a320:	602a      	str	r2, [r5, #0]
 800a322:	461a      	mov	r2, r3
 800a324:	f7f6 fe0a 	bl	8000f3c <_read>
 800a328:	1c43      	adds	r3, r0, #1
 800a32a:	d102      	bne.n	800a332 <_read_r+0x1e>
 800a32c:	682b      	ldr	r3, [r5, #0]
 800a32e:	b103      	cbz	r3, 800a332 <_read_r+0x1e>
 800a330:	6023      	str	r3, [r4, #0]
 800a332:	bd38      	pop	{r3, r4, r5, pc}
 800a334:	20001830 	.word	0x20001830

0800a338 <_sbrk_r>:
 800a338:	b538      	push	{r3, r4, r5, lr}
 800a33a:	2300      	movs	r3, #0
 800a33c:	4d05      	ldr	r5, [pc, #20]	; (800a354 <_sbrk_r+0x1c>)
 800a33e:	4604      	mov	r4, r0
 800a340:	4608      	mov	r0, r1
 800a342:	602b      	str	r3, [r5, #0]
 800a344:	f7f6 fe64 	bl	8001010 <_sbrk>
 800a348:	1c43      	adds	r3, r0, #1
 800a34a:	d102      	bne.n	800a352 <_sbrk_r+0x1a>
 800a34c:	682b      	ldr	r3, [r5, #0]
 800a34e:	b103      	cbz	r3, 800a352 <_sbrk_r+0x1a>
 800a350:	6023      	str	r3, [r4, #0]
 800a352:	bd38      	pop	{r3, r4, r5, pc}
 800a354:	20001830 	.word	0x20001830

0800a358 <_write_r>:
 800a358:	b538      	push	{r3, r4, r5, lr}
 800a35a:	4604      	mov	r4, r0
 800a35c:	4608      	mov	r0, r1
 800a35e:	4611      	mov	r1, r2
 800a360:	2200      	movs	r2, #0
 800a362:	4d05      	ldr	r5, [pc, #20]	; (800a378 <_write_r+0x20>)
 800a364:	602a      	str	r2, [r5, #0]
 800a366:	461a      	mov	r2, r3
 800a368:	f7f6 fe05 	bl	8000f76 <_write>
 800a36c:	1c43      	adds	r3, r0, #1
 800a36e:	d102      	bne.n	800a376 <_write_r+0x1e>
 800a370:	682b      	ldr	r3, [r5, #0]
 800a372:	b103      	cbz	r3, 800a376 <_write_r+0x1e>
 800a374:	6023      	str	r3, [r4, #0]
 800a376:	bd38      	pop	{r3, r4, r5, pc}
 800a378:	20001830 	.word	0x20001830

0800a37c <__errno>:
 800a37c:	4b01      	ldr	r3, [pc, #4]	; (800a384 <__errno+0x8>)
 800a37e:	6818      	ldr	r0, [r3, #0]
 800a380:	4770      	bx	lr
 800a382:	bf00      	nop
 800a384:	200002dc 	.word	0x200002dc

0800a388 <__libc_init_array>:
 800a388:	b570      	push	{r4, r5, r6, lr}
 800a38a:	2600      	movs	r6, #0
 800a38c:	4d0c      	ldr	r5, [pc, #48]	; (800a3c0 <__libc_init_array+0x38>)
 800a38e:	4c0d      	ldr	r4, [pc, #52]	; (800a3c4 <__libc_init_array+0x3c>)
 800a390:	1b64      	subs	r4, r4, r5
 800a392:	10a4      	asrs	r4, r4, #2
 800a394:	42a6      	cmp	r6, r4
 800a396:	d109      	bne.n	800a3ac <__libc_init_array+0x24>
 800a398:	f001 ffc4 	bl	800c324 <_init>
 800a39c:	2600      	movs	r6, #0
 800a39e:	4d0a      	ldr	r5, [pc, #40]	; (800a3c8 <__libc_init_array+0x40>)
 800a3a0:	4c0a      	ldr	r4, [pc, #40]	; (800a3cc <__libc_init_array+0x44>)
 800a3a2:	1b64      	subs	r4, r4, r5
 800a3a4:	10a4      	asrs	r4, r4, #2
 800a3a6:	42a6      	cmp	r6, r4
 800a3a8:	d105      	bne.n	800a3b6 <__libc_init_array+0x2e>
 800a3aa:	bd70      	pop	{r4, r5, r6, pc}
 800a3ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3b0:	4798      	blx	r3
 800a3b2:	3601      	adds	r6, #1
 800a3b4:	e7ee      	b.n	800a394 <__libc_init_array+0xc>
 800a3b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3ba:	4798      	blx	r3
 800a3bc:	3601      	adds	r6, #1
 800a3be:	e7f2      	b.n	800a3a6 <__libc_init_array+0x1e>
 800a3c0:	0800cf3c 	.word	0x0800cf3c
 800a3c4:	0800cf3c 	.word	0x0800cf3c
 800a3c8:	0800cf3c 	.word	0x0800cf3c
 800a3cc:	0800cf40 	.word	0x0800cf40

0800a3d0 <__retarget_lock_acquire_recursive>:
 800a3d0:	4770      	bx	lr

0800a3d2 <__retarget_lock_release_recursive>:
 800a3d2:	4770      	bx	lr

0800a3d4 <memchr>:
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	b510      	push	{r4, lr}
 800a3d8:	b2c9      	uxtb	r1, r1
 800a3da:	4402      	add	r2, r0
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	4618      	mov	r0, r3
 800a3e0:	d101      	bne.n	800a3e6 <memchr+0x12>
 800a3e2:	2000      	movs	r0, #0
 800a3e4:	e003      	b.n	800a3ee <memchr+0x1a>
 800a3e6:	7804      	ldrb	r4, [r0, #0]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	428c      	cmp	r4, r1
 800a3ec:	d1f6      	bne.n	800a3dc <memchr+0x8>
 800a3ee:	bd10      	pop	{r4, pc}

0800a3f0 <quorem>:
 800a3f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f4:	6903      	ldr	r3, [r0, #16]
 800a3f6:	690c      	ldr	r4, [r1, #16]
 800a3f8:	4607      	mov	r7, r0
 800a3fa:	42a3      	cmp	r3, r4
 800a3fc:	db7f      	blt.n	800a4fe <quorem+0x10e>
 800a3fe:	3c01      	subs	r4, #1
 800a400:	f100 0514 	add.w	r5, r0, #20
 800a404:	f101 0814 	add.w	r8, r1, #20
 800a408:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a40c:	9301      	str	r3, [sp, #4]
 800a40e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a412:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a416:	3301      	adds	r3, #1
 800a418:	429a      	cmp	r2, r3
 800a41a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a41e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a422:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a426:	d331      	bcc.n	800a48c <quorem+0x9c>
 800a428:	f04f 0e00 	mov.w	lr, #0
 800a42c:	4640      	mov	r0, r8
 800a42e:	46ac      	mov	ip, r5
 800a430:	46f2      	mov	sl, lr
 800a432:	f850 2b04 	ldr.w	r2, [r0], #4
 800a436:	b293      	uxth	r3, r2
 800a438:	fb06 e303 	mla	r3, r6, r3, lr
 800a43c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a440:	0c1a      	lsrs	r2, r3, #16
 800a442:	b29b      	uxth	r3, r3
 800a444:	fb06 220e 	mla	r2, r6, lr, r2
 800a448:	ebaa 0303 	sub.w	r3, sl, r3
 800a44c:	f8dc a000 	ldr.w	sl, [ip]
 800a450:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a454:	fa1f fa8a 	uxth.w	sl, sl
 800a458:	4453      	add	r3, sl
 800a45a:	f8dc a000 	ldr.w	sl, [ip]
 800a45e:	b292      	uxth	r2, r2
 800a460:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a464:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a468:	b29b      	uxth	r3, r3
 800a46a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a46e:	4581      	cmp	r9, r0
 800a470:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a474:	f84c 3b04 	str.w	r3, [ip], #4
 800a478:	d2db      	bcs.n	800a432 <quorem+0x42>
 800a47a:	f855 300b 	ldr.w	r3, [r5, fp]
 800a47e:	b92b      	cbnz	r3, 800a48c <quorem+0x9c>
 800a480:	9b01      	ldr	r3, [sp, #4]
 800a482:	3b04      	subs	r3, #4
 800a484:	429d      	cmp	r5, r3
 800a486:	461a      	mov	r2, r3
 800a488:	d32d      	bcc.n	800a4e6 <quorem+0xf6>
 800a48a:	613c      	str	r4, [r7, #16]
 800a48c:	4638      	mov	r0, r7
 800a48e:	f001 f8e1 	bl	800b654 <__mcmp>
 800a492:	2800      	cmp	r0, #0
 800a494:	db23      	blt.n	800a4de <quorem+0xee>
 800a496:	4629      	mov	r1, r5
 800a498:	2000      	movs	r0, #0
 800a49a:	3601      	adds	r6, #1
 800a49c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a4a0:	f8d1 c000 	ldr.w	ip, [r1]
 800a4a4:	b293      	uxth	r3, r2
 800a4a6:	1ac3      	subs	r3, r0, r3
 800a4a8:	0c12      	lsrs	r2, r2, #16
 800a4aa:	fa1f f08c 	uxth.w	r0, ip
 800a4ae:	4403      	add	r3, r0
 800a4b0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a4b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4be:	45c1      	cmp	r9, r8
 800a4c0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a4c4:	f841 3b04 	str.w	r3, [r1], #4
 800a4c8:	d2e8      	bcs.n	800a49c <quorem+0xac>
 800a4ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4d2:	b922      	cbnz	r2, 800a4de <quorem+0xee>
 800a4d4:	3b04      	subs	r3, #4
 800a4d6:	429d      	cmp	r5, r3
 800a4d8:	461a      	mov	r2, r3
 800a4da:	d30a      	bcc.n	800a4f2 <quorem+0x102>
 800a4dc:	613c      	str	r4, [r7, #16]
 800a4de:	4630      	mov	r0, r6
 800a4e0:	b003      	add	sp, #12
 800a4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4e6:	6812      	ldr	r2, [r2, #0]
 800a4e8:	3b04      	subs	r3, #4
 800a4ea:	2a00      	cmp	r2, #0
 800a4ec:	d1cd      	bne.n	800a48a <quorem+0x9a>
 800a4ee:	3c01      	subs	r4, #1
 800a4f0:	e7c8      	b.n	800a484 <quorem+0x94>
 800a4f2:	6812      	ldr	r2, [r2, #0]
 800a4f4:	3b04      	subs	r3, #4
 800a4f6:	2a00      	cmp	r2, #0
 800a4f8:	d1f0      	bne.n	800a4dc <quorem+0xec>
 800a4fa:	3c01      	subs	r4, #1
 800a4fc:	e7eb      	b.n	800a4d6 <quorem+0xe6>
 800a4fe:	2000      	movs	r0, #0
 800a500:	e7ee      	b.n	800a4e0 <quorem+0xf0>
 800a502:	0000      	movs	r0, r0
 800a504:	0000      	movs	r0, r0
	...

0800a508 <_dtoa_r>:
 800a508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a50c:	4616      	mov	r6, r2
 800a50e:	461f      	mov	r7, r3
 800a510:	69c4      	ldr	r4, [r0, #28]
 800a512:	b099      	sub	sp, #100	; 0x64
 800a514:	4605      	mov	r5, r0
 800a516:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a51a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a51e:	b974      	cbnz	r4, 800a53e <_dtoa_r+0x36>
 800a520:	2010      	movs	r0, #16
 800a522:	f7ff f89b 	bl	800965c <malloc>
 800a526:	4602      	mov	r2, r0
 800a528:	61e8      	str	r0, [r5, #28]
 800a52a:	b920      	cbnz	r0, 800a536 <_dtoa_r+0x2e>
 800a52c:	21ef      	movs	r1, #239	; 0xef
 800a52e:	4bac      	ldr	r3, [pc, #688]	; (800a7e0 <_dtoa_r+0x2d8>)
 800a530:	48ac      	ldr	r0, [pc, #688]	; (800a7e4 <_dtoa_r+0x2dc>)
 800a532:	f001 fbb7 	bl	800bca4 <__assert_func>
 800a536:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a53a:	6004      	str	r4, [r0, #0]
 800a53c:	60c4      	str	r4, [r0, #12]
 800a53e:	69eb      	ldr	r3, [r5, #28]
 800a540:	6819      	ldr	r1, [r3, #0]
 800a542:	b151      	cbz	r1, 800a55a <_dtoa_r+0x52>
 800a544:	685a      	ldr	r2, [r3, #4]
 800a546:	2301      	movs	r3, #1
 800a548:	4093      	lsls	r3, r2
 800a54a:	604a      	str	r2, [r1, #4]
 800a54c:	608b      	str	r3, [r1, #8]
 800a54e:	4628      	mov	r0, r5
 800a550:	f000 fe46 	bl	800b1e0 <_Bfree>
 800a554:	2200      	movs	r2, #0
 800a556:	69eb      	ldr	r3, [r5, #28]
 800a558:	601a      	str	r2, [r3, #0]
 800a55a:	1e3b      	subs	r3, r7, #0
 800a55c:	bfaf      	iteee	ge
 800a55e:	2300      	movge	r3, #0
 800a560:	2201      	movlt	r2, #1
 800a562:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a566:	9305      	strlt	r3, [sp, #20]
 800a568:	bfa8      	it	ge
 800a56a:	f8c8 3000 	strge.w	r3, [r8]
 800a56e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a572:	4b9d      	ldr	r3, [pc, #628]	; (800a7e8 <_dtoa_r+0x2e0>)
 800a574:	bfb8      	it	lt
 800a576:	f8c8 2000 	strlt.w	r2, [r8]
 800a57a:	ea33 0309 	bics.w	r3, r3, r9
 800a57e:	d119      	bne.n	800a5b4 <_dtoa_r+0xac>
 800a580:	f242 730f 	movw	r3, #9999	; 0x270f
 800a584:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a586:	6013      	str	r3, [r2, #0]
 800a588:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a58c:	4333      	orrs	r3, r6
 800a58e:	f000 8589 	beq.w	800b0a4 <_dtoa_r+0xb9c>
 800a592:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a594:	b953      	cbnz	r3, 800a5ac <_dtoa_r+0xa4>
 800a596:	4b95      	ldr	r3, [pc, #596]	; (800a7ec <_dtoa_r+0x2e4>)
 800a598:	e023      	b.n	800a5e2 <_dtoa_r+0xda>
 800a59a:	4b95      	ldr	r3, [pc, #596]	; (800a7f0 <_dtoa_r+0x2e8>)
 800a59c:	9303      	str	r3, [sp, #12]
 800a59e:	3308      	adds	r3, #8
 800a5a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a5a2:	6013      	str	r3, [r2, #0]
 800a5a4:	9803      	ldr	r0, [sp, #12]
 800a5a6:	b019      	add	sp, #100	; 0x64
 800a5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ac:	4b8f      	ldr	r3, [pc, #572]	; (800a7ec <_dtoa_r+0x2e4>)
 800a5ae:	9303      	str	r3, [sp, #12]
 800a5b0:	3303      	adds	r3, #3
 800a5b2:	e7f5      	b.n	800a5a0 <_dtoa_r+0x98>
 800a5b4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a5b8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a5bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	f7f6 f9f0 	bl	80009a8 <__aeabi_dcmpeq>
 800a5c8:	4680      	mov	r8, r0
 800a5ca:	b160      	cbz	r0, 800a5e6 <_dtoa_r+0xde>
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a5d0:	6013      	str	r3, [r2, #0]
 800a5d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	f000 8562 	beq.w	800b09e <_dtoa_r+0xb96>
 800a5da:	4b86      	ldr	r3, [pc, #536]	; (800a7f4 <_dtoa_r+0x2ec>)
 800a5dc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a5de:	6013      	str	r3, [r2, #0]
 800a5e0:	3b01      	subs	r3, #1
 800a5e2:	9303      	str	r3, [sp, #12]
 800a5e4:	e7de      	b.n	800a5a4 <_dtoa_r+0x9c>
 800a5e6:	ab16      	add	r3, sp, #88	; 0x58
 800a5e8:	9301      	str	r3, [sp, #4]
 800a5ea:	ab17      	add	r3, sp, #92	; 0x5c
 800a5ec:	9300      	str	r3, [sp, #0]
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a5f4:	f001 f8d6 	bl	800b7a4 <__d2b>
 800a5f8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a5fc:	4682      	mov	sl, r0
 800a5fe:	2c00      	cmp	r4, #0
 800a600:	d07e      	beq.n	800a700 <_dtoa_r+0x1f8>
 800a602:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a606:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a608:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a60c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a610:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a614:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a618:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a61c:	4619      	mov	r1, r3
 800a61e:	2200      	movs	r2, #0
 800a620:	4b75      	ldr	r3, [pc, #468]	; (800a7f8 <_dtoa_r+0x2f0>)
 800a622:	f7f5 fda1 	bl	8000168 <__aeabi_dsub>
 800a626:	a368      	add	r3, pc, #416	; (adr r3, 800a7c8 <_dtoa_r+0x2c0>)
 800a628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62c:	f7f5 ff54 	bl	80004d8 <__aeabi_dmul>
 800a630:	a367      	add	r3, pc, #412	; (adr r3, 800a7d0 <_dtoa_r+0x2c8>)
 800a632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a636:	f7f5 fd99 	bl	800016c <__adddf3>
 800a63a:	4606      	mov	r6, r0
 800a63c:	4620      	mov	r0, r4
 800a63e:	460f      	mov	r7, r1
 800a640:	f7f5 fee0 	bl	8000404 <__aeabi_i2d>
 800a644:	a364      	add	r3, pc, #400	; (adr r3, 800a7d8 <_dtoa_r+0x2d0>)
 800a646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a64a:	f7f5 ff45 	bl	80004d8 <__aeabi_dmul>
 800a64e:	4602      	mov	r2, r0
 800a650:	460b      	mov	r3, r1
 800a652:	4630      	mov	r0, r6
 800a654:	4639      	mov	r1, r7
 800a656:	f7f5 fd89 	bl	800016c <__adddf3>
 800a65a:	4606      	mov	r6, r0
 800a65c:	460f      	mov	r7, r1
 800a65e:	f7f6 f9eb 	bl	8000a38 <__aeabi_d2iz>
 800a662:	2200      	movs	r2, #0
 800a664:	4683      	mov	fp, r0
 800a666:	2300      	movs	r3, #0
 800a668:	4630      	mov	r0, r6
 800a66a:	4639      	mov	r1, r7
 800a66c:	f7f6 f9a6 	bl	80009bc <__aeabi_dcmplt>
 800a670:	b148      	cbz	r0, 800a686 <_dtoa_r+0x17e>
 800a672:	4658      	mov	r0, fp
 800a674:	f7f5 fec6 	bl	8000404 <__aeabi_i2d>
 800a678:	4632      	mov	r2, r6
 800a67a:	463b      	mov	r3, r7
 800a67c:	f7f6 f994 	bl	80009a8 <__aeabi_dcmpeq>
 800a680:	b908      	cbnz	r0, 800a686 <_dtoa_r+0x17e>
 800a682:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a686:	f1bb 0f16 	cmp.w	fp, #22
 800a68a:	d857      	bhi.n	800a73c <_dtoa_r+0x234>
 800a68c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a690:	4b5a      	ldr	r3, [pc, #360]	; (800a7fc <_dtoa_r+0x2f4>)
 800a692:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69a:	f7f6 f98f 	bl	80009bc <__aeabi_dcmplt>
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	d04e      	beq.n	800a740 <_dtoa_r+0x238>
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a6a8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a6ac:	1b1b      	subs	r3, r3, r4
 800a6ae:	1e5a      	subs	r2, r3, #1
 800a6b0:	bf46      	itte	mi
 800a6b2:	f1c3 0901 	rsbmi	r9, r3, #1
 800a6b6:	2300      	movmi	r3, #0
 800a6b8:	f04f 0900 	movpl.w	r9, #0
 800a6bc:	9209      	str	r2, [sp, #36]	; 0x24
 800a6be:	bf48      	it	mi
 800a6c0:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a6c2:	f1bb 0f00 	cmp.w	fp, #0
 800a6c6:	db3d      	blt.n	800a744 <_dtoa_r+0x23c>
 800a6c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6ca:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800a6ce:	445b      	add	r3, fp
 800a6d0:	9309      	str	r3, [sp, #36]	; 0x24
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	930a      	str	r3, [sp, #40]	; 0x28
 800a6d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a6d8:	2b09      	cmp	r3, #9
 800a6da:	d867      	bhi.n	800a7ac <_dtoa_r+0x2a4>
 800a6dc:	2b05      	cmp	r3, #5
 800a6de:	bfc4      	itt	gt
 800a6e0:	3b04      	subgt	r3, #4
 800a6e2:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a6e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a6e6:	bfc8      	it	gt
 800a6e8:	2400      	movgt	r4, #0
 800a6ea:	f1a3 0302 	sub.w	r3, r3, #2
 800a6ee:	bfd8      	it	le
 800a6f0:	2401      	movle	r4, #1
 800a6f2:	2b03      	cmp	r3, #3
 800a6f4:	f200 8086 	bhi.w	800a804 <_dtoa_r+0x2fc>
 800a6f8:	e8df f003 	tbb	[pc, r3]
 800a6fc:	5637392c 	.word	0x5637392c
 800a700:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a704:	441c      	add	r4, r3
 800a706:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a70a:	2b20      	cmp	r3, #32
 800a70c:	bfc1      	itttt	gt
 800a70e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a712:	fa09 f903 	lslgt.w	r9, r9, r3
 800a716:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800a71a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a71e:	bfd6      	itet	le
 800a720:	f1c3 0320 	rsble	r3, r3, #32
 800a724:	ea49 0003 	orrgt.w	r0, r9, r3
 800a728:	fa06 f003 	lslle.w	r0, r6, r3
 800a72c:	f7f5 fe5a 	bl	80003e4 <__aeabi_ui2d>
 800a730:	2201      	movs	r2, #1
 800a732:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a736:	3c01      	subs	r4, #1
 800a738:	9213      	str	r2, [sp, #76]	; 0x4c
 800a73a:	e76f      	b.n	800a61c <_dtoa_r+0x114>
 800a73c:	2301      	movs	r3, #1
 800a73e:	e7b3      	b.n	800a6a8 <_dtoa_r+0x1a0>
 800a740:	900f      	str	r0, [sp, #60]	; 0x3c
 800a742:	e7b2      	b.n	800a6aa <_dtoa_r+0x1a2>
 800a744:	f1cb 0300 	rsb	r3, fp, #0
 800a748:	930a      	str	r3, [sp, #40]	; 0x28
 800a74a:	2300      	movs	r3, #0
 800a74c:	eba9 090b 	sub.w	r9, r9, fp
 800a750:	930e      	str	r3, [sp, #56]	; 0x38
 800a752:	e7c0      	b.n	800a6d6 <_dtoa_r+0x1ce>
 800a754:	2300      	movs	r3, #0
 800a756:	930b      	str	r3, [sp, #44]	; 0x2c
 800a758:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	dc55      	bgt.n	800a80a <_dtoa_r+0x302>
 800a75e:	2301      	movs	r3, #1
 800a760:	461a      	mov	r2, r3
 800a762:	9306      	str	r3, [sp, #24]
 800a764:	9308      	str	r3, [sp, #32]
 800a766:	9223      	str	r2, [sp, #140]	; 0x8c
 800a768:	e00b      	b.n	800a782 <_dtoa_r+0x27a>
 800a76a:	2301      	movs	r3, #1
 800a76c:	e7f3      	b.n	800a756 <_dtoa_r+0x24e>
 800a76e:	2300      	movs	r3, #0
 800a770:	930b      	str	r3, [sp, #44]	; 0x2c
 800a772:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a774:	445b      	add	r3, fp
 800a776:	9306      	str	r3, [sp, #24]
 800a778:	3301      	adds	r3, #1
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	9308      	str	r3, [sp, #32]
 800a77e:	bfb8      	it	lt
 800a780:	2301      	movlt	r3, #1
 800a782:	2100      	movs	r1, #0
 800a784:	2204      	movs	r2, #4
 800a786:	69e8      	ldr	r0, [r5, #28]
 800a788:	f102 0614 	add.w	r6, r2, #20
 800a78c:	429e      	cmp	r6, r3
 800a78e:	d940      	bls.n	800a812 <_dtoa_r+0x30a>
 800a790:	6041      	str	r1, [r0, #4]
 800a792:	4628      	mov	r0, r5
 800a794:	f000 fce4 	bl	800b160 <_Balloc>
 800a798:	9003      	str	r0, [sp, #12]
 800a79a:	2800      	cmp	r0, #0
 800a79c:	d13c      	bne.n	800a818 <_dtoa_r+0x310>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	f240 11af 	movw	r1, #431	; 0x1af
 800a7a4:	4b16      	ldr	r3, [pc, #88]	; (800a800 <_dtoa_r+0x2f8>)
 800a7a6:	e6c3      	b.n	800a530 <_dtoa_r+0x28>
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e7e1      	b.n	800a770 <_dtoa_r+0x268>
 800a7ac:	2401      	movs	r4, #1
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	940b      	str	r4, [sp, #44]	; 0x2c
 800a7b2:	9322      	str	r3, [sp, #136]	; 0x88
 800a7b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	9306      	str	r3, [sp, #24]
 800a7bc:	9308      	str	r3, [sp, #32]
 800a7be:	2312      	movs	r3, #18
 800a7c0:	e7d1      	b.n	800a766 <_dtoa_r+0x25e>
 800a7c2:	bf00      	nop
 800a7c4:	f3af 8000 	nop.w
 800a7c8:	636f4361 	.word	0x636f4361
 800a7cc:	3fd287a7 	.word	0x3fd287a7
 800a7d0:	8b60c8b3 	.word	0x8b60c8b3
 800a7d4:	3fc68a28 	.word	0x3fc68a28
 800a7d8:	509f79fb 	.word	0x509f79fb
 800a7dc:	3fd34413 	.word	0x3fd34413
 800a7e0:	0800cc0f 	.word	0x0800cc0f
 800a7e4:	0800cc26 	.word	0x0800cc26
 800a7e8:	7ff00000 	.word	0x7ff00000
 800a7ec:	0800cc0b 	.word	0x0800cc0b
 800a7f0:	0800cc02 	.word	0x0800cc02
 800a7f4:	0800cbdf 	.word	0x0800cbdf
 800a7f8:	3ff80000 	.word	0x3ff80000
 800a7fc:	0800cd10 	.word	0x0800cd10
 800a800:	0800cc7e 	.word	0x0800cc7e
 800a804:	2301      	movs	r3, #1
 800a806:	930b      	str	r3, [sp, #44]	; 0x2c
 800a808:	e7d4      	b.n	800a7b4 <_dtoa_r+0x2ac>
 800a80a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a80c:	9306      	str	r3, [sp, #24]
 800a80e:	9308      	str	r3, [sp, #32]
 800a810:	e7b7      	b.n	800a782 <_dtoa_r+0x27a>
 800a812:	3101      	adds	r1, #1
 800a814:	0052      	lsls	r2, r2, #1
 800a816:	e7b7      	b.n	800a788 <_dtoa_r+0x280>
 800a818:	69eb      	ldr	r3, [r5, #28]
 800a81a:	9a03      	ldr	r2, [sp, #12]
 800a81c:	601a      	str	r2, [r3, #0]
 800a81e:	9b08      	ldr	r3, [sp, #32]
 800a820:	2b0e      	cmp	r3, #14
 800a822:	f200 80a8 	bhi.w	800a976 <_dtoa_r+0x46e>
 800a826:	2c00      	cmp	r4, #0
 800a828:	f000 80a5 	beq.w	800a976 <_dtoa_r+0x46e>
 800a82c:	f1bb 0f00 	cmp.w	fp, #0
 800a830:	dd34      	ble.n	800a89c <_dtoa_r+0x394>
 800a832:	4b9a      	ldr	r3, [pc, #616]	; (800aa9c <_dtoa_r+0x594>)
 800a834:	f00b 020f 	and.w	r2, fp, #15
 800a838:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a83c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a840:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a844:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a848:	ea4f 142b 	mov.w	r4, fp, asr #4
 800a84c:	d016      	beq.n	800a87c <_dtoa_r+0x374>
 800a84e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a852:	4b93      	ldr	r3, [pc, #588]	; (800aaa0 <_dtoa_r+0x598>)
 800a854:	2703      	movs	r7, #3
 800a856:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a85a:	f7f5 ff67 	bl	800072c <__aeabi_ddiv>
 800a85e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a862:	f004 040f 	and.w	r4, r4, #15
 800a866:	4e8e      	ldr	r6, [pc, #568]	; (800aaa0 <_dtoa_r+0x598>)
 800a868:	b954      	cbnz	r4, 800a880 <_dtoa_r+0x378>
 800a86a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a86e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a872:	f7f5 ff5b 	bl	800072c <__aeabi_ddiv>
 800a876:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a87a:	e029      	b.n	800a8d0 <_dtoa_r+0x3c8>
 800a87c:	2702      	movs	r7, #2
 800a87e:	e7f2      	b.n	800a866 <_dtoa_r+0x35e>
 800a880:	07e1      	lsls	r1, r4, #31
 800a882:	d508      	bpl.n	800a896 <_dtoa_r+0x38e>
 800a884:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a888:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a88c:	f7f5 fe24 	bl	80004d8 <__aeabi_dmul>
 800a890:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a894:	3701      	adds	r7, #1
 800a896:	1064      	asrs	r4, r4, #1
 800a898:	3608      	adds	r6, #8
 800a89a:	e7e5      	b.n	800a868 <_dtoa_r+0x360>
 800a89c:	f000 80a5 	beq.w	800a9ea <_dtoa_r+0x4e2>
 800a8a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a8a4:	f1cb 0400 	rsb	r4, fp, #0
 800a8a8:	4b7c      	ldr	r3, [pc, #496]	; (800aa9c <_dtoa_r+0x594>)
 800a8aa:	f004 020f 	and.w	r2, r4, #15
 800a8ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b6:	f7f5 fe0f 	bl	80004d8 <__aeabi_dmul>
 800a8ba:	2702      	movs	r7, #2
 800a8bc:	2300      	movs	r3, #0
 800a8be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8c2:	4e77      	ldr	r6, [pc, #476]	; (800aaa0 <_dtoa_r+0x598>)
 800a8c4:	1124      	asrs	r4, r4, #4
 800a8c6:	2c00      	cmp	r4, #0
 800a8c8:	f040 8084 	bne.w	800a9d4 <_dtoa_r+0x4cc>
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d1d2      	bne.n	800a876 <_dtoa_r+0x36e>
 800a8d0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a8d4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a8d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f000 8087 	beq.w	800a9ee <_dtoa_r+0x4e6>
 800a8e0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	4b6f      	ldr	r3, [pc, #444]	; (800aaa4 <_dtoa_r+0x59c>)
 800a8e8:	f7f6 f868 	bl	80009bc <__aeabi_dcmplt>
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	d07e      	beq.n	800a9ee <_dtoa_r+0x4e6>
 800a8f0:	9b08      	ldr	r3, [sp, #32]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d07b      	beq.n	800a9ee <_dtoa_r+0x4e6>
 800a8f6:	9b06      	ldr	r3, [sp, #24]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	dd38      	ble.n	800a96e <_dtoa_r+0x466>
 800a8fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a900:	2200      	movs	r2, #0
 800a902:	4b69      	ldr	r3, [pc, #420]	; (800aaa8 <_dtoa_r+0x5a0>)
 800a904:	f7f5 fde8 	bl	80004d8 <__aeabi_dmul>
 800a908:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a90c:	9c06      	ldr	r4, [sp, #24]
 800a90e:	f10b 38ff 	add.w	r8, fp, #4294967295
 800a912:	3701      	adds	r7, #1
 800a914:	4638      	mov	r0, r7
 800a916:	f7f5 fd75 	bl	8000404 <__aeabi_i2d>
 800a91a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a91e:	f7f5 fddb 	bl	80004d8 <__aeabi_dmul>
 800a922:	2200      	movs	r2, #0
 800a924:	4b61      	ldr	r3, [pc, #388]	; (800aaac <_dtoa_r+0x5a4>)
 800a926:	f7f5 fc21 	bl	800016c <__adddf3>
 800a92a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a92e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a932:	9611      	str	r6, [sp, #68]	; 0x44
 800a934:	2c00      	cmp	r4, #0
 800a936:	d15d      	bne.n	800a9f4 <_dtoa_r+0x4ec>
 800a938:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a93c:	2200      	movs	r2, #0
 800a93e:	4b5c      	ldr	r3, [pc, #368]	; (800aab0 <_dtoa_r+0x5a8>)
 800a940:	f7f5 fc12 	bl	8000168 <__aeabi_dsub>
 800a944:	4602      	mov	r2, r0
 800a946:	460b      	mov	r3, r1
 800a948:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a94c:	4633      	mov	r3, r6
 800a94e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a950:	f7f6 f852 	bl	80009f8 <__aeabi_dcmpgt>
 800a954:	2800      	cmp	r0, #0
 800a956:	f040 8295 	bne.w	800ae84 <_dtoa_r+0x97c>
 800a95a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a95e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a960:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a964:	f7f6 f82a 	bl	80009bc <__aeabi_dcmplt>
 800a968:	2800      	cmp	r0, #0
 800a96a:	f040 8289 	bne.w	800ae80 <_dtoa_r+0x978>
 800a96e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a972:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a976:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a978:	2b00      	cmp	r3, #0
 800a97a:	f2c0 8151 	blt.w	800ac20 <_dtoa_r+0x718>
 800a97e:	f1bb 0f0e 	cmp.w	fp, #14
 800a982:	f300 814d 	bgt.w	800ac20 <_dtoa_r+0x718>
 800a986:	4b45      	ldr	r3, [pc, #276]	; (800aa9c <_dtoa_r+0x594>)
 800a988:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a98c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a990:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a994:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a996:	2b00      	cmp	r3, #0
 800a998:	f280 80da 	bge.w	800ab50 <_dtoa_r+0x648>
 800a99c:	9b08      	ldr	r3, [sp, #32]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	f300 80d6 	bgt.w	800ab50 <_dtoa_r+0x648>
 800a9a4:	f040 826b 	bne.w	800ae7e <_dtoa_r+0x976>
 800a9a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	4b40      	ldr	r3, [pc, #256]	; (800aab0 <_dtoa_r+0x5a8>)
 800a9b0:	f7f5 fd92 	bl	80004d8 <__aeabi_dmul>
 800a9b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9b8:	f7f6 f814 	bl	80009e4 <__aeabi_dcmpge>
 800a9bc:	9c08      	ldr	r4, [sp, #32]
 800a9be:	4626      	mov	r6, r4
 800a9c0:	2800      	cmp	r0, #0
 800a9c2:	f040 8241 	bne.w	800ae48 <_dtoa_r+0x940>
 800a9c6:	2331      	movs	r3, #49	; 0x31
 800a9c8:	9f03      	ldr	r7, [sp, #12]
 800a9ca:	f10b 0b01 	add.w	fp, fp, #1
 800a9ce:	f807 3b01 	strb.w	r3, [r7], #1
 800a9d2:	e23d      	b.n	800ae50 <_dtoa_r+0x948>
 800a9d4:	07e2      	lsls	r2, r4, #31
 800a9d6:	d505      	bpl.n	800a9e4 <_dtoa_r+0x4dc>
 800a9d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a9dc:	f7f5 fd7c 	bl	80004d8 <__aeabi_dmul>
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	3701      	adds	r7, #1
 800a9e4:	1064      	asrs	r4, r4, #1
 800a9e6:	3608      	adds	r6, #8
 800a9e8:	e76d      	b.n	800a8c6 <_dtoa_r+0x3be>
 800a9ea:	2702      	movs	r7, #2
 800a9ec:	e770      	b.n	800a8d0 <_dtoa_r+0x3c8>
 800a9ee:	46d8      	mov	r8, fp
 800a9f0:	9c08      	ldr	r4, [sp, #32]
 800a9f2:	e78f      	b.n	800a914 <_dtoa_r+0x40c>
 800a9f4:	9903      	ldr	r1, [sp, #12]
 800a9f6:	4b29      	ldr	r3, [pc, #164]	; (800aa9c <_dtoa_r+0x594>)
 800a9f8:	4421      	add	r1, r4
 800a9fa:	9112      	str	r1, [sp, #72]	; 0x48
 800a9fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a9fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aa02:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800aa06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa0a:	2900      	cmp	r1, #0
 800aa0c:	d054      	beq.n	800aab8 <_dtoa_r+0x5b0>
 800aa0e:	2000      	movs	r0, #0
 800aa10:	4928      	ldr	r1, [pc, #160]	; (800aab4 <_dtoa_r+0x5ac>)
 800aa12:	f7f5 fe8b 	bl	800072c <__aeabi_ddiv>
 800aa16:	463b      	mov	r3, r7
 800aa18:	4632      	mov	r2, r6
 800aa1a:	f7f5 fba5 	bl	8000168 <__aeabi_dsub>
 800aa1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aa22:	9f03      	ldr	r7, [sp, #12]
 800aa24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa28:	f7f6 f806 	bl	8000a38 <__aeabi_d2iz>
 800aa2c:	4604      	mov	r4, r0
 800aa2e:	f7f5 fce9 	bl	8000404 <__aeabi_i2d>
 800aa32:	4602      	mov	r2, r0
 800aa34:	460b      	mov	r3, r1
 800aa36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa3a:	f7f5 fb95 	bl	8000168 <__aeabi_dsub>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	460b      	mov	r3, r1
 800aa42:	3430      	adds	r4, #48	; 0x30
 800aa44:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aa48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aa4c:	f807 4b01 	strb.w	r4, [r7], #1
 800aa50:	f7f5 ffb4 	bl	80009bc <__aeabi_dcmplt>
 800aa54:	2800      	cmp	r0, #0
 800aa56:	d173      	bne.n	800ab40 <_dtoa_r+0x638>
 800aa58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa5c:	2000      	movs	r0, #0
 800aa5e:	4911      	ldr	r1, [pc, #68]	; (800aaa4 <_dtoa_r+0x59c>)
 800aa60:	f7f5 fb82 	bl	8000168 <__aeabi_dsub>
 800aa64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aa68:	f7f5 ffa8 	bl	80009bc <__aeabi_dcmplt>
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	f040 80b6 	bne.w	800abde <_dtoa_r+0x6d6>
 800aa72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa74:	429f      	cmp	r7, r3
 800aa76:	f43f af7a 	beq.w	800a96e <_dtoa_r+0x466>
 800aa7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aa7e:	2200      	movs	r2, #0
 800aa80:	4b09      	ldr	r3, [pc, #36]	; (800aaa8 <_dtoa_r+0x5a0>)
 800aa82:	f7f5 fd29 	bl	80004d8 <__aeabi_dmul>
 800aa86:	2200      	movs	r2, #0
 800aa88:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aa8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa90:	4b05      	ldr	r3, [pc, #20]	; (800aaa8 <_dtoa_r+0x5a0>)
 800aa92:	f7f5 fd21 	bl	80004d8 <__aeabi_dmul>
 800aa96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa9a:	e7c3      	b.n	800aa24 <_dtoa_r+0x51c>
 800aa9c:	0800cd10 	.word	0x0800cd10
 800aaa0:	0800cce8 	.word	0x0800cce8
 800aaa4:	3ff00000 	.word	0x3ff00000
 800aaa8:	40240000 	.word	0x40240000
 800aaac:	401c0000 	.word	0x401c0000
 800aab0:	40140000 	.word	0x40140000
 800aab4:	3fe00000 	.word	0x3fe00000
 800aab8:	4630      	mov	r0, r6
 800aaba:	4639      	mov	r1, r7
 800aabc:	f7f5 fd0c 	bl	80004d8 <__aeabi_dmul>
 800aac0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aac2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aac6:	9c03      	ldr	r4, [sp, #12]
 800aac8:	9314      	str	r3, [sp, #80]	; 0x50
 800aaca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aace:	f7f5 ffb3 	bl	8000a38 <__aeabi_d2iz>
 800aad2:	9015      	str	r0, [sp, #84]	; 0x54
 800aad4:	f7f5 fc96 	bl	8000404 <__aeabi_i2d>
 800aad8:	4602      	mov	r2, r0
 800aada:	460b      	mov	r3, r1
 800aadc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aae0:	f7f5 fb42 	bl	8000168 <__aeabi_dsub>
 800aae4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aae6:	4606      	mov	r6, r0
 800aae8:	3330      	adds	r3, #48	; 0x30
 800aaea:	f804 3b01 	strb.w	r3, [r4], #1
 800aaee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aaf0:	460f      	mov	r7, r1
 800aaf2:	429c      	cmp	r4, r3
 800aaf4:	f04f 0200 	mov.w	r2, #0
 800aaf8:	d124      	bne.n	800ab44 <_dtoa_r+0x63c>
 800aafa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aafe:	4baf      	ldr	r3, [pc, #700]	; (800adbc <_dtoa_r+0x8b4>)
 800ab00:	f7f5 fb34 	bl	800016c <__adddf3>
 800ab04:	4602      	mov	r2, r0
 800ab06:	460b      	mov	r3, r1
 800ab08:	4630      	mov	r0, r6
 800ab0a:	4639      	mov	r1, r7
 800ab0c:	f7f5 ff74 	bl	80009f8 <__aeabi_dcmpgt>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	d163      	bne.n	800abdc <_dtoa_r+0x6d4>
 800ab14:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ab18:	2000      	movs	r0, #0
 800ab1a:	49a8      	ldr	r1, [pc, #672]	; (800adbc <_dtoa_r+0x8b4>)
 800ab1c:	f7f5 fb24 	bl	8000168 <__aeabi_dsub>
 800ab20:	4602      	mov	r2, r0
 800ab22:	460b      	mov	r3, r1
 800ab24:	4630      	mov	r0, r6
 800ab26:	4639      	mov	r1, r7
 800ab28:	f7f5 ff48 	bl	80009bc <__aeabi_dcmplt>
 800ab2c:	2800      	cmp	r0, #0
 800ab2e:	f43f af1e 	beq.w	800a96e <_dtoa_r+0x466>
 800ab32:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ab34:	1e7b      	subs	r3, r7, #1
 800ab36:	9314      	str	r3, [sp, #80]	; 0x50
 800ab38:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800ab3c:	2b30      	cmp	r3, #48	; 0x30
 800ab3e:	d0f8      	beq.n	800ab32 <_dtoa_r+0x62a>
 800ab40:	46c3      	mov	fp, r8
 800ab42:	e03b      	b.n	800abbc <_dtoa_r+0x6b4>
 800ab44:	4b9e      	ldr	r3, [pc, #632]	; (800adc0 <_dtoa_r+0x8b8>)
 800ab46:	f7f5 fcc7 	bl	80004d8 <__aeabi_dmul>
 800ab4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab4e:	e7bc      	b.n	800aaca <_dtoa_r+0x5c2>
 800ab50:	9f03      	ldr	r7, [sp, #12]
 800ab52:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ab56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab5a:	4640      	mov	r0, r8
 800ab5c:	4649      	mov	r1, r9
 800ab5e:	f7f5 fde5 	bl	800072c <__aeabi_ddiv>
 800ab62:	f7f5 ff69 	bl	8000a38 <__aeabi_d2iz>
 800ab66:	4604      	mov	r4, r0
 800ab68:	f7f5 fc4c 	bl	8000404 <__aeabi_i2d>
 800ab6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab70:	f7f5 fcb2 	bl	80004d8 <__aeabi_dmul>
 800ab74:	4602      	mov	r2, r0
 800ab76:	460b      	mov	r3, r1
 800ab78:	4640      	mov	r0, r8
 800ab7a:	4649      	mov	r1, r9
 800ab7c:	f7f5 faf4 	bl	8000168 <__aeabi_dsub>
 800ab80:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800ab84:	f807 6b01 	strb.w	r6, [r7], #1
 800ab88:	9e03      	ldr	r6, [sp, #12]
 800ab8a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800ab8e:	1bbe      	subs	r6, r7, r6
 800ab90:	45b4      	cmp	ip, r6
 800ab92:	4602      	mov	r2, r0
 800ab94:	460b      	mov	r3, r1
 800ab96:	d136      	bne.n	800ac06 <_dtoa_r+0x6fe>
 800ab98:	f7f5 fae8 	bl	800016c <__adddf3>
 800ab9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aba0:	4680      	mov	r8, r0
 800aba2:	4689      	mov	r9, r1
 800aba4:	f7f5 ff28 	bl	80009f8 <__aeabi_dcmpgt>
 800aba8:	bb58      	cbnz	r0, 800ac02 <_dtoa_r+0x6fa>
 800abaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800abae:	4640      	mov	r0, r8
 800abb0:	4649      	mov	r1, r9
 800abb2:	f7f5 fef9 	bl	80009a8 <__aeabi_dcmpeq>
 800abb6:	b108      	cbz	r0, 800abbc <_dtoa_r+0x6b4>
 800abb8:	07e3      	lsls	r3, r4, #31
 800abba:	d422      	bmi.n	800ac02 <_dtoa_r+0x6fa>
 800abbc:	4651      	mov	r1, sl
 800abbe:	4628      	mov	r0, r5
 800abc0:	f000 fb0e 	bl	800b1e0 <_Bfree>
 800abc4:	2300      	movs	r3, #0
 800abc6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800abc8:	703b      	strb	r3, [r7, #0]
 800abca:	f10b 0301 	add.w	r3, fp, #1
 800abce:	6013      	str	r3, [r2, #0]
 800abd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	f43f ace6 	beq.w	800a5a4 <_dtoa_r+0x9c>
 800abd8:	601f      	str	r7, [r3, #0]
 800abda:	e4e3      	b.n	800a5a4 <_dtoa_r+0x9c>
 800abdc:	4627      	mov	r7, r4
 800abde:	463b      	mov	r3, r7
 800abe0:	461f      	mov	r7, r3
 800abe2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800abe6:	2a39      	cmp	r2, #57	; 0x39
 800abe8:	d107      	bne.n	800abfa <_dtoa_r+0x6f2>
 800abea:	9a03      	ldr	r2, [sp, #12]
 800abec:	429a      	cmp	r2, r3
 800abee:	d1f7      	bne.n	800abe0 <_dtoa_r+0x6d8>
 800abf0:	2230      	movs	r2, #48	; 0x30
 800abf2:	9903      	ldr	r1, [sp, #12]
 800abf4:	f108 0801 	add.w	r8, r8, #1
 800abf8:	700a      	strb	r2, [r1, #0]
 800abfa:	781a      	ldrb	r2, [r3, #0]
 800abfc:	3201      	adds	r2, #1
 800abfe:	701a      	strb	r2, [r3, #0]
 800ac00:	e79e      	b.n	800ab40 <_dtoa_r+0x638>
 800ac02:	46d8      	mov	r8, fp
 800ac04:	e7eb      	b.n	800abde <_dtoa_r+0x6d6>
 800ac06:	2200      	movs	r2, #0
 800ac08:	4b6d      	ldr	r3, [pc, #436]	; (800adc0 <_dtoa_r+0x8b8>)
 800ac0a:	f7f5 fc65 	bl	80004d8 <__aeabi_dmul>
 800ac0e:	2200      	movs	r2, #0
 800ac10:	2300      	movs	r3, #0
 800ac12:	4680      	mov	r8, r0
 800ac14:	4689      	mov	r9, r1
 800ac16:	f7f5 fec7 	bl	80009a8 <__aeabi_dcmpeq>
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	d09b      	beq.n	800ab56 <_dtoa_r+0x64e>
 800ac1e:	e7cd      	b.n	800abbc <_dtoa_r+0x6b4>
 800ac20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac22:	2a00      	cmp	r2, #0
 800ac24:	f000 80c4 	beq.w	800adb0 <_dtoa_r+0x8a8>
 800ac28:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ac2a:	2a01      	cmp	r2, #1
 800ac2c:	f300 80a8 	bgt.w	800ad80 <_dtoa_r+0x878>
 800ac30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ac32:	2a00      	cmp	r2, #0
 800ac34:	f000 80a0 	beq.w	800ad78 <_dtoa_r+0x870>
 800ac38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ac3c:	464f      	mov	r7, r9
 800ac3e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ac40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac42:	2101      	movs	r1, #1
 800ac44:	441a      	add	r2, r3
 800ac46:	4628      	mov	r0, r5
 800ac48:	4499      	add	r9, r3
 800ac4a:	9209      	str	r2, [sp, #36]	; 0x24
 800ac4c:	f000 fb7e 	bl	800b34c <__i2b>
 800ac50:	4606      	mov	r6, r0
 800ac52:	b15f      	cbz	r7, 800ac6c <_dtoa_r+0x764>
 800ac54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	dd08      	ble.n	800ac6c <_dtoa_r+0x764>
 800ac5a:	42bb      	cmp	r3, r7
 800ac5c:	bfa8      	it	ge
 800ac5e:	463b      	movge	r3, r7
 800ac60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac62:	eba9 0903 	sub.w	r9, r9, r3
 800ac66:	1aff      	subs	r7, r7, r3
 800ac68:	1ad3      	subs	r3, r2, r3
 800ac6a:	9309      	str	r3, [sp, #36]	; 0x24
 800ac6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac6e:	b1f3      	cbz	r3, 800acae <_dtoa_r+0x7a6>
 800ac70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	f000 80a0 	beq.w	800adb8 <_dtoa_r+0x8b0>
 800ac78:	2c00      	cmp	r4, #0
 800ac7a:	dd10      	ble.n	800ac9e <_dtoa_r+0x796>
 800ac7c:	4631      	mov	r1, r6
 800ac7e:	4622      	mov	r2, r4
 800ac80:	4628      	mov	r0, r5
 800ac82:	f000 fc21 	bl	800b4c8 <__pow5mult>
 800ac86:	4652      	mov	r2, sl
 800ac88:	4601      	mov	r1, r0
 800ac8a:	4606      	mov	r6, r0
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	f000 fb73 	bl	800b378 <__multiply>
 800ac92:	4680      	mov	r8, r0
 800ac94:	4651      	mov	r1, sl
 800ac96:	4628      	mov	r0, r5
 800ac98:	f000 faa2 	bl	800b1e0 <_Bfree>
 800ac9c:	46c2      	mov	sl, r8
 800ac9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aca0:	1b1a      	subs	r2, r3, r4
 800aca2:	d004      	beq.n	800acae <_dtoa_r+0x7a6>
 800aca4:	4651      	mov	r1, sl
 800aca6:	4628      	mov	r0, r5
 800aca8:	f000 fc0e 	bl	800b4c8 <__pow5mult>
 800acac:	4682      	mov	sl, r0
 800acae:	2101      	movs	r1, #1
 800acb0:	4628      	mov	r0, r5
 800acb2:	f000 fb4b 	bl	800b34c <__i2b>
 800acb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acb8:	4604      	mov	r4, r0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	f340 8082 	ble.w	800adc4 <_dtoa_r+0x8bc>
 800acc0:	461a      	mov	r2, r3
 800acc2:	4601      	mov	r1, r0
 800acc4:	4628      	mov	r0, r5
 800acc6:	f000 fbff 	bl	800b4c8 <__pow5mult>
 800acca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800accc:	4604      	mov	r4, r0
 800acce:	2b01      	cmp	r3, #1
 800acd0:	dd7b      	ble.n	800adca <_dtoa_r+0x8c2>
 800acd2:	f04f 0800 	mov.w	r8, #0
 800acd6:	6923      	ldr	r3, [r4, #16]
 800acd8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800acdc:	6918      	ldr	r0, [r3, #16]
 800acde:	f000 fae7 	bl	800b2b0 <__hi0bits>
 800ace2:	f1c0 0020 	rsb	r0, r0, #32
 800ace6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ace8:	4418      	add	r0, r3
 800acea:	f010 001f 	ands.w	r0, r0, #31
 800acee:	f000 8092 	beq.w	800ae16 <_dtoa_r+0x90e>
 800acf2:	f1c0 0320 	rsb	r3, r0, #32
 800acf6:	2b04      	cmp	r3, #4
 800acf8:	f340 8085 	ble.w	800ae06 <_dtoa_r+0x8fe>
 800acfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acfe:	f1c0 001c 	rsb	r0, r0, #28
 800ad02:	4403      	add	r3, r0
 800ad04:	4481      	add	r9, r0
 800ad06:	4407      	add	r7, r0
 800ad08:	9309      	str	r3, [sp, #36]	; 0x24
 800ad0a:	f1b9 0f00 	cmp.w	r9, #0
 800ad0e:	dd05      	ble.n	800ad1c <_dtoa_r+0x814>
 800ad10:	4651      	mov	r1, sl
 800ad12:	464a      	mov	r2, r9
 800ad14:	4628      	mov	r0, r5
 800ad16:	f000 fc31 	bl	800b57c <__lshift>
 800ad1a:	4682      	mov	sl, r0
 800ad1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	dd05      	ble.n	800ad2e <_dtoa_r+0x826>
 800ad22:	4621      	mov	r1, r4
 800ad24:	461a      	mov	r2, r3
 800ad26:	4628      	mov	r0, r5
 800ad28:	f000 fc28 	bl	800b57c <__lshift>
 800ad2c:	4604      	mov	r4, r0
 800ad2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d072      	beq.n	800ae1a <_dtoa_r+0x912>
 800ad34:	4621      	mov	r1, r4
 800ad36:	4650      	mov	r0, sl
 800ad38:	f000 fc8c 	bl	800b654 <__mcmp>
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	da6c      	bge.n	800ae1a <_dtoa_r+0x912>
 800ad40:	2300      	movs	r3, #0
 800ad42:	4651      	mov	r1, sl
 800ad44:	220a      	movs	r2, #10
 800ad46:	4628      	mov	r0, r5
 800ad48:	f000 fa6c 	bl	800b224 <__multadd>
 800ad4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad4e:	4682      	mov	sl, r0
 800ad50:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	f000 81ac 	beq.w	800b0b2 <_dtoa_r+0xbaa>
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	4631      	mov	r1, r6
 800ad5e:	220a      	movs	r2, #10
 800ad60:	4628      	mov	r0, r5
 800ad62:	f000 fa5f 	bl	800b224 <__multadd>
 800ad66:	9b06      	ldr	r3, [sp, #24]
 800ad68:	4606      	mov	r6, r0
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	f300 8093 	bgt.w	800ae96 <_dtoa_r+0x98e>
 800ad70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad72:	2b02      	cmp	r3, #2
 800ad74:	dc59      	bgt.n	800ae2a <_dtoa_r+0x922>
 800ad76:	e08e      	b.n	800ae96 <_dtoa_r+0x98e>
 800ad78:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ad7a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ad7e:	e75d      	b.n	800ac3c <_dtoa_r+0x734>
 800ad80:	9b08      	ldr	r3, [sp, #32]
 800ad82:	1e5c      	subs	r4, r3, #1
 800ad84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad86:	42a3      	cmp	r3, r4
 800ad88:	bfbf      	itttt	lt
 800ad8a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ad8c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800ad8e:	1ae3      	sublt	r3, r4, r3
 800ad90:	18d2      	addlt	r2, r2, r3
 800ad92:	bfa8      	it	ge
 800ad94:	1b1c      	subge	r4, r3, r4
 800ad96:	9b08      	ldr	r3, [sp, #32]
 800ad98:	bfbe      	ittt	lt
 800ad9a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800ad9c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800ad9e:	2400      	movlt	r4, #0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	bfb5      	itete	lt
 800ada4:	eba9 0703 	sublt.w	r7, r9, r3
 800ada8:	464f      	movge	r7, r9
 800adaa:	2300      	movlt	r3, #0
 800adac:	9b08      	ldrge	r3, [sp, #32]
 800adae:	e747      	b.n	800ac40 <_dtoa_r+0x738>
 800adb0:	464f      	mov	r7, r9
 800adb2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800adb4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800adb6:	e74c      	b.n	800ac52 <_dtoa_r+0x74a>
 800adb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adba:	e773      	b.n	800aca4 <_dtoa_r+0x79c>
 800adbc:	3fe00000 	.word	0x3fe00000
 800adc0:	40240000 	.word	0x40240000
 800adc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	dc18      	bgt.n	800adfc <_dtoa_r+0x8f4>
 800adca:	9b04      	ldr	r3, [sp, #16]
 800adcc:	b9b3      	cbnz	r3, 800adfc <_dtoa_r+0x8f4>
 800adce:	9b05      	ldr	r3, [sp, #20]
 800add0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800add4:	b993      	cbnz	r3, 800adfc <_dtoa_r+0x8f4>
 800add6:	9b05      	ldr	r3, [sp, #20]
 800add8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800addc:	0d1b      	lsrs	r3, r3, #20
 800adde:	051b      	lsls	r3, r3, #20
 800ade0:	b17b      	cbz	r3, 800ae02 <_dtoa_r+0x8fa>
 800ade2:	f04f 0801 	mov.w	r8, #1
 800ade6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ade8:	f109 0901 	add.w	r9, r9, #1
 800adec:	3301      	adds	r3, #1
 800adee:	9309      	str	r3, [sp, #36]	; 0x24
 800adf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	f47f af6f 	bne.w	800acd6 <_dtoa_r+0x7ce>
 800adf8:	2001      	movs	r0, #1
 800adfa:	e774      	b.n	800ace6 <_dtoa_r+0x7de>
 800adfc:	f04f 0800 	mov.w	r8, #0
 800ae00:	e7f6      	b.n	800adf0 <_dtoa_r+0x8e8>
 800ae02:	4698      	mov	r8, r3
 800ae04:	e7f4      	b.n	800adf0 <_dtoa_r+0x8e8>
 800ae06:	d080      	beq.n	800ad0a <_dtoa_r+0x802>
 800ae08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae0a:	331c      	adds	r3, #28
 800ae0c:	441a      	add	r2, r3
 800ae0e:	4499      	add	r9, r3
 800ae10:	441f      	add	r7, r3
 800ae12:	9209      	str	r2, [sp, #36]	; 0x24
 800ae14:	e779      	b.n	800ad0a <_dtoa_r+0x802>
 800ae16:	4603      	mov	r3, r0
 800ae18:	e7f6      	b.n	800ae08 <_dtoa_r+0x900>
 800ae1a:	9b08      	ldr	r3, [sp, #32]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	dc34      	bgt.n	800ae8a <_dtoa_r+0x982>
 800ae20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae22:	2b02      	cmp	r3, #2
 800ae24:	dd31      	ble.n	800ae8a <_dtoa_r+0x982>
 800ae26:	9b08      	ldr	r3, [sp, #32]
 800ae28:	9306      	str	r3, [sp, #24]
 800ae2a:	9b06      	ldr	r3, [sp, #24]
 800ae2c:	b963      	cbnz	r3, 800ae48 <_dtoa_r+0x940>
 800ae2e:	4621      	mov	r1, r4
 800ae30:	2205      	movs	r2, #5
 800ae32:	4628      	mov	r0, r5
 800ae34:	f000 f9f6 	bl	800b224 <__multadd>
 800ae38:	4601      	mov	r1, r0
 800ae3a:	4604      	mov	r4, r0
 800ae3c:	4650      	mov	r0, sl
 800ae3e:	f000 fc09 	bl	800b654 <__mcmp>
 800ae42:	2800      	cmp	r0, #0
 800ae44:	f73f adbf 	bgt.w	800a9c6 <_dtoa_r+0x4be>
 800ae48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae4a:	9f03      	ldr	r7, [sp, #12]
 800ae4c:	ea6f 0b03 	mvn.w	fp, r3
 800ae50:	f04f 0800 	mov.w	r8, #0
 800ae54:	4621      	mov	r1, r4
 800ae56:	4628      	mov	r0, r5
 800ae58:	f000 f9c2 	bl	800b1e0 <_Bfree>
 800ae5c:	2e00      	cmp	r6, #0
 800ae5e:	f43f aead 	beq.w	800abbc <_dtoa_r+0x6b4>
 800ae62:	f1b8 0f00 	cmp.w	r8, #0
 800ae66:	d005      	beq.n	800ae74 <_dtoa_r+0x96c>
 800ae68:	45b0      	cmp	r8, r6
 800ae6a:	d003      	beq.n	800ae74 <_dtoa_r+0x96c>
 800ae6c:	4641      	mov	r1, r8
 800ae6e:	4628      	mov	r0, r5
 800ae70:	f000 f9b6 	bl	800b1e0 <_Bfree>
 800ae74:	4631      	mov	r1, r6
 800ae76:	4628      	mov	r0, r5
 800ae78:	f000 f9b2 	bl	800b1e0 <_Bfree>
 800ae7c:	e69e      	b.n	800abbc <_dtoa_r+0x6b4>
 800ae7e:	2400      	movs	r4, #0
 800ae80:	4626      	mov	r6, r4
 800ae82:	e7e1      	b.n	800ae48 <_dtoa_r+0x940>
 800ae84:	46c3      	mov	fp, r8
 800ae86:	4626      	mov	r6, r4
 800ae88:	e59d      	b.n	800a9c6 <_dtoa_r+0x4be>
 800ae8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	f000 80c8 	beq.w	800b022 <_dtoa_r+0xb1a>
 800ae92:	9b08      	ldr	r3, [sp, #32]
 800ae94:	9306      	str	r3, [sp, #24]
 800ae96:	2f00      	cmp	r7, #0
 800ae98:	dd05      	ble.n	800aea6 <_dtoa_r+0x99e>
 800ae9a:	4631      	mov	r1, r6
 800ae9c:	463a      	mov	r2, r7
 800ae9e:	4628      	mov	r0, r5
 800aea0:	f000 fb6c 	bl	800b57c <__lshift>
 800aea4:	4606      	mov	r6, r0
 800aea6:	f1b8 0f00 	cmp.w	r8, #0
 800aeaa:	d05b      	beq.n	800af64 <_dtoa_r+0xa5c>
 800aeac:	4628      	mov	r0, r5
 800aeae:	6871      	ldr	r1, [r6, #4]
 800aeb0:	f000 f956 	bl	800b160 <_Balloc>
 800aeb4:	4607      	mov	r7, r0
 800aeb6:	b928      	cbnz	r0, 800aec4 <_dtoa_r+0x9bc>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	f240 21ef 	movw	r1, #751	; 0x2ef
 800aebe:	4b81      	ldr	r3, [pc, #516]	; (800b0c4 <_dtoa_r+0xbbc>)
 800aec0:	f7ff bb36 	b.w	800a530 <_dtoa_r+0x28>
 800aec4:	6932      	ldr	r2, [r6, #16]
 800aec6:	f106 010c 	add.w	r1, r6, #12
 800aeca:	3202      	adds	r2, #2
 800aecc:	0092      	lsls	r2, r2, #2
 800aece:	300c      	adds	r0, #12
 800aed0:	f000 feda 	bl	800bc88 <memcpy>
 800aed4:	2201      	movs	r2, #1
 800aed6:	4639      	mov	r1, r7
 800aed8:	4628      	mov	r0, r5
 800aeda:	f000 fb4f 	bl	800b57c <__lshift>
 800aede:	46b0      	mov	r8, r6
 800aee0:	4606      	mov	r6, r0
 800aee2:	9b03      	ldr	r3, [sp, #12]
 800aee4:	9a03      	ldr	r2, [sp, #12]
 800aee6:	3301      	adds	r3, #1
 800aee8:	9308      	str	r3, [sp, #32]
 800aeea:	9b06      	ldr	r3, [sp, #24]
 800aeec:	4413      	add	r3, r2
 800aeee:	930b      	str	r3, [sp, #44]	; 0x2c
 800aef0:	9b04      	ldr	r3, [sp, #16]
 800aef2:	f003 0301 	and.w	r3, r3, #1
 800aef6:	930a      	str	r3, [sp, #40]	; 0x28
 800aef8:	9b08      	ldr	r3, [sp, #32]
 800aefa:	4621      	mov	r1, r4
 800aefc:	3b01      	subs	r3, #1
 800aefe:	4650      	mov	r0, sl
 800af00:	9304      	str	r3, [sp, #16]
 800af02:	f7ff fa75 	bl	800a3f0 <quorem>
 800af06:	4641      	mov	r1, r8
 800af08:	9006      	str	r0, [sp, #24]
 800af0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800af0e:	4650      	mov	r0, sl
 800af10:	f000 fba0 	bl	800b654 <__mcmp>
 800af14:	4632      	mov	r2, r6
 800af16:	9009      	str	r0, [sp, #36]	; 0x24
 800af18:	4621      	mov	r1, r4
 800af1a:	4628      	mov	r0, r5
 800af1c:	f000 fbb6 	bl	800b68c <__mdiff>
 800af20:	68c2      	ldr	r2, [r0, #12]
 800af22:	4607      	mov	r7, r0
 800af24:	bb02      	cbnz	r2, 800af68 <_dtoa_r+0xa60>
 800af26:	4601      	mov	r1, r0
 800af28:	4650      	mov	r0, sl
 800af2a:	f000 fb93 	bl	800b654 <__mcmp>
 800af2e:	4602      	mov	r2, r0
 800af30:	4639      	mov	r1, r7
 800af32:	4628      	mov	r0, r5
 800af34:	920c      	str	r2, [sp, #48]	; 0x30
 800af36:	f000 f953 	bl	800b1e0 <_Bfree>
 800af3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af3e:	9f08      	ldr	r7, [sp, #32]
 800af40:	ea43 0102 	orr.w	r1, r3, r2
 800af44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af46:	4319      	orrs	r1, r3
 800af48:	d110      	bne.n	800af6c <_dtoa_r+0xa64>
 800af4a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800af4e:	d029      	beq.n	800afa4 <_dtoa_r+0xa9c>
 800af50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af52:	2b00      	cmp	r3, #0
 800af54:	dd02      	ble.n	800af5c <_dtoa_r+0xa54>
 800af56:	9b06      	ldr	r3, [sp, #24]
 800af58:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800af5c:	9b04      	ldr	r3, [sp, #16]
 800af5e:	f883 9000 	strb.w	r9, [r3]
 800af62:	e777      	b.n	800ae54 <_dtoa_r+0x94c>
 800af64:	4630      	mov	r0, r6
 800af66:	e7ba      	b.n	800aede <_dtoa_r+0x9d6>
 800af68:	2201      	movs	r2, #1
 800af6a:	e7e1      	b.n	800af30 <_dtoa_r+0xa28>
 800af6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af6e:	2b00      	cmp	r3, #0
 800af70:	db04      	blt.n	800af7c <_dtoa_r+0xa74>
 800af72:	9922      	ldr	r1, [sp, #136]	; 0x88
 800af74:	430b      	orrs	r3, r1
 800af76:	990a      	ldr	r1, [sp, #40]	; 0x28
 800af78:	430b      	orrs	r3, r1
 800af7a:	d120      	bne.n	800afbe <_dtoa_r+0xab6>
 800af7c:	2a00      	cmp	r2, #0
 800af7e:	dded      	ble.n	800af5c <_dtoa_r+0xa54>
 800af80:	4651      	mov	r1, sl
 800af82:	2201      	movs	r2, #1
 800af84:	4628      	mov	r0, r5
 800af86:	f000 faf9 	bl	800b57c <__lshift>
 800af8a:	4621      	mov	r1, r4
 800af8c:	4682      	mov	sl, r0
 800af8e:	f000 fb61 	bl	800b654 <__mcmp>
 800af92:	2800      	cmp	r0, #0
 800af94:	dc03      	bgt.n	800af9e <_dtoa_r+0xa96>
 800af96:	d1e1      	bne.n	800af5c <_dtoa_r+0xa54>
 800af98:	f019 0f01 	tst.w	r9, #1
 800af9c:	d0de      	beq.n	800af5c <_dtoa_r+0xa54>
 800af9e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800afa2:	d1d8      	bne.n	800af56 <_dtoa_r+0xa4e>
 800afa4:	2339      	movs	r3, #57	; 0x39
 800afa6:	9a04      	ldr	r2, [sp, #16]
 800afa8:	7013      	strb	r3, [r2, #0]
 800afaa:	463b      	mov	r3, r7
 800afac:	461f      	mov	r7, r3
 800afae:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800afb2:	3b01      	subs	r3, #1
 800afb4:	2a39      	cmp	r2, #57	; 0x39
 800afb6:	d06b      	beq.n	800b090 <_dtoa_r+0xb88>
 800afb8:	3201      	adds	r2, #1
 800afba:	701a      	strb	r2, [r3, #0]
 800afbc:	e74a      	b.n	800ae54 <_dtoa_r+0x94c>
 800afbe:	2a00      	cmp	r2, #0
 800afc0:	dd07      	ble.n	800afd2 <_dtoa_r+0xaca>
 800afc2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800afc6:	d0ed      	beq.n	800afa4 <_dtoa_r+0xa9c>
 800afc8:	9a04      	ldr	r2, [sp, #16]
 800afca:	f109 0301 	add.w	r3, r9, #1
 800afce:	7013      	strb	r3, [r2, #0]
 800afd0:	e740      	b.n	800ae54 <_dtoa_r+0x94c>
 800afd2:	9b08      	ldr	r3, [sp, #32]
 800afd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800afd6:	f803 9c01 	strb.w	r9, [r3, #-1]
 800afda:	4293      	cmp	r3, r2
 800afdc:	d042      	beq.n	800b064 <_dtoa_r+0xb5c>
 800afde:	4651      	mov	r1, sl
 800afe0:	2300      	movs	r3, #0
 800afe2:	220a      	movs	r2, #10
 800afe4:	4628      	mov	r0, r5
 800afe6:	f000 f91d 	bl	800b224 <__multadd>
 800afea:	45b0      	cmp	r8, r6
 800afec:	4682      	mov	sl, r0
 800afee:	f04f 0300 	mov.w	r3, #0
 800aff2:	f04f 020a 	mov.w	r2, #10
 800aff6:	4641      	mov	r1, r8
 800aff8:	4628      	mov	r0, r5
 800affa:	d107      	bne.n	800b00c <_dtoa_r+0xb04>
 800affc:	f000 f912 	bl	800b224 <__multadd>
 800b000:	4680      	mov	r8, r0
 800b002:	4606      	mov	r6, r0
 800b004:	9b08      	ldr	r3, [sp, #32]
 800b006:	3301      	adds	r3, #1
 800b008:	9308      	str	r3, [sp, #32]
 800b00a:	e775      	b.n	800aef8 <_dtoa_r+0x9f0>
 800b00c:	f000 f90a 	bl	800b224 <__multadd>
 800b010:	4631      	mov	r1, r6
 800b012:	4680      	mov	r8, r0
 800b014:	2300      	movs	r3, #0
 800b016:	220a      	movs	r2, #10
 800b018:	4628      	mov	r0, r5
 800b01a:	f000 f903 	bl	800b224 <__multadd>
 800b01e:	4606      	mov	r6, r0
 800b020:	e7f0      	b.n	800b004 <_dtoa_r+0xafc>
 800b022:	9b08      	ldr	r3, [sp, #32]
 800b024:	9306      	str	r3, [sp, #24]
 800b026:	9f03      	ldr	r7, [sp, #12]
 800b028:	4621      	mov	r1, r4
 800b02a:	4650      	mov	r0, sl
 800b02c:	f7ff f9e0 	bl	800a3f0 <quorem>
 800b030:	9b03      	ldr	r3, [sp, #12]
 800b032:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b036:	f807 9b01 	strb.w	r9, [r7], #1
 800b03a:	1afa      	subs	r2, r7, r3
 800b03c:	9b06      	ldr	r3, [sp, #24]
 800b03e:	4293      	cmp	r3, r2
 800b040:	dd07      	ble.n	800b052 <_dtoa_r+0xb4a>
 800b042:	4651      	mov	r1, sl
 800b044:	2300      	movs	r3, #0
 800b046:	220a      	movs	r2, #10
 800b048:	4628      	mov	r0, r5
 800b04a:	f000 f8eb 	bl	800b224 <__multadd>
 800b04e:	4682      	mov	sl, r0
 800b050:	e7ea      	b.n	800b028 <_dtoa_r+0xb20>
 800b052:	9b06      	ldr	r3, [sp, #24]
 800b054:	f04f 0800 	mov.w	r8, #0
 800b058:	2b00      	cmp	r3, #0
 800b05a:	bfcc      	ite	gt
 800b05c:	461f      	movgt	r7, r3
 800b05e:	2701      	movle	r7, #1
 800b060:	9b03      	ldr	r3, [sp, #12]
 800b062:	441f      	add	r7, r3
 800b064:	4651      	mov	r1, sl
 800b066:	2201      	movs	r2, #1
 800b068:	4628      	mov	r0, r5
 800b06a:	f000 fa87 	bl	800b57c <__lshift>
 800b06e:	4621      	mov	r1, r4
 800b070:	4682      	mov	sl, r0
 800b072:	f000 faef 	bl	800b654 <__mcmp>
 800b076:	2800      	cmp	r0, #0
 800b078:	dc97      	bgt.n	800afaa <_dtoa_r+0xaa2>
 800b07a:	d102      	bne.n	800b082 <_dtoa_r+0xb7a>
 800b07c:	f019 0f01 	tst.w	r9, #1
 800b080:	d193      	bne.n	800afaa <_dtoa_r+0xaa2>
 800b082:	463b      	mov	r3, r7
 800b084:	461f      	mov	r7, r3
 800b086:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b08a:	2a30      	cmp	r2, #48	; 0x30
 800b08c:	d0fa      	beq.n	800b084 <_dtoa_r+0xb7c>
 800b08e:	e6e1      	b.n	800ae54 <_dtoa_r+0x94c>
 800b090:	9a03      	ldr	r2, [sp, #12]
 800b092:	429a      	cmp	r2, r3
 800b094:	d18a      	bne.n	800afac <_dtoa_r+0xaa4>
 800b096:	2331      	movs	r3, #49	; 0x31
 800b098:	f10b 0b01 	add.w	fp, fp, #1
 800b09c:	e797      	b.n	800afce <_dtoa_r+0xac6>
 800b09e:	4b0a      	ldr	r3, [pc, #40]	; (800b0c8 <_dtoa_r+0xbc0>)
 800b0a0:	f7ff ba9f 	b.w	800a5e2 <_dtoa_r+0xda>
 800b0a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	f47f aa77 	bne.w	800a59a <_dtoa_r+0x92>
 800b0ac:	4b07      	ldr	r3, [pc, #28]	; (800b0cc <_dtoa_r+0xbc4>)
 800b0ae:	f7ff ba98 	b.w	800a5e2 <_dtoa_r+0xda>
 800b0b2:	9b06      	ldr	r3, [sp, #24]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	dcb6      	bgt.n	800b026 <_dtoa_r+0xb1e>
 800b0b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0ba:	2b02      	cmp	r3, #2
 800b0bc:	f73f aeb5 	bgt.w	800ae2a <_dtoa_r+0x922>
 800b0c0:	e7b1      	b.n	800b026 <_dtoa_r+0xb1e>
 800b0c2:	bf00      	nop
 800b0c4:	0800cc7e 	.word	0x0800cc7e
 800b0c8:	0800cbde 	.word	0x0800cbde
 800b0cc:	0800cc02 	.word	0x0800cc02

0800b0d0 <_free_r>:
 800b0d0:	b538      	push	{r3, r4, r5, lr}
 800b0d2:	4605      	mov	r5, r0
 800b0d4:	2900      	cmp	r1, #0
 800b0d6:	d040      	beq.n	800b15a <_free_r+0x8a>
 800b0d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0dc:	1f0c      	subs	r4, r1, #4
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	bfb8      	it	lt
 800b0e2:	18e4      	addlt	r4, r4, r3
 800b0e4:	f7fe fb6a 	bl	80097bc <__malloc_lock>
 800b0e8:	4a1c      	ldr	r2, [pc, #112]	; (800b15c <_free_r+0x8c>)
 800b0ea:	6813      	ldr	r3, [r2, #0]
 800b0ec:	b933      	cbnz	r3, 800b0fc <_free_r+0x2c>
 800b0ee:	6063      	str	r3, [r4, #4]
 800b0f0:	6014      	str	r4, [r2, #0]
 800b0f2:	4628      	mov	r0, r5
 800b0f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0f8:	f7fe bb66 	b.w	80097c8 <__malloc_unlock>
 800b0fc:	42a3      	cmp	r3, r4
 800b0fe:	d908      	bls.n	800b112 <_free_r+0x42>
 800b100:	6820      	ldr	r0, [r4, #0]
 800b102:	1821      	adds	r1, r4, r0
 800b104:	428b      	cmp	r3, r1
 800b106:	bf01      	itttt	eq
 800b108:	6819      	ldreq	r1, [r3, #0]
 800b10a:	685b      	ldreq	r3, [r3, #4]
 800b10c:	1809      	addeq	r1, r1, r0
 800b10e:	6021      	streq	r1, [r4, #0]
 800b110:	e7ed      	b.n	800b0ee <_free_r+0x1e>
 800b112:	461a      	mov	r2, r3
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	b10b      	cbz	r3, 800b11c <_free_r+0x4c>
 800b118:	42a3      	cmp	r3, r4
 800b11a:	d9fa      	bls.n	800b112 <_free_r+0x42>
 800b11c:	6811      	ldr	r1, [r2, #0]
 800b11e:	1850      	adds	r0, r2, r1
 800b120:	42a0      	cmp	r0, r4
 800b122:	d10b      	bne.n	800b13c <_free_r+0x6c>
 800b124:	6820      	ldr	r0, [r4, #0]
 800b126:	4401      	add	r1, r0
 800b128:	1850      	adds	r0, r2, r1
 800b12a:	4283      	cmp	r3, r0
 800b12c:	6011      	str	r1, [r2, #0]
 800b12e:	d1e0      	bne.n	800b0f2 <_free_r+0x22>
 800b130:	6818      	ldr	r0, [r3, #0]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	4408      	add	r0, r1
 800b136:	6010      	str	r0, [r2, #0]
 800b138:	6053      	str	r3, [r2, #4]
 800b13a:	e7da      	b.n	800b0f2 <_free_r+0x22>
 800b13c:	d902      	bls.n	800b144 <_free_r+0x74>
 800b13e:	230c      	movs	r3, #12
 800b140:	602b      	str	r3, [r5, #0]
 800b142:	e7d6      	b.n	800b0f2 <_free_r+0x22>
 800b144:	6820      	ldr	r0, [r4, #0]
 800b146:	1821      	adds	r1, r4, r0
 800b148:	428b      	cmp	r3, r1
 800b14a:	bf01      	itttt	eq
 800b14c:	6819      	ldreq	r1, [r3, #0]
 800b14e:	685b      	ldreq	r3, [r3, #4]
 800b150:	1809      	addeq	r1, r1, r0
 800b152:	6021      	streq	r1, [r4, #0]
 800b154:	6063      	str	r3, [r4, #4]
 800b156:	6054      	str	r4, [r2, #4]
 800b158:	e7cb      	b.n	800b0f2 <_free_r+0x22>
 800b15a:	bd38      	pop	{r3, r4, r5, pc}
 800b15c:	200016ec 	.word	0x200016ec

0800b160 <_Balloc>:
 800b160:	b570      	push	{r4, r5, r6, lr}
 800b162:	69c6      	ldr	r6, [r0, #28]
 800b164:	4604      	mov	r4, r0
 800b166:	460d      	mov	r5, r1
 800b168:	b976      	cbnz	r6, 800b188 <_Balloc+0x28>
 800b16a:	2010      	movs	r0, #16
 800b16c:	f7fe fa76 	bl	800965c <malloc>
 800b170:	4602      	mov	r2, r0
 800b172:	61e0      	str	r0, [r4, #28]
 800b174:	b920      	cbnz	r0, 800b180 <_Balloc+0x20>
 800b176:	216b      	movs	r1, #107	; 0x6b
 800b178:	4b17      	ldr	r3, [pc, #92]	; (800b1d8 <_Balloc+0x78>)
 800b17a:	4818      	ldr	r0, [pc, #96]	; (800b1dc <_Balloc+0x7c>)
 800b17c:	f000 fd92 	bl	800bca4 <__assert_func>
 800b180:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b184:	6006      	str	r6, [r0, #0]
 800b186:	60c6      	str	r6, [r0, #12]
 800b188:	69e6      	ldr	r6, [r4, #28]
 800b18a:	68f3      	ldr	r3, [r6, #12]
 800b18c:	b183      	cbz	r3, 800b1b0 <_Balloc+0x50>
 800b18e:	69e3      	ldr	r3, [r4, #28]
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b196:	b9b8      	cbnz	r0, 800b1c8 <_Balloc+0x68>
 800b198:	2101      	movs	r1, #1
 800b19a:	fa01 f605 	lsl.w	r6, r1, r5
 800b19e:	1d72      	adds	r2, r6, #5
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	0092      	lsls	r2, r2, #2
 800b1a4:	f000 fd9c 	bl	800bce0 <_calloc_r>
 800b1a8:	b160      	cbz	r0, 800b1c4 <_Balloc+0x64>
 800b1aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b1ae:	e00e      	b.n	800b1ce <_Balloc+0x6e>
 800b1b0:	2221      	movs	r2, #33	; 0x21
 800b1b2:	2104      	movs	r1, #4
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	f000 fd93 	bl	800bce0 <_calloc_r>
 800b1ba:	69e3      	ldr	r3, [r4, #28]
 800b1bc:	60f0      	str	r0, [r6, #12]
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d1e4      	bne.n	800b18e <_Balloc+0x2e>
 800b1c4:	2000      	movs	r0, #0
 800b1c6:	bd70      	pop	{r4, r5, r6, pc}
 800b1c8:	6802      	ldr	r2, [r0, #0]
 800b1ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b1d4:	e7f7      	b.n	800b1c6 <_Balloc+0x66>
 800b1d6:	bf00      	nop
 800b1d8:	0800cc0f 	.word	0x0800cc0f
 800b1dc:	0800cc8f 	.word	0x0800cc8f

0800b1e0 <_Bfree>:
 800b1e0:	b570      	push	{r4, r5, r6, lr}
 800b1e2:	69c6      	ldr	r6, [r0, #28]
 800b1e4:	4605      	mov	r5, r0
 800b1e6:	460c      	mov	r4, r1
 800b1e8:	b976      	cbnz	r6, 800b208 <_Bfree+0x28>
 800b1ea:	2010      	movs	r0, #16
 800b1ec:	f7fe fa36 	bl	800965c <malloc>
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	61e8      	str	r0, [r5, #28]
 800b1f4:	b920      	cbnz	r0, 800b200 <_Bfree+0x20>
 800b1f6:	218f      	movs	r1, #143	; 0x8f
 800b1f8:	4b08      	ldr	r3, [pc, #32]	; (800b21c <_Bfree+0x3c>)
 800b1fa:	4809      	ldr	r0, [pc, #36]	; (800b220 <_Bfree+0x40>)
 800b1fc:	f000 fd52 	bl	800bca4 <__assert_func>
 800b200:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b204:	6006      	str	r6, [r0, #0]
 800b206:	60c6      	str	r6, [r0, #12]
 800b208:	b13c      	cbz	r4, 800b21a <_Bfree+0x3a>
 800b20a:	69eb      	ldr	r3, [r5, #28]
 800b20c:	6862      	ldr	r2, [r4, #4]
 800b20e:	68db      	ldr	r3, [r3, #12]
 800b210:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b214:	6021      	str	r1, [r4, #0]
 800b216:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b21a:	bd70      	pop	{r4, r5, r6, pc}
 800b21c:	0800cc0f 	.word	0x0800cc0f
 800b220:	0800cc8f 	.word	0x0800cc8f

0800b224 <__multadd>:
 800b224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b228:	4607      	mov	r7, r0
 800b22a:	460c      	mov	r4, r1
 800b22c:	461e      	mov	r6, r3
 800b22e:	2000      	movs	r0, #0
 800b230:	690d      	ldr	r5, [r1, #16]
 800b232:	f101 0c14 	add.w	ip, r1, #20
 800b236:	f8dc 3000 	ldr.w	r3, [ip]
 800b23a:	3001      	adds	r0, #1
 800b23c:	b299      	uxth	r1, r3
 800b23e:	fb02 6101 	mla	r1, r2, r1, r6
 800b242:	0c1e      	lsrs	r6, r3, #16
 800b244:	0c0b      	lsrs	r3, r1, #16
 800b246:	fb02 3306 	mla	r3, r2, r6, r3
 800b24a:	b289      	uxth	r1, r1
 800b24c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b250:	4285      	cmp	r5, r0
 800b252:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b256:	f84c 1b04 	str.w	r1, [ip], #4
 800b25a:	dcec      	bgt.n	800b236 <__multadd+0x12>
 800b25c:	b30e      	cbz	r6, 800b2a2 <__multadd+0x7e>
 800b25e:	68a3      	ldr	r3, [r4, #8]
 800b260:	42ab      	cmp	r3, r5
 800b262:	dc19      	bgt.n	800b298 <__multadd+0x74>
 800b264:	6861      	ldr	r1, [r4, #4]
 800b266:	4638      	mov	r0, r7
 800b268:	3101      	adds	r1, #1
 800b26a:	f7ff ff79 	bl	800b160 <_Balloc>
 800b26e:	4680      	mov	r8, r0
 800b270:	b928      	cbnz	r0, 800b27e <__multadd+0x5a>
 800b272:	4602      	mov	r2, r0
 800b274:	21ba      	movs	r1, #186	; 0xba
 800b276:	4b0c      	ldr	r3, [pc, #48]	; (800b2a8 <__multadd+0x84>)
 800b278:	480c      	ldr	r0, [pc, #48]	; (800b2ac <__multadd+0x88>)
 800b27a:	f000 fd13 	bl	800bca4 <__assert_func>
 800b27e:	6922      	ldr	r2, [r4, #16]
 800b280:	f104 010c 	add.w	r1, r4, #12
 800b284:	3202      	adds	r2, #2
 800b286:	0092      	lsls	r2, r2, #2
 800b288:	300c      	adds	r0, #12
 800b28a:	f000 fcfd 	bl	800bc88 <memcpy>
 800b28e:	4621      	mov	r1, r4
 800b290:	4638      	mov	r0, r7
 800b292:	f7ff ffa5 	bl	800b1e0 <_Bfree>
 800b296:	4644      	mov	r4, r8
 800b298:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b29c:	3501      	adds	r5, #1
 800b29e:	615e      	str	r6, [r3, #20]
 800b2a0:	6125      	str	r5, [r4, #16]
 800b2a2:	4620      	mov	r0, r4
 800b2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2a8:	0800cc7e 	.word	0x0800cc7e
 800b2ac:	0800cc8f 	.word	0x0800cc8f

0800b2b0 <__hi0bits>:
 800b2b0:	0c02      	lsrs	r2, r0, #16
 800b2b2:	0412      	lsls	r2, r2, #16
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	b9ca      	cbnz	r2, 800b2ec <__hi0bits+0x3c>
 800b2b8:	0403      	lsls	r3, r0, #16
 800b2ba:	2010      	movs	r0, #16
 800b2bc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b2c0:	bf04      	itt	eq
 800b2c2:	021b      	lsleq	r3, r3, #8
 800b2c4:	3008      	addeq	r0, #8
 800b2c6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b2ca:	bf04      	itt	eq
 800b2cc:	011b      	lsleq	r3, r3, #4
 800b2ce:	3004      	addeq	r0, #4
 800b2d0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b2d4:	bf04      	itt	eq
 800b2d6:	009b      	lsleq	r3, r3, #2
 800b2d8:	3002      	addeq	r0, #2
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	db05      	blt.n	800b2ea <__hi0bits+0x3a>
 800b2de:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b2e2:	f100 0001 	add.w	r0, r0, #1
 800b2e6:	bf08      	it	eq
 800b2e8:	2020      	moveq	r0, #32
 800b2ea:	4770      	bx	lr
 800b2ec:	2000      	movs	r0, #0
 800b2ee:	e7e5      	b.n	800b2bc <__hi0bits+0xc>

0800b2f0 <__lo0bits>:
 800b2f0:	6803      	ldr	r3, [r0, #0]
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	f013 0007 	ands.w	r0, r3, #7
 800b2f8:	d00b      	beq.n	800b312 <__lo0bits+0x22>
 800b2fa:	07d9      	lsls	r1, r3, #31
 800b2fc:	d421      	bmi.n	800b342 <__lo0bits+0x52>
 800b2fe:	0798      	lsls	r0, r3, #30
 800b300:	bf49      	itett	mi
 800b302:	085b      	lsrmi	r3, r3, #1
 800b304:	089b      	lsrpl	r3, r3, #2
 800b306:	2001      	movmi	r0, #1
 800b308:	6013      	strmi	r3, [r2, #0]
 800b30a:	bf5c      	itt	pl
 800b30c:	2002      	movpl	r0, #2
 800b30e:	6013      	strpl	r3, [r2, #0]
 800b310:	4770      	bx	lr
 800b312:	b299      	uxth	r1, r3
 800b314:	b909      	cbnz	r1, 800b31a <__lo0bits+0x2a>
 800b316:	2010      	movs	r0, #16
 800b318:	0c1b      	lsrs	r3, r3, #16
 800b31a:	b2d9      	uxtb	r1, r3
 800b31c:	b909      	cbnz	r1, 800b322 <__lo0bits+0x32>
 800b31e:	3008      	adds	r0, #8
 800b320:	0a1b      	lsrs	r3, r3, #8
 800b322:	0719      	lsls	r1, r3, #28
 800b324:	bf04      	itt	eq
 800b326:	091b      	lsreq	r3, r3, #4
 800b328:	3004      	addeq	r0, #4
 800b32a:	0799      	lsls	r1, r3, #30
 800b32c:	bf04      	itt	eq
 800b32e:	089b      	lsreq	r3, r3, #2
 800b330:	3002      	addeq	r0, #2
 800b332:	07d9      	lsls	r1, r3, #31
 800b334:	d403      	bmi.n	800b33e <__lo0bits+0x4e>
 800b336:	085b      	lsrs	r3, r3, #1
 800b338:	f100 0001 	add.w	r0, r0, #1
 800b33c:	d003      	beq.n	800b346 <__lo0bits+0x56>
 800b33e:	6013      	str	r3, [r2, #0]
 800b340:	4770      	bx	lr
 800b342:	2000      	movs	r0, #0
 800b344:	4770      	bx	lr
 800b346:	2020      	movs	r0, #32
 800b348:	4770      	bx	lr
	...

0800b34c <__i2b>:
 800b34c:	b510      	push	{r4, lr}
 800b34e:	460c      	mov	r4, r1
 800b350:	2101      	movs	r1, #1
 800b352:	f7ff ff05 	bl	800b160 <_Balloc>
 800b356:	4602      	mov	r2, r0
 800b358:	b928      	cbnz	r0, 800b366 <__i2b+0x1a>
 800b35a:	f240 1145 	movw	r1, #325	; 0x145
 800b35e:	4b04      	ldr	r3, [pc, #16]	; (800b370 <__i2b+0x24>)
 800b360:	4804      	ldr	r0, [pc, #16]	; (800b374 <__i2b+0x28>)
 800b362:	f000 fc9f 	bl	800bca4 <__assert_func>
 800b366:	2301      	movs	r3, #1
 800b368:	6144      	str	r4, [r0, #20]
 800b36a:	6103      	str	r3, [r0, #16]
 800b36c:	bd10      	pop	{r4, pc}
 800b36e:	bf00      	nop
 800b370:	0800cc7e 	.word	0x0800cc7e
 800b374:	0800cc8f 	.word	0x0800cc8f

0800b378 <__multiply>:
 800b378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b37c:	4691      	mov	r9, r2
 800b37e:	690a      	ldr	r2, [r1, #16]
 800b380:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b384:	460c      	mov	r4, r1
 800b386:	429a      	cmp	r2, r3
 800b388:	bfbe      	ittt	lt
 800b38a:	460b      	movlt	r3, r1
 800b38c:	464c      	movlt	r4, r9
 800b38e:	4699      	movlt	r9, r3
 800b390:	6927      	ldr	r7, [r4, #16]
 800b392:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b396:	68a3      	ldr	r3, [r4, #8]
 800b398:	6861      	ldr	r1, [r4, #4]
 800b39a:	eb07 060a 	add.w	r6, r7, sl
 800b39e:	42b3      	cmp	r3, r6
 800b3a0:	b085      	sub	sp, #20
 800b3a2:	bfb8      	it	lt
 800b3a4:	3101      	addlt	r1, #1
 800b3a6:	f7ff fedb 	bl	800b160 <_Balloc>
 800b3aa:	b930      	cbnz	r0, 800b3ba <__multiply+0x42>
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b3b2:	4b43      	ldr	r3, [pc, #268]	; (800b4c0 <__multiply+0x148>)
 800b3b4:	4843      	ldr	r0, [pc, #268]	; (800b4c4 <__multiply+0x14c>)
 800b3b6:	f000 fc75 	bl	800bca4 <__assert_func>
 800b3ba:	f100 0514 	add.w	r5, r0, #20
 800b3be:	462b      	mov	r3, r5
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b3c6:	4543      	cmp	r3, r8
 800b3c8:	d321      	bcc.n	800b40e <__multiply+0x96>
 800b3ca:	f104 0314 	add.w	r3, r4, #20
 800b3ce:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b3d2:	f109 0314 	add.w	r3, r9, #20
 800b3d6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b3da:	9202      	str	r2, [sp, #8]
 800b3dc:	1b3a      	subs	r2, r7, r4
 800b3de:	3a15      	subs	r2, #21
 800b3e0:	f022 0203 	bic.w	r2, r2, #3
 800b3e4:	3204      	adds	r2, #4
 800b3e6:	f104 0115 	add.w	r1, r4, #21
 800b3ea:	428f      	cmp	r7, r1
 800b3ec:	bf38      	it	cc
 800b3ee:	2204      	movcc	r2, #4
 800b3f0:	9201      	str	r2, [sp, #4]
 800b3f2:	9a02      	ldr	r2, [sp, #8]
 800b3f4:	9303      	str	r3, [sp, #12]
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d80c      	bhi.n	800b414 <__multiply+0x9c>
 800b3fa:	2e00      	cmp	r6, #0
 800b3fc:	dd03      	ble.n	800b406 <__multiply+0x8e>
 800b3fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b402:	2b00      	cmp	r3, #0
 800b404:	d05a      	beq.n	800b4bc <__multiply+0x144>
 800b406:	6106      	str	r6, [r0, #16]
 800b408:	b005      	add	sp, #20
 800b40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b40e:	f843 2b04 	str.w	r2, [r3], #4
 800b412:	e7d8      	b.n	800b3c6 <__multiply+0x4e>
 800b414:	f8b3 a000 	ldrh.w	sl, [r3]
 800b418:	f1ba 0f00 	cmp.w	sl, #0
 800b41c:	d023      	beq.n	800b466 <__multiply+0xee>
 800b41e:	46a9      	mov	r9, r5
 800b420:	f04f 0c00 	mov.w	ip, #0
 800b424:	f104 0e14 	add.w	lr, r4, #20
 800b428:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b42c:	f8d9 1000 	ldr.w	r1, [r9]
 800b430:	fa1f fb82 	uxth.w	fp, r2
 800b434:	b289      	uxth	r1, r1
 800b436:	fb0a 110b 	mla	r1, sl, fp, r1
 800b43a:	4461      	add	r1, ip
 800b43c:	f8d9 c000 	ldr.w	ip, [r9]
 800b440:	0c12      	lsrs	r2, r2, #16
 800b442:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b446:	fb0a c202 	mla	r2, sl, r2, ip
 800b44a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b44e:	b289      	uxth	r1, r1
 800b450:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b454:	4577      	cmp	r7, lr
 800b456:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b45a:	f849 1b04 	str.w	r1, [r9], #4
 800b45e:	d8e3      	bhi.n	800b428 <__multiply+0xb0>
 800b460:	9a01      	ldr	r2, [sp, #4]
 800b462:	f845 c002 	str.w	ip, [r5, r2]
 800b466:	9a03      	ldr	r2, [sp, #12]
 800b468:	3304      	adds	r3, #4
 800b46a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b46e:	f1b9 0f00 	cmp.w	r9, #0
 800b472:	d021      	beq.n	800b4b8 <__multiply+0x140>
 800b474:	46ae      	mov	lr, r5
 800b476:	f04f 0a00 	mov.w	sl, #0
 800b47a:	6829      	ldr	r1, [r5, #0]
 800b47c:	f104 0c14 	add.w	ip, r4, #20
 800b480:	f8bc b000 	ldrh.w	fp, [ip]
 800b484:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b488:	b289      	uxth	r1, r1
 800b48a:	fb09 220b 	mla	r2, r9, fp, r2
 800b48e:	4452      	add	r2, sl
 800b490:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b494:	f84e 1b04 	str.w	r1, [lr], #4
 800b498:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b49c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b4a0:	f8be 1000 	ldrh.w	r1, [lr]
 800b4a4:	4567      	cmp	r7, ip
 800b4a6:	fb09 110a 	mla	r1, r9, sl, r1
 800b4aa:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b4ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b4b2:	d8e5      	bhi.n	800b480 <__multiply+0x108>
 800b4b4:	9a01      	ldr	r2, [sp, #4]
 800b4b6:	50a9      	str	r1, [r5, r2]
 800b4b8:	3504      	adds	r5, #4
 800b4ba:	e79a      	b.n	800b3f2 <__multiply+0x7a>
 800b4bc:	3e01      	subs	r6, #1
 800b4be:	e79c      	b.n	800b3fa <__multiply+0x82>
 800b4c0:	0800cc7e 	.word	0x0800cc7e
 800b4c4:	0800cc8f 	.word	0x0800cc8f

0800b4c8 <__pow5mult>:
 800b4c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4cc:	4615      	mov	r5, r2
 800b4ce:	f012 0203 	ands.w	r2, r2, #3
 800b4d2:	4606      	mov	r6, r0
 800b4d4:	460f      	mov	r7, r1
 800b4d6:	d007      	beq.n	800b4e8 <__pow5mult+0x20>
 800b4d8:	4c25      	ldr	r4, [pc, #148]	; (800b570 <__pow5mult+0xa8>)
 800b4da:	3a01      	subs	r2, #1
 800b4dc:	2300      	movs	r3, #0
 800b4de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b4e2:	f7ff fe9f 	bl	800b224 <__multadd>
 800b4e6:	4607      	mov	r7, r0
 800b4e8:	10ad      	asrs	r5, r5, #2
 800b4ea:	d03d      	beq.n	800b568 <__pow5mult+0xa0>
 800b4ec:	69f4      	ldr	r4, [r6, #28]
 800b4ee:	b97c      	cbnz	r4, 800b510 <__pow5mult+0x48>
 800b4f0:	2010      	movs	r0, #16
 800b4f2:	f7fe f8b3 	bl	800965c <malloc>
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	61f0      	str	r0, [r6, #28]
 800b4fa:	b928      	cbnz	r0, 800b508 <__pow5mult+0x40>
 800b4fc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b500:	4b1c      	ldr	r3, [pc, #112]	; (800b574 <__pow5mult+0xac>)
 800b502:	481d      	ldr	r0, [pc, #116]	; (800b578 <__pow5mult+0xb0>)
 800b504:	f000 fbce 	bl	800bca4 <__assert_func>
 800b508:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b50c:	6004      	str	r4, [r0, #0]
 800b50e:	60c4      	str	r4, [r0, #12]
 800b510:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b514:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b518:	b94c      	cbnz	r4, 800b52e <__pow5mult+0x66>
 800b51a:	f240 2171 	movw	r1, #625	; 0x271
 800b51e:	4630      	mov	r0, r6
 800b520:	f7ff ff14 	bl	800b34c <__i2b>
 800b524:	2300      	movs	r3, #0
 800b526:	4604      	mov	r4, r0
 800b528:	f8c8 0008 	str.w	r0, [r8, #8]
 800b52c:	6003      	str	r3, [r0, #0]
 800b52e:	f04f 0900 	mov.w	r9, #0
 800b532:	07eb      	lsls	r3, r5, #31
 800b534:	d50a      	bpl.n	800b54c <__pow5mult+0x84>
 800b536:	4639      	mov	r1, r7
 800b538:	4622      	mov	r2, r4
 800b53a:	4630      	mov	r0, r6
 800b53c:	f7ff ff1c 	bl	800b378 <__multiply>
 800b540:	4680      	mov	r8, r0
 800b542:	4639      	mov	r1, r7
 800b544:	4630      	mov	r0, r6
 800b546:	f7ff fe4b 	bl	800b1e0 <_Bfree>
 800b54a:	4647      	mov	r7, r8
 800b54c:	106d      	asrs	r5, r5, #1
 800b54e:	d00b      	beq.n	800b568 <__pow5mult+0xa0>
 800b550:	6820      	ldr	r0, [r4, #0]
 800b552:	b938      	cbnz	r0, 800b564 <__pow5mult+0x9c>
 800b554:	4622      	mov	r2, r4
 800b556:	4621      	mov	r1, r4
 800b558:	4630      	mov	r0, r6
 800b55a:	f7ff ff0d 	bl	800b378 <__multiply>
 800b55e:	6020      	str	r0, [r4, #0]
 800b560:	f8c0 9000 	str.w	r9, [r0]
 800b564:	4604      	mov	r4, r0
 800b566:	e7e4      	b.n	800b532 <__pow5mult+0x6a>
 800b568:	4638      	mov	r0, r7
 800b56a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b56e:	bf00      	nop
 800b570:	0800cdd8 	.word	0x0800cdd8
 800b574:	0800cc0f 	.word	0x0800cc0f
 800b578:	0800cc8f 	.word	0x0800cc8f

0800b57c <__lshift>:
 800b57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b580:	460c      	mov	r4, r1
 800b582:	4607      	mov	r7, r0
 800b584:	4691      	mov	r9, r2
 800b586:	6923      	ldr	r3, [r4, #16]
 800b588:	6849      	ldr	r1, [r1, #4]
 800b58a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b58e:	68a3      	ldr	r3, [r4, #8]
 800b590:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b594:	f108 0601 	add.w	r6, r8, #1
 800b598:	42b3      	cmp	r3, r6
 800b59a:	db0b      	blt.n	800b5b4 <__lshift+0x38>
 800b59c:	4638      	mov	r0, r7
 800b59e:	f7ff fddf 	bl	800b160 <_Balloc>
 800b5a2:	4605      	mov	r5, r0
 800b5a4:	b948      	cbnz	r0, 800b5ba <__lshift+0x3e>
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b5ac:	4b27      	ldr	r3, [pc, #156]	; (800b64c <__lshift+0xd0>)
 800b5ae:	4828      	ldr	r0, [pc, #160]	; (800b650 <__lshift+0xd4>)
 800b5b0:	f000 fb78 	bl	800bca4 <__assert_func>
 800b5b4:	3101      	adds	r1, #1
 800b5b6:	005b      	lsls	r3, r3, #1
 800b5b8:	e7ee      	b.n	800b598 <__lshift+0x1c>
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	f100 0114 	add.w	r1, r0, #20
 800b5c0:	f100 0210 	add.w	r2, r0, #16
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	4553      	cmp	r3, sl
 800b5c8:	db33      	blt.n	800b632 <__lshift+0xb6>
 800b5ca:	6920      	ldr	r0, [r4, #16]
 800b5cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b5d0:	f104 0314 	add.w	r3, r4, #20
 800b5d4:	f019 091f 	ands.w	r9, r9, #31
 800b5d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b5dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b5e0:	d02b      	beq.n	800b63a <__lshift+0xbe>
 800b5e2:	468a      	mov	sl, r1
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	f1c9 0e20 	rsb	lr, r9, #32
 800b5ea:	6818      	ldr	r0, [r3, #0]
 800b5ec:	fa00 f009 	lsl.w	r0, r0, r9
 800b5f0:	4310      	orrs	r0, r2
 800b5f2:	f84a 0b04 	str.w	r0, [sl], #4
 800b5f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5fa:	459c      	cmp	ip, r3
 800b5fc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b600:	d8f3      	bhi.n	800b5ea <__lshift+0x6e>
 800b602:	ebac 0304 	sub.w	r3, ip, r4
 800b606:	3b15      	subs	r3, #21
 800b608:	f023 0303 	bic.w	r3, r3, #3
 800b60c:	3304      	adds	r3, #4
 800b60e:	f104 0015 	add.w	r0, r4, #21
 800b612:	4584      	cmp	ip, r0
 800b614:	bf38      	it	cc
 800b616:	2304      	movcc	r3, #4
 800b618:	50ca      	str	r2, [r1, r3]
 800b61a:	b10a      	cbz	r2, 800b620 <__lshift+0xa4>
 800b61c:	f108 0602 	add.w	r6, r8, #2
 800b620:	3e01      	subs	r6, #1
 800b622:	4638      	mov	r0, r7
 800b624:	4621      	mov	r1, r4
 800b626:	612e      	str	r6, [r5, #16]
 800b628:	f7ff fdda 	bl	800b1e0 <_Bfree>
 800b62c:	4628      	mov	r0, r5
 800b62e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b632:	f842 0f04 	str.w	r0, [r2, #4]!
 800b636:	3301      	adds	r3, #1
 800b638:	e7c5      	b.n	800b5c6 <__lshift+0x4a>
 800b63a:	3904      	subs	r1, #4
 800b63c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b640:	459c      	cmp	ip, r3
 800b642:	f841 2f04 	str.w	r2, [r1, #4]!
 800b646:	d8f9      	bhi.n	800b63c <__lshift+0xc0>
 800b648:	e7ea      	b.n	800b620 <__lshift+0xa4>
 800b64a:	bf00      	nop
 800b64c:	0800cc7e 	.word	0x0800cc7e
 800b650:	0800cc8f 	.word	0x0800cc8f

0800b654 <__mcmp>:
 800b654:	4603      	mov	r3, r0
 800b656:	690a      	ldr	r2, [r1, #16]
 800b658:	6900      	ldr	r0, [r0, #16]
 800b65a:	b530      	push	{r4, r5, lr}
 800b65c:	1a80      	subs	r0, r0, r2
 800b65e:	d10d      	bne.n	800b67c <__mcmp+0x28>
 800b660:	3314      	adds	r3, #20
 800b662:	3114      	adds	r1, #20
 800b664:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b668:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b66c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b670:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b674:	4295      	cmp	r5, r2
 800b676:	d002      	beq.n	800b67e <__mcmp+0x2a>
 800b678:	d304      	bcc.n	800b684 <__mcmp+0x30>
 800b67a:	2001      	movs	r0, #1
 800b67c:	bd30      	pop	{r4, r5, pc}
 800b67e:	42a3      	cmp	r3, r4
 800b680:	d3f4      	bcc.n	800b66c <__mcmp+0x18>
 800b682:	e7fb      	b.n	800b67c <__mcmp+0x28>
 800b684:	f04f 30ff 	mov.w	r0, #4294967295
 800b688:	e7f8      	b.n	800b67c <__mcmp+0x28>
	...

0800b68c <__mdiff>:
 800b68c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b690:	460d      	mov	r5, r1
 800b692:	4607      	mov	r7, r0
 800b694:	4611      	mov	r1, r2
 800b696:	4628      	mov	r0, r5
 800b698:	4614      	mov	r4, r2
 800b69a:	f7ff ffdb 	bl	800b654 <__mcmp>
 800b69e:	1e06      	subs	r6, r0, #0
 800b6a0:	d111      	bne.n	800b6c6 <__mdiff+0x3a>
 800b6a2:	4631      	mov	r1, r6
 800b6a4:	4638      	mov	r0, r7
 800b6a6:	f7ff fd5b 	bl	800b160 <_Balloc>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	b928      	cbnz	r0, 800b6ba <__mdiff+0x2e>
 800b6ae:	f240 2137 	movw	r1, #567	; 0x237
 800b6b2:	4b3a      	ldr	r3, [pc, #232]	; (800b79c <__mdiff+0x110>)
 800b6b4:	483a      	ldr	r0, [pc, #232]	; (800b7a0 <__mdiff+0x114>)
 800b6b6:	f000 faf5 	bl	800bca4 <__assert_func>
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b6c0:	4610      	mov	r0, r2
 800b6c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6c6:	bfa4      	itt	ge
 800b6c8:	4623      	movge	r3, r4
 800b6ca:	462c      	movge	r4, r5
 800b6cc:	4638      	mov	r0, r7
 800b6ce:	6861      	ldr	r1, [r4, #4]
 800b6d0:	bfa6      	itte	ge
 800b6d2:	461d      	movge	r5, r3
 800b6d4:	2600      	movge	r6, #0
 800b6d6:	2601      	movlt	r6, #1
 800b6d8:	f7ff fd42 	bl	800b160 <_Balloc>
 800b6dc:	4602      	mov	r2, r0
 800b6de:	b918      	cbnz	r0, 800b6e8 <__mdiff+0x5c>
 800b6e0:	f240 2145 	movw	r1, #581	; 0x245
 800b6e4:	4b2d      	ldr	r3, [pc, #180]	; (800b79c <__mdiff+0x110>)
 800b6e6:	e7e5      	b.n	800b6b4 <__mdiff+0x28>
 800b6e8:	f102 0814 	add.w	r8, r2, #20
 800b6ec:	46c2      	mov	sl, r8
 800b6ee:	f04f 0c00 	mov.w	ip, #0
 800b6f2:	6927      	ldr	r7, [r4, #16]
 800b6f4:	60c6      	str	r6, [r0, #12]
 800b6f6:	692e      	ldr	r6, [r5, #16]
 800b6f8:	f104 0014 	add.w	r0, r4, #20
 800b6fc:	f105 0914 	add.w	r9, r5, #20
 800b700:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b704:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b708:	3410      	adds	r4, #16
 800b70a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b70e:	f859 3b04 	ldr.w	r3, [r9], #4
 800b712:	fa1f f18b 	uxth.w	r1, fp
 800b716:	4461      	add	r1, ip
 800b718:	fa1f fc83 	uxth.w	ip, r3
 800b71c:	0c1b      	lsrs	r3, r3, #16
 800b71e:	eba1 010c 	sub.w	r1, r1, ip
 800b722:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b726:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b72a:	b289      	uxth	r1, r1
 800b72c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800b730:	454e      	cmp	r6, r9
 800b732:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b736:	f84a 1b04 	str.w	r1, [sl], #4
 800b73a:	d8e6      	bhi.n	800b70a <__mdiff+0x7e>
 800b73c:	1b73      	subs	r3, r6, r5
 800b73e:	3b15      	subs	r3, #21
 800b740:	f023 0303 	bic.w	r3, r3, #3
 800b744:	3515      	adds	r5, #21
 800b746:	3304      	adds	r3, #4
 800b748:	42ae      	cmp	r6, r5
 800b74a:	bf38      	it	cc
 800b74c:	2304      	movcc	r3, #4
 800b74e:	4418      	add	r0, r3
 800b750:	4443      	add	r3, r8
 800b752:	461e      	mov	r6, r3
 800b754:	4605      	mov	r5, r0
 800b756:	4575      	cmp	r5, lr
 800b758:	d30e      	bcc.n	800b778 <__mdiff+0xec>
 800b75a:	f10e 0103 	add.w	r1, lr, #3
 800b75e:	1a09      	subs	r1, r1, r0
 800b760:	f021 0103 	bic.w	r1, r1, #3
 800b764:	3803      	subs	r0, #3
 800b766:	4586      	cmp	lr, r0
 800b768:	bf38      	it	cc
 800b76a:	2100      	movcc	r1, #0
 800b76c:	440b      	add	r3, r1
 800b76e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b772:	b189      	cbz	r1, 800b798 <__mdiff+0x10c>
 800b774:	6117      	str	r7, [r2, #16]
 800b776:	e7a3      	b.n	800b6c0 <__mdiff+0x34>
 800b778:	f855 8b04 	ldr.w	r8, [r5], #4
 800b77c:	fa1f f188 	uxth.w	r1, r8
 800b780:	4461      	add	r1, ip
 800b782:	140c      	asrs	r4, r1, #16
 800b784:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b788:	b289      	uxth	r1, r1
 800b78a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b78e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b792:	f846 1b04 	str.w	r1, [r6], #4
 800b796:	e7de      	b.n	800b756 <__mdiff+0xca>
 800b798:	3f01      	subs	r7, #1
 800b79a:	e7e8      	b.n	800b76e <__mdiff+0xe2>
 800b79c:	0800cc7e 	.word	0x0800cc7e
 800b7a0:	0800cc8f 	.word	0x0800cc8f

0800b7a4 <__d2b>:
 800b7a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7a6:	2101      	movs	r1, #1
 800b7a8:	4617      	mov	r7, r2
 800b7aa:	461c      	mov	r4, r3
 800b7ac:	9e08      	ldr	r6, [sp, #32]
 800b7ae:	f7ff fcd7 	bl	800b160 <_Balloc>
 800b7b2:	4605      	mov	r5, r0
 800b7b4:	b930      	cbnz	r0, 800b7c4 <__d2b+0x20>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	f240 310f 	movw	r1, #783	; 0x30f
 800b7bc:	4b22      	ldr	r3, [pc, #136]	; (800b848 <__d2b+0xa4>)
 800b7be:	4823      	ldr	r0, [pc, #140]	; (800b84c <__d2b+0xa8>)
 800b7c0:	f000 fa70 	bl	800bca4 <__assert_func>
 800b7c4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b7c8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b7cc:	bb24      	cbnz	r4, 800b818 <__d2b+0x74>
 800b7ce:	2f00      	cmp	r7, #0
 800b7d0:	9301      	str	r3, [sp, #4]
 800b7d2:	d026      	beq.n	800b822 <__d2b+0x7e>
 800b7d4:	4668      	mov	r0, sp
 800b7d6:	9700      	str	r7, [sp, #0]
 800b7d8:	f7ff fd8a 	bl	800b2f0 <__lo0bits>
 800b7dc:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b7e0:	b1e8      	cbz	r0, 800b81e <__d2b+0x7a>
 800b7e2:	f1c0 0320 	rsb	r3, r0, #32
 800b7e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ea:	430b      	orrs	r3, r1
 800b7ec:	40c2      	lsrs	r2, r0
 800b7ee:	616b      	str	r3, [r5, #20]
 800b7f0:	9201      	str	r2, [sp, #4]
 800b7f2:	9b01      	ldr	r3, [sp, #4]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	bf14      	ite	ne
 800b7f8:	2102      	movne	r1, #2
 800b7fa:	2101      	moveq	r1, #1
 800b7fc:	61ab      	str	r3, [r5, #24]
 800b7fe:	6129      	str	r1, [r5, #16]
 800b800:	b1bc      	cbz	r4, 800b832 <__d2b+0x8e>
 800b802:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b806:	4404      	add	r4, r0
 800b808:	6034      	str	r4, [r6, #0]
 800b80a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b810:	6018      	str	r0, [r3, #0]
 800b812:	4628      	mov	r0, r5
 800b814:	b003      	add	sp, #12
 800b816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b818:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b81c:	e7d7      	b.n	800b7ce <__d2b+0x2a>
 800b81e:	6169      	str	r1, [r5, #20]
 800b820:	e7e7      	b.n	800b7f2 <__d2b+0x4e>
 800b822:	a801      	add	r0, sp, #4
 800b824:	f7ff fd64 	bl	800b2f0 <__lo0bits>
 800b828:	9b01      	ldr	r3, [sp, #4]
 800b82a:	2101      	movs	r1, #1
 800b82c:	616b      	str	r3, [r5, #20]
 800b82e:	3020      	adds	r0, #32
 800b830:	e7e5      	b.n	800b7fe <__d2b+0x5a>
 800b832:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b836:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800b83a:	6030      	str	r0, [r6, #0]
 800b83c:	6918      	ldr	r0, [r3, #16]
 800b83e:	f7ff fd37 	bl	800b2b0 <__hi0bits>
 800b842:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b846:	e7e2      	b.n	800b80e <__d2b+0x6a>
 800b848:	0800cc7e 	.word	0x0800cc7e
 800b84c:	0800cc8f 	.word	0x0800cc8f

0800b850 <__ssputs_r>:
 800b850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b854:	461f      	mov	r7, r3
 800b856:	688e      	ldr	r6, [r1, #8]
 800b858:	4682      	mov	sl, r0
 800b85a:	42be      	cmp	r6, r7
 800b85c:	460c      	mov	r4, r1
 800b85e:	4690      	mov	r8, r2
 800b860:	680b      	ldr	r3, [r1, #0]
 800b862:	d82c      	bhi.n	800b8be <__ssputs_r+0x6e>
 800b864:	898a      	ldrh	r2, [r1, #12]
 800b866:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b86a:	d026      	beq.n	800b8ba <__ssputs_r+0x6a>
 800b86c:	6965      	ldr	r5, [r4, #20]
 800b86e:	6909      	ldr	r1, [r1, #16]
 800b870:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b874:	eba3 0901 	sub.w	r9, r3, r1
 800b878:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b87c:	1c7b      	adds	r3, r7, #1
 800b87e:	444b      	add	r3, r9
 800b880:	106d      	asrs	r5, r5, #1
 800b882:	429d      	cmp	r5, r3
 800b884:	bf38      	it	cc
 800b886:	461d      	movcc	r5, r3
 800b888:	0553      	lsls	r3, r2, #21
 800b88a:	d527      	bpl.n	800b8dc <__ssputs_r+0x8c>
 800b88c:	4629      	mov	r1, r5
 800b88e:	f7fd ff15 	bl	80096bc <_malloc_r>
 800b892:	4606      	mov	r6, r0
 800b894:	b360      	cbz	r0, 800b8f0 <__ssputs_r+0xa0>
 800b896:	464a      	mov	r2, r9
 800b898:	6921      	ldr	r1, [r4, #16]
 800b89a:	f000 f9f5 	bl	800bc88 <memcpy>
 800b89e:	89a3      	ldrh	r3, [r4, #12]
 800b8a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b8a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8a8:	81a3      	strh	r3, [r4, #12]
 800b8aa:	6126      	str	r6, [r4, #16]
 800b8ac:	444e      	add	r6, r9
 800b8ae:	6026      	str	r6, [r4, #0]
 800b8b0:	463e      	mov	r6, r7
 800b8b2:	6165      	str	r5, [r4, #20]
 800b8b4:	eba5 0509 	sub.w	r5, r5, r9
 800b8b8:	60a5      	str	r5, [r4, #8]
 800b8ba:	42be      	cmp	r6, r7
 800b8bc:	d900      	bls.n	800b8c0 <__ssputs_r+0x70>
 800b8be:	463e      	mov	r6, r7
 800b8c0:	4632      	mov	r2, r6
 800b8c2:	4641      	mov	r1, r8
 800b8c4:	6820      	ldr	r0, [r4, #0]
 800b8c6:	f000 f9c5 	bl	800bc54 <memmove>
 800b8ca:	2000      	movs	r0, #0
 800b8cc:	68a3      	ldr	r3, [r4, #8]
 800b8ce:	1b9b      	subs	r3, r3, r6
 800b8d0:	60a3      	str	r3, [r4, #8]
 800b8d2:	6823      	ldr	r3, [r4, #0]
 800b8d4:	4433      	add	r3, r6
 800b8d6:	6023      	str	r3, [r4, #0]
 800b8d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8dc:	462a      	mov	r2, r5
 800b8de:	f000 fa25 	bl	800bd2c <_realloc_r>
 800b8e2:	4606      	mov	r6, r0
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	d1e0      	bne.n	800b8aa <__ssputs_r+0x5a>
 800b8e8:	4650      	mov	r0, sl
 800b8ea:	6921      	ldr	r1, [r4, #16]
 800b8ec:	f7ff fbf0 	bl	800b0d0 <_free_r>
 800b8f0:	230c      	movs	r3, #12
 800b8f2:	f8ca 3000 	str.w	r3, [sl]
 800b8f6:	89a3      	ldrh	r3, [r4, #12]
 800b8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b900:	81a3      	strh	r3, [r4, #12]
 800b902:	e7e9      	b.n	800b8d8 <__ssputs_r+0x88>

0800b904 <_svfiprintf_r>:
 800b904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b908:	4698      	mov	r8, r3
 800b90a:	898b      	ldrh	r3, [r1, #12]
 800b90c:	4607      	mov	r7, r0
 800b90e:	061b      	lsls	r3, r3, #24
 800b910:	460d      	mov	r5, r1
 800b912:	4614      	mov	r4, r2
 800b914:	b09d      	sub	sp, #116	; 0x74
 800b916:	d50e      	bpl.n	800b936 <_svfiprintf_r+0x32>
 800b918:	690b      	ldr	r3, [r1, #16]
 800b91a:	b963      	cbnz	r3, 800b936 <_svfiprintf_r+0x32>
 800b91c:	2140      	movs	r1, #64	; 0x40
 800b91e:	f7fd fecd 	bl	80096bc <_malloc_r>
 800b922:	6028      	str	r0, [r5, #0]
 800b924:	6128      	str	r0, [r5, #16]
 800b926:	b920      	cbnz	r0, 800b932 <_svfiprintf_r+0x2e>
 800b928:	230c      	movs	r3, #12
 800b92a:	603b      	str	r3, [r7, #0]
 800b92c:	f04f 30ff 	mov.w	r0, #4294967295
 800b930:	e0d0      	b.n	800bad4 <_svfiprintf_r+0x1d0>
 800b932:	2340      	movs	r3, #64	; 0x40
 800b934:	616b      	str	r3, [r5, #20]
 800b936:	2300      	movs	r3, #0
 800b938:	9309      	str	r3, [sp, #36]	; 0x24
 800b93a:	2320      	movs	r3, #32
 800b93c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b940:	2330      	movs	r3, #48	; 0x30
 800b942:	f04f 0901 	mov.w	r9, #1
 800b946:	f8cd 800c 	str.w	r8, [sp, #12]
 800b94a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800baec <_svfiprintf_r+0x1e8>
 800b94e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b952:	4623      	mov	r3, r4
 800b954:	469a      	mov	sl, r3
 800b956:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b95a:	b10a      	cbz	r2, 800b960 <_svfiprintf_r+0x5c>
 800b95c:	2a25      	cmp	r2, #37	; 0x25
 800b95e:	d1f9      	bne.n	800b954 <_svfiprintf_r+0x50>
 800b960:	ebba 0b04 	subs.w	fp, sl, r4
 800b964:	d00b      	beq.n	800b97e <_svfiprintf_r+0x7a>
 800b966:	465b      	mov	r3, fp
 800b968:	4622      	mov	r2, r4
 800b96a:	4629      	mov	r1, r5
 800b96c:	4638      	mov	r0, r7
 800b96e:	f7ff ff6f 	bl	800b850 <__ssputs_r>
 800b972:	3001      	adds	r0, #1
 800b974:	f000 80a9 	beq.w	800baca <_svfiprintf_r+0x1c6>
 800b978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b97a:	445a      	add	r2, fp
 800b97c:	9209      	str	r2, [sp, #36]	; 0x24
 800b97e:	f89a 3000 	ldrb.w	r3, [sl]
 800b982:	2b00      	cmp	r3, #0
 800b984:	f000 80a1 	beq.w	800baca <_svfiprintf_r+0x1c6>
 800b988:	2300      	movs	r3, #0
 800b98a:	f04f 32ff 	mov.w	r2, #4294967295
 800b98e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b992:	f10a 0a01 	add.w	sl, sl, #1
 800b996:	9304      	str	r3, [sp, #16]
 800b998:	9307      	str	r3, [sp, #28]
 800b99a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b99e:	931a      	str	r3, [sp, #104]	; 0x68
 800b9a0:	4654      	mov	r4, sl
 800b9a2:	2205      	movs	r2, #5
 800b9a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9a8:	4850      	ldr	r0, [pc, #320]	; (800baec <_svfiprintf_r+0x1e8>)
 800b9aa:	f7fe fd13 	bl	800a3d4 <memchr>
 800b9ae:	9a04      	ldr	r2, [sp, #16]
 800b9b0:	b9d8      	cbnz	r0, 800b9ea <_svfiprintf_r+0xe6>
 800b9b2:	06d0      	lsls	r0, r2, #27
 800b9b4:	bf44      	itt	mi
 800b9b6:	2320      	movmi	r3, #32
 800b9b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9bc:	0711      	lsls	r1, r2, #28
 800b9be:	bf44      	itt	mi
 800b9c0:	232b      	movmi	r3, #43	; 0x2b
 800b9c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9c6:	f89a 3000 	ldrb.w	r3, [sl]
 800b9ca:	2b2a      	cmp	r3, #42	; 0x2a
 800b9cc:	d015      	beq.n	800b9fa <_svfiprintf_r+0xf6>
 800b9ce:	4654      	mov	r4, sl
 800b9d0:	2000      	movs	r0, #0
 800b9d2:	f04f 0c0a 	mov.w	ip, #10
 800b9d6:	9a07      	ldr	r2, [sp, #28]
 800b9d8:	4621      	mov	r1, r4
 800b9da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9de:	3b30      	subs	r3, #48	; 0x30
 800b9e0:	2b09      	cmp	r3, #9
 800b9e2:	d94d      	bls.n	800ba80 <_svfiprintf_r+0x17c>
 800b9e4:	b1b0      	cbz	r0, 800ba14 <_svfiprintf_r+0x110>
 800b9e6:	9207      	str	r2, [sp, #28]
 800b9e8:	e014      	b.n	800ba14 <_svfiprintf_r+0x110>
 800b9ea:	eba0 0308 	sub.w	r3, r0, r8
 800b9ee:	fa09 f303 	lsl.w	r3, r9, r3
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	46a2      	mov	sl, r4
 800b9f6:	9304      	str	r3, [sp, #16]
 800b9f8:	e7d2      	b.n	800b9a0 <_svfiprintf_r+0x9c>
 800b9fa:	9b03      	ldr	r3, [sp, #12]
 800b9fc:	1d19      	adds	r1, r3, #4
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	9103      	str	r1, [sp, #12]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	bfbb      	ittet	lt
 800ba06:	425b      	neglt	r3, r3
 800ba08:	f042 0202 	orrlt.w	r2, r2, #2
 800ba0c:	9307      	strge	r3, [sp, #28]
 800ba0e:	9307      	strlt	r3, [sp, #28]
 800ba10:	bfb8      	it	lt
 800ba12:	9204      	strlt	r2, [sp, #16]
 800ba14:	7823      	ldrb	r3, [r4, #0]
 800ba16:	2b2e      	cmp	r3, #46	; 0x2e
 800ba18:	d10c      	bne.n	800ba34 <_svfiprintf_r+0x130>
 800ba1a:	7863      	ldrb	r3, [r4, #1]
 800ba1c:	2b2a      	cmp	r3, #42	; 0x2a
 800ba1e:	d134      	bne.n	800ba8a <_svfiprintf_r+0x186>
 800ba20:	9b03      	ldr	r3, [sp, #12]
 800ba22:	3402      	adds	r4, #2
 800ba24:	1d1a      	adds	r2, r3, #4
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	9203      	str	r2, [sp, #12]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	bfb8      	it	lt
 800ba2e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba32:	9305      	str	r3, [sp, #20]
 800ba34:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800baf0 <_svfiprintf_r+0x1ec>
 800ba38:	2203      	movs	r2, #3
 800ba3a:	4650      	mov	r0, sl
 800ba3c:	7821      	ldrb	r1, [r4, #0]
 800ba3e:	f7fe fcc9 	bl	800a3d4 <memchr>
 800ba42:	b138      	cbz	r0, 800ba54 <_svfiprintf_r+0x150>
 800ba44:	2240      	movs	r2, #64	; 0x40
 800ba46:	9b04      	ldr	r3, [sp, #16]
 800ba48:	eba0 000a 	sub.w	r0, r0, sl
 800ba4c:	4082      	lsls	r2, r0
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	3401      	adds	r4, #1
 800ba52:	9304      	str	r3, [sp, #16]
 800ba54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba58:	2206      	movs	r2, #6
 800ba5a:	4826      	ldr	r0, [pc, #152]	; (800baf4 <_svfiprintf_r+0x1f0>)
 800ba5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba60:	f7fe fcb8 	bl	800a3d4 <memchr>
 800ba64:	2800      	cmp	r0, #0
 800ba66:	d038      	beq.n	800bada <_svfiprintf_r+0x1d6>
 800ba68:	4b23      	ldr	r3, [pc, #140]	; (800baf8 <_svfiprintf_r+0x1f4>)
 800ba6a:	bb1b      	cbnz	r3, 800bab4 <_svfiprintf_r+0x1b0>
 800ba6c:	9b03      	ldr	r3, [sp, #12]
 800ba6e:	3307      	adds	r3, #7
 800ba70:	f023 0307 	bic.w	r3, r3, #7
 800ba74:	3308      	adds	r3, #8
 800ba76:	9303      	str	r3, [sp, #12]
 800ba78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba7a:	4433      	add	r3, r6
 800ba7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ba7e:	e768      	b.n	800b952 <_svfiprintf_r+0x4e>
 800ba80:	460c      	mov	r4, r1
 800ba82:	2001      	movs	r0, #1
 800ba84:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba88:	e7a6      	b.n	800b9d8 <_svfiprintf_r+0xd4>
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	f04f 0c0a 	mov.w	ip, #10
 800ba90:	4619      	mov	r1, r3
 800ba92:	3401      	adds	r4, #1
 800ba94:	9305      	str	r3, [sp, #20]
 800ba96:	4620      	mov	r0, r4
 800ba98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba9c:	3a30      	subs	r2, #48	; 0x30
 800ba9e:	2a09      	cmp	r2, #9
 800baa0:	d903      	bls.n	800baaa <_svfiprintf_r+0x1a6>
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d0c6      	beq.n	800ba34 <_svfiprintf_r+0x130>
 800baa6:	9105      	str	r1, [sp, #20]
 800baa8:	e7c4      	b.n	800ba34 <_svfiprintf_r+0x130>
 800baaa:	4604      	mov	r4, r0
 800baac:	2301      	movs	r3, #1
 800baae:	fb0c 2101 	mla	r1, ip, r1, r2
 800bab2:	e7f0      	b.n	800ba96 <_svfiprintf_r+0x192>
 800bab4:	ab03      	add	r3, sp, #12
 800bab6:	9300      	str	r3, [sp, #0]
 800bab8:	462a      	mov	r2, r5
 800baba:	4638      	mov	r0, r7
 800babc:	4b0f      	ldr	r3, [pc, #60]	; (800bafc <_svfiprintf_r+0x1f8>)
 800babe:	a904      	add	r1, sp, #16
 800bac0:	f7fd ff24 	bl	800990c <_printf_float>
 800bac4:	1c42      	adds	r2, r0, #1
 800bac6:	4606      	mov	r6, r0
 800bac8:	d1d6      	bne.n	800ba78 <_svfiprintf_r+0x174>
 800baca:	89ab      	ldrh	r3, [r5, #12]
 800bacc:	065b      	lsls	r3, r3, #25
 800bace:	f53f af2d 	bmi.w	800b92c <_svfiprintf_r+0x28>
 800bad2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bad4:	b01d      	add	sp, #116	; 0x74
 800bad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bada:	ab03      	add	r3, sp, #12
 800badc:	9300      	str	r3, [sp, #0]
 800bade:	462a      	mov	r2, r5
 800bae0:	4638      	mov	r0, r7
 800bae2:	4b06      	ldr	r3, [pc, #24]	; (800bafc <_svfiprintf_r+0x1f8>)
 800bae4:	a904      	add	r1, sp, #16
 800bae6:	f7fe f9b1 	bl	8009e4c <_printf_i>
 800baea:	e7eb      	b.n	800bac4 <_svfiprintf_r+0x1c0>
 800baec:	0800cde4 	.word	0x0800cde4
 800baf0:	0800cdea 	.word	0x0800cdea
 800baf4:	0800cdee 	.word	0x0800cdee
 800baf8:	0800990d 	.word	0x0800990d
 800bafc:	0800b851 	.word	0x0800b851

0800bb00 <__sflush_r>:
 800bb00:	898a      	ldrh	r2, [r1, #12]
 800bb02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb04:	4605      	mov	r5, r0
 800bb06:	0710      	lsls	r0, r2, #28
 800bb08:	460c      	mov	r4, r1
 800bb0a:	d457      	bmi.n	800bbbc <__sflush_r+0xbc>
 800bb0c:	684b      	ldr	r3, [r1, #4]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	dc04      	bgt.n	800bb1c <__sflush_r+0x1c>
 800bb12:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	dc01      	bgt.n	800bb1c <__sflush_r+0x1c>
 800bb18:	2000      	movs	r0, #0
 800bb1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb1e:	2e00      	cmp	r6, #0
 800bb20:	d0fa      	beq.n	800bb18 <__sflush_r+0x18>
 800bb22:	2300      	movs	r3, #0
 800bb24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bb28:	682f      	ldr	r7, [r5, #0]
 800bb2a:	6a21      	ldr	r1, [r4, #32]
 800bb2c:	602b      	str	r3, [r5, #0]
 800bb2e:	d032      	beq.n	800bb96 <__sflush_r+0x96>
 800bb30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bb32:	89a3      	ldrh	r3, [r4, #12]
 800bb34:	075a      	lsls	r2, r3, #29
 800bb36:	d505      	bpl.n	800bb44 <__sflush_r+0x44>
 800bb38:	6863      	ldr	r3, [r4, #4]
 800bb3a:	1ac0      	subs	r0, r0, r3
 800bb3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb3e:	b10b      	cbz	r3, 800bb44 <__sflush_r+0x44>
 800bb40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb42:	1ac0      	subs	r0, r0, r3
 800bb44:	2300      	movs	r3, #0
 800bb46:	4602      	mov	r2, r0
 800bb48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb4a:	4628      	mov	r0, r5
 800bb4c:	6a21      	ldr	r1, [r4, #32]
 800bb4e:	47b0      	blx	r6
 800bb50:	1c43      	adds	r3, r0, #1
 800bb52:	89a3      	ldrh	r3, [r4, #12]
 800bb54:	d106      	bne.n	800bb64 <__sflush_r+0x64>
 800bb56:	6829      	ldr	r1, [r5, #0]
 800bb58:	291d      	cmp	r1, #29
 800bb5a:	d82b      	bhi.n	800bbb4 <__sflush_r+0xb4>
 800bb5c:	4a28      	ldr	r2, [pc, #160]	; (800bc00 <__sflush_r+0x100>)
 800bb5e:	410a      	asrs	r2, r1
 800bb60:	07d6      	lsls	r6, r2, #31
 800bb62:	d427      	bmi.n	800bbb4 <__sflush_r+0xb4>
 800bb64:	2200      	movs	r2, #0
 800bb66:	6062      	str	r2, [r4, #4]
 800bb68:	6922      	ldr	r2, [r4, #16]
 800bb6a:	04d9      	lsls	r1, r3, #19
 800bb6c:	6022      	str	r2, [r4, #0]
 800bb6e:	d504      	bpl.n	800bb7a <__sflush_r+0x7a>
 800bb70:	1c42      	adds	r2, r0, #1
 800bb72:	d101      	bne.n	800bb78 <__sflush_r+0x78>
 800bb74:	682b      	ldr	r3, [r5, #0]
 800bb76:	b903      	cbnz	r3, 800bb7a <__sflush_r+0x7a>
 800bb78:	6560      	str	r0, [r4, #84]	; 0x54
 800bb7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb7c:	602f      	str	r7, [r5, #0]
 800bb7e:	2900      	cmp	r1, #0
 800bb80:	d0ca      	beq.n	800bb18 <__sflush_r+0x18>
 800bb82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb86:	4299      	cmp	r1, r3
 800bb88:	d002      	beq.n	800bb90 <__sflush_r+0x90>
 800bb8a:	4628      	mov	r0, r5
 800bb8c:	f7ff faa0 	bl	800b0d0 <_free_r>
 800bb90:	2000      	movs	r0, #0
 800bb92:	6360      	str	r0, [r4, #52]	; 0x34
 800bb94:	e7c1      	b.n	800bb1a <__sflush_r+0x1a>
 800bb96:	2301      	movs	r3, #1
 800bb98:	4628      	mov	r0, r5
 800bb9a:	47b0      	blx	r6
 800bb9c:	1c41      	adds	r1, r0, #1
 800bb9e:	d1c8      	bne.n	800bb32 <__sflush_r+0x32>
 800bba0:	682b      	ldr	r3, [r5, #0]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d0c5      	beq.n	800bb32 <__sflush_r+0x32>
 800bba6:	2b1d      	cmp	r3, #29
 800bba8:	d001      	beq.n	800bbae <__sflush_r+0xae>
 800bbaa:	2b16      	cmp	r3, #22
 800bbac:	d101      	bne.n	800bbb2 <__sflush_r+0xb2>
 800bbae:	602f      	str	r7, [r5, #0]
 800bbb0:	e7b2      	b.n	800bb18 <__sflush_r+0x18>
 800bbb2:	89a3      	ldrh	r3, [r4, #12]
 800bbb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbb8:	81a3      	strh	r3, [r4, #12]
 800bbba:	e7ae      	b.n	800bb1a <__sflush_r+0x1a>
 800bbbc:	690f      	ldr	r7, [r1, #16]
 800bbbe:	2f00      	cmp	r7, #0
 800bbc0:	d0aa      	beq.n	800bb18 <__sflush_r+0x18>
 800bbc2:	0793      	lsls	r3, r2, #30
 800bbc4:	bf18      	it	ne
 800bbc6:	2300      	movne	r3, #0
 800bbc8:	680e      	ldr	r6, [r1, #0]
 800bbca:	bf08      	it	eq
 800bbcc:	694b      	ldreq	r3, [r1, #20]
 800bbce:	1bf6      	subs	r6, r6, r7
 800bbd0:	600f      	str	r7, [r1, #0]
 800bbd2:	608b      	str	r3, [r1, #8]
 800bbd4:	2e00      	cmp	r6, #0
 800bbd6:	dd9f      	ble.n	800bb18 <__sflush_r+0x18>
 800bbd8:	4633      	mov	r3, r6
 800bbda:	463a      	mov	r2, r7
 800bbdc:	4628      	mov	r0, r5
 800bbde:	6a21      	ldr	r1, [r4, #32]
 800bbe0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800bbe4:	47e0      	blx	ip
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	dc06      	bgt.n	800bbf8 <__sflush_r+0xf8>
 800bbea:	89a3      	ldrh	r3, [r4, #12]
 800bbec:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbf4:	81a3      	strh	r3, [r4, #12]
 800bbf6:	e790      	b.n	800bb1a <__sflush_r+0x1a>
 800bbf8:	4407      	add	r7, r0
 800bbfa:	1a36      	subs	r6, r6, r0
 800bbfc:	e7ea      	b.n	800bbd4 <__sflush_r+0xd4>
 800bbfe:	bf00      	nop
 800bc00:	dfbffffe 	.word	0xdfbffffe

0800bc04 <_fflush_r>:
 800bc04:	b538      	push	{r3, r4, r5, lr}
 800bc06:	690b      	ldr	r3, [r1, #16]
 800bc08:	4605      	mov	r5, r0
 800bc0a:	460c      	mov	r4, r1
 800bc0c:	b913      	cbnz	r3, 800bc14 <_fflush_r+0x10>
 800bc0e:	2500      	movs	r5, #0
 800bc10:	4628      	mov	r0, r5
 800bc12:	bd38      	pop	{r3, r4, r5, pc}
 800bc14:	b118      	cbz	r0, 800bc1e <_fflush_r+0x1a>
 800bc16:	6a03      	ldr	r3, [r0, #32]
 800bc18:	b90b      	cbnz	r3, 800bc1e <_fflush_r+0x1a>
 800bc1a:	f7fe fab3 	bl	800a184 <__sinit>
 800bc1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d0f3      	beq.n	800bc0e <_fflush_r+0xa>
 800bc26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc28:	07d0      	lsls	r0, r2, #31
 800bc2a:	d404      	bmi.n	800bc36 <_fflush_r+0x32>
 800bc2c:	0599      	lsls	r1, r3, #22
 800bc2e:	d402      	bmi.n	800bc36 <_fflush_r+0x32>
 800bc30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc32:	f7fe fbcd 	bl	800a3d0 <__retarget_lock_acquire_recursive>
 800bc36:	4628      	mov	r0, r5
 800bc38:	4621      	mov	r1, r4
 800bc3a:	f7ff ff61 	bl	800bb00 <__sflush_r>
 800bc3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc40:	4605      	mov	r5, r0
 800bc42:	07da      	lsls	r2, r3, #31
 800bc44:	d4e4      	bmi.n	800bc10 <_fflush_r+0xc>
 800bc46:	89a3      	ldrh	r3, [r4, #12]
 800bc48:	059b      	lsls	r3, r3, #22
 800bc4a:	d4e1      	bmi.n	800bc10 <_fflush_r+0xc>
 800bc4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc4e:	f7fe fbc0 	bl	800a3d2 <__retarget_lock_release_recursive>
 800bc52:	e7dd      	b.n	800bc10 <_fflush_r+0xc>

0800bc54 <memmove>:
 800bc54:	4288      	cmp	r0, r1
 800bc56:	b510      	push	{r4, lr}
 800bc58:	eb01 0402 	add.w	r4, r1, r2
 800bc5c:	d902      	bls.n	800bc64 <memmove+0x10>
 800bc5e:	4284      	cmp	r4, r0
 800bc60:	4623      	mov	r3, r4
 800bc62:	d807      	bhi.n	800bc74 <memmove+0x20>
 800bc64:	1e43      	subs	r3, r0, #1
 800bc66:	42a1      	cmp	r1, r4
 800bc68:	d008      	beq.n	800bc7c <memmove+0x28>
 800bc6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc72:	e7f8      	b.n	800bc66 <memmove+0x12>
 800bc74:	4601      	mov	r1, r0
 800bc76:	4402      	add	r2, r0
 800bc78:	428a      	cmp	r2, r1
 800bc7a:	d100      	bne.n	800bc7e <memmove+0x2a>
 800bc7c:	bd10      	pop	{r4, pc}
 800bc7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc86:	e7f7      	b.n	800bc78 <memmove+0x24>

0800bc88 <memcpy>:
 800bc88:	440a      	add	r2, r1
 800bc8a:	4291      	cmp	r1, r2
 800bc8c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc90:	d100      	bne.n	800bc94 <memcpy+0xc>
 800bc92:	4770      	bx	lr
 800bc94:	b510      	push	{r4, lr}
 800bc96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc9a:	4291      	cmp	r1, r2
 800bc9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bca0:	d1f9      	bne.n	800bc96 <memcpy+0xe>
 800bca2:	bd10      	pop	{r4, pc}

0800bca4 <__assert_func>:
 800bca4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bca6:	4614      	mov	r4, r2
 800bca8:	461a      	mov	r2, r3
 800bcaa:	4b09      	ldr	r3, [pc, #36]	; (800bcd0 <__assert_func+0x2c>)
 800bcac:	4605      	mov	r5, r0
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	68d8      	ldr	r0, [r3, #12]
 800bcb2:	b14c      	cbz	r4, 800bcc8 <__assert_func+0x24>
 800bcb4:	4b07      	ldr	r3, [pc, #28]	; (800bcd4 <__assert_func+0x30>)
 800bcb6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bcba:	9100      	str	r1, [sp, #0]
 800bcbc:	462b      	mov	r3, r5
 800bcbe:	4906      	ldr	r1, [pc, #24]	; (800bcd8 <__assert_func+0x34>)
 800bcc0:	f000 f870 	bl	800bda4 <fiprintf>
 800bcc4:	f000 f880 	bl	800bdc8 <abort>
 800bcc8:	4b04      	ldr	r3, [pc, #16]	; (800bcdc <__assert_func+0x38>)
 800bcca:	461c      	mov	r4, r3
 800bccc:	e7f3      	b.n	800bcb6 <__assert_func+0x12>
 800bcce:	bf00      	nop
 800bcd0:	200002dc 	.word	0x200002dc
 800bcd4:	0800cdff 	.word	0x0800cdff
 800bcd8:	0800ce0c 	.word	0x0800ce0c
 800bcdc:	0800ce3a 	.word	0x0800ce3a

0800bce0 <_calloc_r>:
 800bce0:	b570      	push	{r4, r5, r6, lr}
 800bce2:	fba1 5402 	umull	r5, r4, r1, r2
 800bce6:	b934      	cbnz	r4, 800bcf6 <_calloc_r+0x16>
 800bce8:	4629      	mov	r1, r5
 800bcea:	f7fd fce7 	bl	80096bc <_malloc_r>
 800bcee:	4606      	mov	r6, r0
 800bcf0:	b928      	cbnz	r0, 800bcfe <_calloc_r+0x1e>
 800bcf2:	4630      	mov	r0, r6
 800bcf4:	bd70      	pop	{r4, r5, r6, pc}
 800bcf6:	220c      	movs	r2, #12
 800bcf8:	2600      	movs	r6, #0
 800bcfa:	6002      	str	r2, [r0, #0]
 800bcfc:	e7f9      	b.n	800bcf2 <_calloc_r+0x12>
 800bcfe:	462a      	mov	r2, r5
 800bd00:	4621      	mov	r1, r4
 800bd02:	f7fe fad8 	bl	800a2b6 <memset>
 800bd06:	e7f4      	b.n	800bcf2 <_calloc_r+0x12>

0800bd08 <__ascii_mbtowc>:
 800bd08:	b082      	sub	sp, #8
 800bd0a:	b901      	cbnz	r1, 800bd0e <__ascii_mbtowc+0x6>
 800bd0c:	a901      	add	r1, sp, #4
 800bd0e:	b142      	cbz	r2, 800bd22 <__ascii_mbtowc+0x1a>
 800bd10:	b14b      	cbz	r3, 800bd26 <__ascii_mbtowc+0x1e>
 800bd12:	7813      	ldrb	r3, [r2, #0]
 800bd14:	600b      	str	r3, [r1, #0]
 800bd16:	7812      	ldrb	r2, [r2, #0]
 800bd18:	1e10      	subs	r0, r2, #0
 800bd1a:	bf18      	it	ne
 800bd1c:	2001      	movne	r0, #1
 800bd1e:	b002      	add	sp, #8
 800bd20:	4770      	bx	lr
 800bd22:	4610      	mov	r0, r2
 800bd24:	e7fb      	b.n	800bd1e <__ascii_mbtowc+0x16>
 800bd26:	f06f 0001 	mvn.w	r0, #1
 800bd2a:	e7f8      	b.n	800bd1e <__ascii_mbtowc+0x16>

0800bd2c <_realloc_r>:
 800bd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd30:	4680      	mov	r8, r0
 800bd32:	4614      	mov	r4, r2
 800bd34:	460e      	mov	r6, r1
 800bd36:	b921      	cbnz	r1, 800bd42 <_realloc_r+0x16>
 800bd38:	4611      	mov	r1, r2
 800bd3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd3e:	f7fd bcbd 	b.w	80096bc <_malloc_r>
 800bd42:	b92a      	cbnz	r2, 800bd50 <_realloc_r+0x24>
 800bd44:	f7ff f9c4 	bl	800b0d0 <_free_r>
 800bd48:	4625      	mov	r5, r4
 800bd4a:	4628      	mov	r0, r5
 800bd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd50:	f000 f841 	bl	800bdd6 <_malloc_usable_size_r>
 800bd54:	4284      	cmp	r4, r0
 800bd56:	4607      	mov	r7, r0
 800bd58:	d802      	bhi.n	800bd60 <_realloc_r+0x34>
 800bd5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bd5e:	d812      	bhi.n	800bd86 <_realloc_r+0x5a>
 800bd60:	4621      	mov	r1, r4
 800bd62:	4640      	mov	r0, r8
 800bd64:	f7fd fcaa 	bl	80096bc <_malloc_r>
 800bd68:	4605      	mov	r5, r0
 800bd6a:	2800      	cmp	r0, #0
 800bd6c:	d0ed      	beq.n	800bd4a <_realloc_r+0x1e>
 800bd6e:	42bc      	cmp	r4, r7
 800bd70:	4622      	mov	r2, r4
 800bd72:	4631      	mov	r1, r6
 800bd74:	bf28      	it	cs
 800bd76:	463a      	movcs	r2, r7
 800bd78:	f7ff ff86 	bl	800bc88 <memcpy>
 800bd7c:	4631      	mov	r1, r6
 800bd7e:	4640      	mov	r0, r8
 800bd80:	f7ff f9a6 	bl	800b0d0 <_free_r>
 800bd84:	e7e1      	b.n	800bd4a <_realloc_r+0x1e>
 800bd86:	4635      	mov	r5, r6
 800bd88:	e7df      	b.n	800bd4a <_realloc_r+0x1e>

0800bd8a <__ascii_wctomb>:
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	4608      	mov	r0, r1
 800bd8e:	b141      	cbz	r1, 800bda2 <__ascii_wctomb+0x18>
 800bd90:	2aff      	cmp	r2, #255	; 0xff
 800bd92:	d904      	bls.n	800bd9e <__ascii_wctomb+0x14>
 800bd94:	228a      	movs	r2, #138	; 0x8a
 800bd96:	f04f 30ff 	mov.w	r0, #4294967295
 800bd9a:	601a      	str	r2, [r3, #0]
 800bd9c:	4770      	bx	lr
 800bd9e:	2001      	movs	r0, #1
 800bda0:	700a      	strb	r2, [r1, #0]
 800bda2:	4770      	bx	lr

0800bda4 <fiprintf>:
 800bda4:	b40e      	push	{r1, r2, r3}
 800bda6:	b503      	push	{r0, r1, lr}
 800bda8:	4601      	mov	r1, r0
 800bdaa:	ab03      	add	r3, sp, #12
 800bdac:	4805      	ldr	r0, [pc, #20]	; (800bdc4 <fiprintf+0x20>)
 800bdae:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdb2:	6800      	ldr	r0, [r0, #0]
 800bdb4:	9301      	str	r3, [sp, #4]
 800bdb6:	f000 f83d 	bl	800be34 <_vfiprintf_r>
 800bdba:	b002      	add	sp, #8
 800bdbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdc0:	b003      	add	sp, #12
 800bdc2:	4770      	bx	lr
 800bdc4:	200002dc 	.word	0x200002dc

0800bdc8 <abort>:
 800bdc8:	2006      	movs	r0, #6
 800bdca:	b508      	push	{r3, lr}
 800bdcc:	f000 fa0a 	bl	800c1e4 <raise>
 800bdd0:	2001      	movs	r0, #1
 800bdd2:	f7f5 f8a9 	bl	8000f28 <_exit>

0800bdd6 <_malloc_usable_size_r>:
 800bdd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdda:	1f18      	subs	r0, r3, #4
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	bfbc      	itt	lt
 800bde0:	580b      	ldrlt	r3, [r1, r0]
 800bde2:	18c0      	addlt	r0, r0, r3
 800bde4:	4770      	bx	lr

0800bde6 <__sfputc_r>:
 800bde6:	6893      	ldr	r3, [r2, #8]
 800bde8:	b410      	push	{r4}
 800bdea:	3b01      	subs	r3, #1
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	6093      	str	r3, [r2, #8]
 800bdf0:	da07      	bge.n	800be02 <__sfputc_r+0x1c>
 800bdf2:	6994      	ldr	r4, [r2, #24]
 800bdf4:	42a3      	cmp	r3, r4
 800bdf6:	db01      	blt.n	800bdfc <__sfputc_r+0x16>
 800bdf8:	290a      	cmp	r1, #10
 800bdfa:	d102      	bne.n	800be02 <__sfputc_r+0x1c>
 800bdfc:	bc10      	pop	{r4}
 800bdfe:	f000 b933 	b.w	800c068 <__swbuf_r>
 800be02:	6813      	ldr	r3, [r2, #0]
 800be04:	1c58      	adds	r0, r3, #1
 800be06:	6010      	str	r0, [r2, #0]
 800be08:	7019      	strb	r1, [r3, #0]
 800be0a:	4608      	mov	r0, r1
 800be0c:	bc10      	pop	{r4}
 800be0e:	4770      	bx	lr

0800be10 <__sfputs_r>:
 800be10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be12:	4606      	mov	r6, r0
 800be14:	460f      	mov	r7, r1
 800be16:	4614      	mov	r4, r2
 800be18:	18d5      	adds	r5, r2, r3
 800be1a:	42ac      	cmp	r4, r5
 800be1c:	d101      	bne.n	800be22 <__sfputs_r+0x12>
 800be1e:	2000      	movs	r0, #0
 800be20:	e007      	b.n	800be32 <__sfputs_r+0x22>
 800be22:	463a      	mov	r2, r7
 800be24:	4630      	mov	r0, r6
 800be26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be2a:	f7ff ffdc 	bl	800bde6 <__sfputc_r>
 800be2e:	1c43      	adds	r3, r0, #1
 800be30:	d1f3      	bne.n	800be1a <__sfputs_r+0xa>
 800be32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800be34 <_vfiprintf_r>:
 800be34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be38:	460d      	mov	r5, r1
 800be3a:	4614      	mov	r4, r2
 800be3c:	4698      	mov	r8, r3
 800be3e:	4606      	mov	r6, r0
 800be40:	b09d      	sub	sp, #116	; 0x74
 800be42:	b118      	cbz	r0, 800be4c <_vfiprintf_r+0x18>
 800be44:	6a03      	ldr	r3, [r0, #32]
 800be46:	b90b      	cbnz	r3, 800be4c <_vfiprintf_r+0x18>
 800be48:	f7fe f99c 	bl	800a184 <__sinit>
 800be4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be4e:	07d9      	lsls	r1, r3, #31
 800be50:	d405      	bmi.n	800be5e <_vfiprintf_r+0x2a>
 800be52:	89ab      	ldrh	r3, [r5, #12]
 800be54:	059a      	lsls	r2, r3, #22
 800be56:	d402      	bmi.n	800be5e <_vfiprintf_r+0x2a>
 800be58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be5a:	f7fe fab9 	bl	800a3d0 <__retarget_lock_acquire_recursive>
 800be5e:	89ab      	ldrh	r3, [r5, #12]
 800be60:	071b      	lsls	r3, r3, #28
 800be62:	d501      	bpl.n	800be68 <_vfiprintf_r+0x34>
 800be64:	692b      	ldr	r3, [r5, #16]
 800be66:	b99b      	cbnz	r3, 800be90 <_vfiprintf_r+0x5c>
 800be68:	4629      	mov	r1, r5
 800be6a:	4630      	mov	r0, r6
 800be6c:	f000 f93a 	bl	800c0e4 <__swsetup_r>
 800be70:	b170      	cbz	r0, 800be90 <_vfiprintf_r+0x5c>
 800be72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be74:	07dc      	lsls	r4, r3, #31
 800be76:	d504      	bpl.n	800be82 <_vfiprintf_r+0x4e>
 800be78:	f04f 30ff 	mov.w	r0, #4294967295
 800be7c:	b01d      	add	sp, #116	; 0x74
 800be7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be82:	89ab      	ldrh	r3, [r5, #12]
 800be84:	0598      	lsls	r0, r3, #22
 800be86:	d4f7      	bmi.n	800be78 <_vfiprintf_r+0x44>
 800be88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be8a:	f7fe faa2 	bl	800a3d2 <__retarget_lock_release_recursive>
 800be8e:	e7f3      	b.n	800be78 <_vfiprintf_r+0x44>
 800be90:	2300      	movs	r3, #0
 800be92:	9309      	str	r3, [sp, #36]	; 0x24
 800be94:	2320      	movs	r3, #32
 800be96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be9a:	2330      	movs	r3, #48	; 0x30
 800be9c:	f04f 0901 	mov.w	r9, #1
 800bea0:	f8cd 800c 	str.w	r8, [sp, #12]
 800bea4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800c054 <_vfiprintf_r+0x220>
 800bea8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800beac:	4623      	mov	r3, r4
 800beae:	469a      	mov	sl, r3
 800beb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800beb4:	b10a      	cbz	r2, 800beba <_vfiprintf_r+0x86>
 800beb6:	2a25      	cmp	r2, #37	; 0x25
 800beb8:	d1f9      	bne.n	800beae <_vfiprintf_r+0x7a>
 800beba:	ebba 0b04 	subs.w	fp, sl, r4
 800bebe:	d00b      	beq.n	800bed8 <_vfiprintf_r+0xa4>
 800bec0:	465b      	mov	r3, fp
 800bec2:	4622      	mov	r2, r4
 800bec4:	4629      	mov	r1, r5
 800bec6:	4630      	mov	r0, r6
 800bec8:	f7ff ffa2 	bl	800be10 <__sfputs_r>
 800becc:	3001      	adds	r0, #1
 800bece:	f000 80a9 	beq.w	800c024 <_vfiprintf_r+0x1f0>
 800bed2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bed4:	445a      	add	r2, fp
 800bed6:	9209      	str	r2, [sp, #36]	; 0x24
 800bed8:	f89a 3000 	ldrb.w	r3, [sl]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	f000 80a1 	beq.w	800c024 <_vfiprintf_r+0x1f0>
 800bee2:	2300      	movs	r3, #0
 800bee4:	f04f 32ff 	mov.w	r2, #4294967295
 800bee8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800beec:	f10a 0a01 	add.w	sl, sl, #1
 800bef0:	9304      	str	r3, [sp, #16]
 800bef2:	9307      	str	r3, [sp, #28]
 800bef4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bef8:	931a      	str	r3, [sp, #104]	; 0x68
 800befa:	4654      	mov	r4, sl
 800befc:	2205      	movs	r2, #5
 800befe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf02:	4854      	ldr	r0, [pc, #336]	; (800c054 <_vfiprintf_r+0x220>)
 800bf04:	f7fe fa66 	bl	800a3d4 <memchr>
 800bf08:	9a04      	ldr	r2, [sp, #16]
 800bf0a:	b9d8      	cbnz	r0, 800bf44 <_vfiprintf_r+0x110>
 800bf0c:	06d1      	lsls	r1, r2, #27
 800bf0e:	bf44      	itt	mi
 800bf10:	2320      	movmi	r3, #32
 800bf12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf16:	0713      	lsls	r3, r2, #28
 800bf18:	bf44      	itt	mi
 800bf1a:	232b      	movmi	r3, #43	; 0x2b
 800bf1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf20:	f89a 3000 	ldrb.w	r3, [sl]
 800bf24:	2b2a      	cmp	r3, #42	; 0x2a
 800bf26:	d015      	beq.n	800bf54 <_vfiprintf_r+0x120>
 800bf28:	4654      	mov	r4, sl
 800bf2a:	2000      	movs	r0, #0
 800bf2c:	f04f 0c0a 	mov.w	ip, #10
 800bf30:	9a07      	ldr	r2, [sp, #28]
 800bf32:	4621      	mov	r1, r4
 800bf34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf38:	3b30      	subs	r3, #48	; 0x30
 800bf3a:	2b09      	cmp	r3, #9
 800bf3c:	d94d      	bls.n	800bfda <_vfiprintf_r+0x1a6>
 800bf3e:	b1b0      	cbz	r0, 800bf6e <_vfiprintf_r+0x13a>
 800bf40:	9207      	str	r2, [sp, #28]
 800bf42:	e014      	b.n	800bf6e <_vfiprintf_r+0x13a>
 800bf44:	eba0 0308 	sub.w	r3, r0, r8
 800bf48:	fa09 f303 	lsl.w	r3, r9, r3
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	46a2      	mov	sl, r4
 800bf50:	9304      	str	r3, [sp, #16]
 800bf52:	e7d2      	b.n	800befa <_vfiprintf_r+0xc6>
 800bf54:	9b03      	ldr	r3, [sp, #12]
 800bf56:	1d19      	adds	r1, r3, #4
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	9103      	str	r1, [sp, #12]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	bfbb      	ittet	lt
 800bf60:	425b      	neglt	r3, r3
 800bf62:	f042 0202 	orrlt.w	r2, r2, #2
 800bf66:	9307      	strge	r3, [sp, #28]
 800bf68:	9307      	strlt	r3, [sp, #28]
 800bf6a:	bfb8      	it	lt
 800bf6c:	9204      	strlt	r2, [sp, #16]
 800bf6e:	7823      	ldrb	r3, [r4, #0]
 800bf70:	2b2e      	cmp	r3, #46	; 0x2e
 800bf72:	d10c      	bne.n	800bf8e <_vfiprintf_r+0x15a>
 800bf74:	7863      	ldrb	r3, [r4, #1]
 800bf76:	2b2a      	cmp	r3, #42	; 0x2a
 800bf78:	d134      	bne.n	800bfe4 <_vfiprintf_r+0x1b0>
 800bf7a:	9b03      	ldr	r3, [sp, #12]
 800bf7c:	3402      	adds	r4, #2
 800bf7e:	1d1a      	adds	r2, r3, #4
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	9203      	str	r2, [sp, #12]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	bfb8      	it	lt
 800bf88:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf8c:	9305      	str	r3, [sp, #20]
 800bf8e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c058 <_vfiprintf_r+0x224>
 800bf92:	2203      	movs	r2, #3
 800bf94:	4650      	mov	r0, sl
 800bf96:	7821      	ldrb	r1, [r4, #0]
 800bf98:	f7fe fa1c 	bl	800a3d4 <memchr>
 800bf9c:	b138      	cbz	r0, 800bfae <_vfiprintf_r+0x17a>
 800bf9e:	2240      	movs	r2, #64	; 0x40
 800bfa0:	9b04      	ldr	r3, [sp, #16]
 800bfa2:	eba0 000a 	sub.w	r0, r0, sl
 800bfa6:	4082      	lsls	r2, r0
 800bfa8:	4313      	orrs	r3, r2
 800bfaa:	3401      	adds	r4, #1
 800bfac:	9304      	str	r3, [sp, #16]
 800bfae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfb2:	2206      	movs	r2, #6
 800bfb4:	4829      	ldr	r0, [pc, #164]	; (800c05c <_vfiprintf_r+0x228>)
 800bfb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bfba:	f7fe fa0b 	bl	800a3d4 <memchr>
 800bfbe:	2800      	cmp	r0, #0
 800bfc0:	d03f      	beq.n	800c042 <_vfiprintf_r+0x20e>
 800bfc2:	4b27      	ldr	r3, [pc, #156]	; (800c060 <_vfiprintf_r+0x22c>)
 800bfc4:	bb1b      	cbnz	r3, 800c00e <_vfiprintf_r+0x1da>
 800bfc6:	9b03      	ldr	r3, [sp, #12]
 800bfc8:	3307      	adds	r3, #7
 800bfca:	f023 0307 	bic.w	r3, r3, #7
 800bfce:	3308      	adds	r3, #8
 800bfd0:	9303      	str	r3, [sp, #12]
 800bfd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfd4:	443b      	add	r3, r7
 800bfd6:	9309      	str	r3, [sp, #36]	; 0x24
 800bfd8:	e768      	b.n	800beac <_vfiprintf_r+0x78>
 800bfda:	460c      	mov	r4, r1
 800bfdc:	2001      	movs	r0, #1
 800bfde:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfe2:	e7a6      	b.n	800bf32 <_vfiprintf_r+0xfe>
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	f04f 0c0a 	mov.w	ip, #10
 800bfea:	4619      	mov	r1, r3
 800bfec:	3401      	adds	r4, #1
 800bfee:	9305      	str	r3, [sp, #20]
 800bff0:	4620      	mov	r0, r4
 800bff2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bff6:	3a30      	subs	r2, #48	; 0x30
 800bff8:	2a09      	cmp	r2, #9
 800bffa:	d903      	bls.n	800c004 <_vfiprintf_r+0x1d0>
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d0c6      	beq.n	800bf8e <_vfiprintf_r+0x15a>
 800c000:	9105      	str	r1, [sp, #20]
 800c002:	e7c4      	b.n	800bf8e <_vfiprintf_r+0x15a>
 800c004:	4604      	mov	r4, r0
 800c006:	2301      	movs	r3, #1
 800c008:	fb0c 2101 	mla	r1, ip, r1, r2
 800c00c:	e7f0      	b.n	800bff0 <_vfiprintf_r+0x1bc>
 800c00e:	ab03      	add	r3, sp, #12
 800c010:	9300      	str	r3, [sp, #0]
 800c012:	462a      	mov	r2, r5
 800c014:	4630      	mov	r0, r6
 800c016:	4b13      	ldr	r3, [pc, #76]	; (800c064 <_vfiprintf_r+0x230>)
 800c018:	a904      	add	r1, sp, #16
 800c01a:	f7fd fc77 	bl	800990c <_printf_float>
 800c01e:	4607      	mov	r7, r0
 800c020:	1c78      	adds	r0, r7, #1
 800c022:	d1d6      	bne.n	800bfd2 <_vfiprintf_r+0x19e>
 800c024:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c026:	07d9      	lsls	r1, r3, #31
 800c028:	d405      	bmi.n	800c036 <_vfiprintf_r+0x202>
 800c02a:	89ab      	ldrh	r3, [r5, #12]
 800c02c:	059a      	lsls	r2, r3, #22
 800c02e:	d402      	bmi.n	800c036 <_vfiprintf_r+0x202>
 800c030:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c032:	f7fe f9ce 	bl	800a3d2 <__retarget_lock_release_recursive>
 800c036:	89ab      	ldrh	r3, [r5, #12]
 800c038:	065b      	lsls	r3, r3, #25
 800c03a:	f53f af1d 	bmi.w	800be78 <_vfiprintf_r+0x44>
 800c03e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c040:	e71c      	b.n	800be7c <_vfiprintf_r+0x48>
 800c042:	ab03      	add	r3, sp, #12
 800c044:	9300      	str	r3, [sp, #0]
 800c046:	462a      	mov	r2, r5
 800c048:	4630      	mov	r0, r6
 800c04a:	4b06      	ldr	r3, [pc, #24]	; (800c064 <_vfiprintf_r+0x230>)
 800c04c:	a904      	add	r1, sp, #16
 800c04e:	f7fd fefd 	bl	8009e4c <_printf_i>
 800c052:	e7e4      	b.n	800c01e <_vfiprintf_r+0x1ea>
 800c054:	0800cde4 	.word	0x0800cde4
 800c058:	0800cdea 	.word	0x0800cdea
 800c05c:	0800cdee 	.word	0x0800cdee
 800c060:	0800990d 	.word	0x0800990d
 800c064:	0800be11 	.word	0x0800be11

0800c068 <__swbuf_r>:
 800c068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c06a:	460e      	mov	r6, r1
 800c06c:	4614      	mov	r4, r2
 800c06e:	4605      	mov	r5, r0
 800c070:	b118      	cbz	r0, 800c07a <__swbuf_r+0x12>
 800c072:	6a03      	ldr	r3, [r0, #32]
 800c074:	b90b      	cbnz	r3, 800c07a <__swbuf_r+0x12>
 800c076:	f7fe f885 	bl	800a184 <__sinit>
 800c07a:	69a3      	ldr	r3, [r4, #24]
 800c07c:	60a3      	str	r3, [r4, #8]
 800c07e:	89a3      	ldrh	r3, [r4, #12]
 800c080:	071a      	lsls	r2, r3, #28
 800c082:	d525      	bpl.n	800c0d0 <__swbuf_r+0x68>
 800c084:	6923      	ldr	r3, [r4, #16]
 800c086:	b31b      	cbz	r3, 800c0d0 <__swbuf_r+0x68>
 800c088:	6823      	ldr	r3, [r4, #0]
 800c08a:	6922      	ldr	r2, [r4, #16]
 800c08c:	b2f6      	uxtb	r6, r6
 800c08e:	1a98      	subs	r0, r3, r2
 800c090:	6963      	ldr	r3, [r4, #20]
 800c092:	4637      	mov	r7, r6
 800c094:	4283      	cmp	r3, r0
 800c096:	dc04      	bgt.n	800c0a2 <__swbuf_r+0x3a>
 800c098:	4621      	mov	r1, r4
 800c09a:	4628      	mov	r0, r5
 800c09c:	f7ff fdb2 	bl	800bc04 <_fflush_r>
 800c0a0:	b9e0      	cbnz	r0, 800c0dc <__swbuf_r+0x74>
 800c0a2:	68a3      	ldr	r3, [r4, #8]
 800c0a4:	3b01      	subs	r3, #1
 800c0a6:	60a3      	str	r3, [r4, #8]
 800c0a8:	6823      	ldr	r3, [r4, #0]
 800c0aa:	1c5a      	adds	r2, r3, #1
 800c0ac:	6022      	str	r2, [r4, #0]
 800c0ae:	701e      	strb	r6, [r3, #0]
 800c0b0:	6962      	ldr	r2, [r4, #20]
 800c0b2:	1c43      	adds	r3, r0, #1
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d004      	beq.n	800c0c2 <__swbuf_r+0x5a>
 800c0b8:	89a3      	ldrh	r3, [r4, #12]
 800c0ba:	07db      	lsls	r3, r3, #31
 800c0bc:	d506      	bpl.n	800c0cc <__swbuf_r+0x64>
 800c0be:	2e0a      	cmp	r6, #10
 800c0c0:	d104      	bne.n	800c0cc <__swbuf_r+0x64>
 800c0c2:	4621      	mov	r1, r4
 800c0c4:	4628      	mov	r0, r5
 800c0c6:	f7ff fd9d 	bl	800bc04 <_fflush_r>
 800c0ca:	b938      	cbnz	r0, 800c0dc <__swbuf_r+0x74>
 800c0cc:	4638      	mov	r0, r7
 800c0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0d0:	4621      	mov	r1, r4
 800c0d2:	4628      	mov	r0, r5
 800c0d4:	f000 f806 	bl	800c0e4 <__swsetup_r>
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	d0d5      	beq.n	800c088 <__swbuf_r+0x20>
 800c0dc:	f04f 37ff 	mov.w	r7, #4294967295
 800c0e0:	e7f4      	b.n	800c0cc <__swbuf_r+0x64>
	...

0800c0e4 <__swsetup_r>:
 800c0e4:	b538      	push	{r3, r4, r5, lr}
 800c0e6:	4b2a      	ldr	r3, [pc, #168]	; (800c190 <__swsetup_r+0xac>)
 800c0e8:	4605      	mov	r5, r0
 800c0ea:	6818      	ldr	r0, [r3, #0]
 800c0ec:	460c      	mov	r4, r1
 800c0ee:	b118      	cbz	r0, 800c0f8 <__swsetup_r+0x14>
 800c0f0:	6a03      	ldr	r3, [r0, #32]
 800c0f2:	b90b      	cbnz	r3, 800c0f8 <__swsetup_r+0x14>
 800c0f4:	f7fe f846 	bl	800a184 <__sinit>
 800c0f8:	89a3      	ldrh	r3, [r4, #12]
 800c0fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0fe:	0718      	lsls	r0, r3, #28
 800c100:	d422      	bmi.n	800c148 <__swsetup_r+0x64>
 800c102:	06d9      	lsls	r1, r3, #27
 800c104:	d407      	bmi.n	800c116 <__swsetup_r+0x32>
 800c106:	2309      	movs	r3, #9
 800c108:	602b      	str	r3, [r5, #0]
 800c10a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c10e:	f04f 30ff 	mov.w	r0, #4294967295
 800c112:	81a3      	strh	r3, [r4, #12]
 800c114:	e034      	b.n	800c180 <__swsetup_r+0x9c>
 800c116:	0758      	lsls	r0, r3, #29
 800c118:	d512      	bpl.n	800c140 <__swsetup_r+0x5c>
 800c11a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c11c:	b141      	cbz	r1, 800c130 <__swsetup_r+0x4c>
 800c11e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c122:	4299      	cmp	r1, r3
 800c124:	d002      	beq.n	800c12c <__swsetup_r+0x48>
 800c126:	4628      	mov	r0, r5
 800c128:	f7fe ffd2 	bl	800b0d0 <_free_r>
 800c12c:	2300      	movs	r3, #0
 800c12e:	6363      	str	r3, [r4, #52]	; 0x34
 800c130:	89a3      	ldrh	r3, [r4, #12]
 800c132:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c136:	81a3      	strh	r3, [r4, #12]
 800c138:	2300      	movs	r3, #0
 800c13a:	6063      	str	r3, [r4, #4]
 800c13c:	6923      	ldr	r3, [r4, #16]
 800c13e:	6023      	str	r3, [r4, #0]
 800c140:	89a3      	ldrh	r3, [r4, #12]
 800c142:	f043 0308 	orr.w	r3, r3, #8
 800c146:	81a3      	strh	r3, [r4, #12]
 800c148:	6923      	ldr	r3, [r4, #16]
 800c14a:	b94b      	cbnz	r3, 800c160 <__swsetup_r+0x7c>
 800c14c:	89a3      	ldrh	r3, [r4, #12]
 800c14e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c156:	d003      	beq.n	800c160 <__swsetup_r+0x7c>
 800c158:	4621      	mov	r1, r4
 800c15a:	4628      	mov	r0, r5
 800c15c:	f000 f883 	bl	800c266 <__smakebuf_r>
 800c160:	89a0      	ldrh	r0, [r4, #12]
 800c162:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c166:	f010 0301 	ands.w	r3, r0, #1
 800c16a:	d00a      	beq.n	800c182 <__swsetup_r+0x9e>
 800c16c:	2300      	movs	r3, #0
 800c16e:	60a3      	str	r3, [r4, #8]
 800c170:	6963      	ldr	r3, [r4, #20]
 800c172:	425b      	negs	r3, r3
 800c174:	61a3      	str	r3, [r4, #24]
 800c176:	6923      	ldr	r3, [r4, #16]
 800c178:	b943      	cbnz	r3, 800c18c <__swsetup_r+0xa8>
 800c17a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c17e:	d1c4      	bne.n	800c10a <__swsetup_r+0x26>
 800c180:	bd38      	pop	{r3, r4, r5, pc}
 800c182:	0781      	lsls	r1, r0, #30
 800c184:	bf58      	it	pl
 800c186:	6963      	ldrpl	r3, [r4, #20]
 800c188:	60a3      	str	r3, [r4, #8]
 800c18a:	e7f4      	b.n	800c176 <__swsetup_r+0x92>
 800c18c:	2000      	movs	r0, #0
 800c18e:	e7f7      	b.n	800c180 <__swsetup_r+0x9c>
 800c190:	200002dc 	.word	0x200002dc

0800c194 <_raise_r>:
 800c194:	291f      	cmp	r1, #31
 800c196:	b538      	push	{r3, r4, r5, lr}
 800c198:	4604      	mov	r4, r0
 800c19a:	460d      	mov	r5, r1
 800c19c:	d904      	bls.n	800c1a8 <_raise_r+0x14>
 800c19e:	2316      	movs	r3, #22
 800c1a0:	6003      	str	r3, [r0, #0]
 800c1a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a6:	bd38      	pop	{r3, r4, r5, pc}
 800c1a8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c1aa:	b112      	cbz	r2, 800c1b2 <_raise_r+0x1e>
 800c1ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1b0:	b94b      	cbnz	r3, 800c1c6 <_raise_r+0x32>
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	f000 f830 	bl	800c218 <_getpid_r>
 800c1b8:	462a      	mov	r2, r5
 800c1ba:	4601      	mov	r1, r0
 800c1bc:	4620      	mov	r0, r4
 800c1be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1c2:	f000 b817 	b.w	800c1f4 <_kill_r>
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d00a      	beq.n	800c1e0 <_raise_r+0x4c>
 800c1ca:	1c59      	adds	r1, r3, #1
 800c1cc:	d103      	bne.n	800c1d6 <_raise_r+0x42>
 800c1ce:	2316      	movs	r3, #22
 800c1d0:	6003      	str	r3, [r0, #0]
 800c1d2:	2001      	movs	r0, #1
 800c1d4:	e7e7      	b.n	800c1a6 <_raise_r+0x12>
 800c1d6:	2400      	movs	r4, #0
 800c1d8:	4628      	mov	r0, r5
 800c1da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c1de:	4798      	blx	r3
 800c1e0:	2000      	movs	r0, #0
 800c1e2:	e7e0      	b.n	800c1a6 <_raise_r+0x12>

0800c1e4 <raise>:
 800c1e4:	4b02      	ldr	r3, [pc, #8]	; (800c1f0 <raise+0xc>)
 800c1e6:	4601      	mov	r1, r0
 800c1e8:	6818      	ldr	r0, [r3, #0]
 800c1ea:	f7ff bfd3 	b.w	800c194 <_raise_r>
 800c1ee:	bf00      	nop
 800c1f0:	200002dc 	.word	0x200002dc

0800c1f4 <_kill_r>:
 800c1f4:	b538      	push	{r3, r4, r5, lr}
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	4d06      	ldr	r5, [pc, #24]	; (800c214 <_kill_r+0x20>)
 800c1fa:	4604      	mov	r4, r0
 800c1fc:	4608      	mov	r0, r1
 800c1fe:	4611      	mov	r1, r2
 800c200:	602b      	str	r3, [r5, #0]
 800c202:	f7f4 fe81 	bl	8000f08 <_kill>
 800c206:	1c43      	adds	r3, r0, #1
 800c208:	d102      	bne.n	800c210 <_kill_r+0x1c>
 800c20a:	682b      	ldr	r3, [r5, #0]
 800c20c:	b103      	cbz	r3, 800c210 <_kill_r+0x1c>
 800c20e:	6023      	str	r3, [r4, #0]
 800c210:	bd38      	pop	{r3, r4, r5, pc}
 800c212:	bf00      	nop
 800c214:	20001830 	.word	0x20001830

0800c218 <_getpid_r>:
 800c218:	f7f4 be6f 	b.w	8000efa <_getpid>

0800c21c <__swhatbuf_r>:
 800c21c:	b570      	push	{r4, r5, r6, lr}
 800c21e:	460c      	mov	r4, r1
 800c220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c224:	4615      	mov	r5, r2
 800c226:	2900      	cmp	r1, #0
 800c228:	461e      	mov	r6, r3
 800c22a:	b096      	sub	sp, #88	; 0x58
 800c22c:	da0c      	bge.n	800c248 <__swhatbuf_r+0x2c>
 800c22e:	89a3      	ldrh	r3, [r4, #12]
 800c230:	2100      	movs	r1, #0
 800c232:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c236:	bf0c      	ite	eq
 800c238:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c23c:	2340      	movne	r3, #64	; 0x40
 800c23e:	2000      	movs	r0, #0
 800c240:	6031      	str	r1, [r6, #0]
 800c242:	602b      	str	r3, [r5, #0]
 800c244:	b016      	add	sp, #88	; 0x58
 800c246:	bd70      	pop	{r4, r5, r6, pc}
 800c248:	466a      	mov	r2, sp
 800c24a:	f000 f849 	bl	800c2e0 <_fstat_r>
 800c24e:	2800      	cmp	r0, #0
 800c250:	dbed      	blt.n	800c22e <__swhatbuf_r+0x12>
 800c252:	9901      	ldr	r1, [sp, #4]
 800c254:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c258:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c25c:	4259      	negs	r1, r3
 800c25e:	4159      	adcs	r1, r3
 800c260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c264:	e7eb      	b.n	800c23e <__swhatbuf_r+0x22>

0800c266 <__smakebuf_r>:
 800c266:	898b      	ldrh	r3, [r1, #12]
 800c268:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c26a:	079d      	lsls	r5, r3, #30
 800c26c:	4606      	mov	r6, r0
 800c26e:	460c      	mov	r4, r1
 800c270:	d507      	bpl.n	800c282 <__smakebuf_r+0x1c>
 800c272:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c276:	6023      	str	r3, [r4, #0]
 800c278:	6123      	str	r3, [r4, #16]
 800c27a:	2301      	movs	r3, #1
 800c27c:	6163      	str	r3, [r4, #20]
 800c27e:	b002      	add	sp, #8
 800c280:	bd70      	pop	{r4, r5, r6, pc}
 800c282:	466a      	mov	r2, sp
 800c284:	ab01      	add	r3, sp, #4
 800c286:	f7ff ffc9 	bl	800c21c <__swhatbuf_r>
 800c28a:	9900      	ldr	r1, [sp, #0]
 800c28c:	4605      	mov	r5, r0
 800c28e:	4630      	mov	r0, r6
 800c290:	f7fd fa14 	bl	80096bc <_malloc_r>
 800c294:	b948      	cbnz	r0, 800c2aa <__smakebuf_r+0x44>
 800c296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c29a:	059a      	lsls	r2, r3, #22
 800c29c:	d4ef      	bmi.n	800c27e <__smakebuf_r+0x18>
 800c29e:	f023 0303 	bic.w	r3, r3, #3
 800c2a2:	f043 0302 	orr.w	r3, r3, #2
 800c2a6:	81a3      	strh	r3, [r4, #12]
 800c2a8:	e7e3      	b.n	800c272 <__smakebuf_r+0xc>
 800c2aa:	89a3      	ldrh	r3, [r4, #12]
 800c2ac:	6020      	str	r0, [r4, #0]
 800c2ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2b2:	81a3      	strh	r3, [r4, #12]
 800c2b4:	9b00      	ldr	r3, [sp, #0]
 800c2b6:	6120      	str	r0, [r4, #16]
 800c2b8:	6163      	str	r3, [r4, #20]
 800c2ba:	9b01      	ldr	r3, [sp, #4]
 800c2bc:	b15b      	cbz	r3, 800c2d6 <__smakebuf_r+0x70>
 800c2be:	4630      	mov	r0, r6
 800c2c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2c4:	f000 f81e 	bl	800c304 <_isatty_r>
 800c2c8:	b128      	cbz	r0, 800c2d6 <__smakebuf_r+0x70>
 800c2ca:	89a3      	ldrh	r3, [r4, #12]
 800c2cc:	f023 0303 	bic.w	r3, r3, #3
 800c2d0:	f043 0301 	orr.w	r3, r3, #1
 800c2d4:	81a3      	strh	r3, [r4, #12]
 800c2d6:	89a3      	ldrh	r3, [r4, #12]
 800c2d8:	431d      	orrs	r5, r3
 800c2da:	81a5      	strh	r5, [r4, #12]
 800c2dc:	e7cf      	b.n	800c27e <__smakebuf_r+0x18>
	...

0800c2e0 <_fstat_r>:
 800c2e0:	b538      	push	{r3, r4, r5, lr}
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	4d06      	ldr	r5, [pc, #24]	; (800c300 <_fstat_r+0x20>)
 800c2e6:	4604      	mov	r4, r0
 800c2e8:	4608      	mov	r0, r1
 800c2ea:	4611      	mov	r1, r2
 800c2ec:	602b      	str	r3, [r5, #0]
 800c2ee:	f7f4 fe69 	bl	8000fc4 <_fstat>
 800c2f2:	1c43      	adds	r3, r0, #1
 800c2f4:	d102      	bne.n	800c2fc <_fstat_r+0x1c>
 800c2f6:	682b      	ldr	r3, [r5, #0]
 800c2f8:	b103      	cbz	r3, 800c2fc <_fstat_r+0x1c>
 800c2fa:	6023      	str	r3, [r4, #0]
 800c2fc:	bd38      	pop	{r3, r4, r5, pc}
 800c2fe:	bf00      	nop
 800c300:	20001830 	.word	0x20001830

0800c304 <_isatty_r>:
 800c304:	b538      	push	{r3, r4, r5, lr}
 800c306:	2300      	movs	r3, #0
 800c308:	4d05      	ldr	r5, [pc, #20]	; (800c320 <_isatty_r+0x1c>)
 800c30a:	4604      	mov	r4, r0
 800c30c:	4608      	mov	r0, r1
 800c30e:	602b      	str	r3, [r5, #0]
 800c310:	f7f4 fe67 	bl	8000fe2 <_isatty>
 800c314:	1c43      	adds	r3, r0, #1
 800c316:	d102      	bne.n	800c31e <_isatty_r+0x1a>
 800c318:	682b      	ldr	r3, [r5, #0]
 800c31a:	b103      	cbz	r3, 800c31e <_isatty_r+0x1a>
 800c31c:	6023      	str	r3, [r4, #0]
 800c31e:	bd38      	pop	{r3, r4, r5, pc}
 800c320:	20001830 	.word	0x20001830

0800c324 <_init>:
 800c324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c326:	bf00      	nop
 800c328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c32a:	bc08      	pop	{r3}
 800c32c:	469e      	mov	lr, r3
 800c32e:	4770      	bx	lr

0800c330 <_fini>:
 800c330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c332:	bf00      	nop
 800c334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c336:	bc08      	pop	{r3}
 800c338:	469e      	mov	lr, r3
 800c33a:	4770      	bx	lr
